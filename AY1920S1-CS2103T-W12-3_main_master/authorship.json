[
  {
    "path": ".gitignore",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle build files"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/.gradle/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/build/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "src/main/resources/docs/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# IDEA files"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/.idea/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/out/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/*.iml"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Storage/log files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/data/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/config.json"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/preferences.json"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/*.log.*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# Test sandbox files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "src/test/data/sandbox/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# MacOS custom attributes files created by Finder"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".DS_Store"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "# VSCode Settings"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/.settings"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/bin/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/.project"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/.classpath"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 6,
      "-": 21
    }
  },
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d PalPay"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W12-3/main[image:https://travis-ci.org/se-edu/addressbook-level3.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-W12-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-W12-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "https://app.netlify.com/sites/gitgud-palpay/deploys[image:https://api.netlify.com/api/v1/badges/7fa7e814-fc6b-484b-885b-9b3fa95579b1/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "link:https://github.com/AY1920S1-CS2103T-W12-3/main/blob/master/LICENSE[image:https://img.shields.io/badge/license-MIT-informational.svg[MIT License]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* PalPay is a desktop finance management application with features such as budgeting, shared expense tracking and statistics."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* It is a Java (SDK 11) application intended for Computing students comfortable with CLI and wants to manage their personal finance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "// * \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* The foundation of this application is based on AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 6,
      "joloong": 5,
      "-": 25
    }
  },
  {
    "path": "_reposense/config.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": "  \"authors\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"githubId\": \"joloong\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"displayName\": \"LOONG ...JOEL\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"joloong\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"githubId\": \"dingyuchen\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"displayName\": \"DING... UCHEN\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"dingyuchen\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"githubId\": \"yewon0303\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"displayName\": \"PARK... E WON\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"yewon0303\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"githubId\": \"wallacelim97\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"displayName\": \"WALLA ... E LIM\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"wallacelim97\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"githubId\": \"Berttwm\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"displayName\": \"TAN W ... TRAND\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"Berttwm\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 39
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    compile group: \u0027org.apache.commons\u0027, name: \u0027commons-math3\u0027, version: \u00273.2\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    // Google\u0027s math plotting library"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    compile group: \u0027com.github.yannrichet\u0027, name: \u0027JMathPlot\u0027, version: \u00271.0.1\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "    archiveName \u003d \u0027PalPay.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss             : true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet          : \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            icons               : \u0027font\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental        : true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks           : true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix            : \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator         : \u0027-\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027         : \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0027site-name\u0027         : \u0027PalPay\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0027site-githuburl\u0027    : \u0027https://github.com/AY1920S1-CS2103T-W12-3/main\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "joloong": 3,
      "wallacelim97": 4,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "PalPay is being developed by team https://github.com/AY1920S1-CS2103T-W12-3[CS2103T-W12-3]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d Bertrand Tan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "image::berttwm.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "{empty} [https://github.com/berttwm[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Role: UI +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Responsibilities: SceneBuilder"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d Ding Yu Chen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "image::dingyuchen.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "{empty}[http://github.com/dingyuchen[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Role: Tester +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d Joel Loong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "image::joloong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "{empty}[http://github.com/joloong[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Responsibilities: Ensuring proper coding standards"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d Park Ye Won"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "image::yewon0303.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "{empty}[http://github.com/yewon0303[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Role: Deliverables and Deadlines +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Responsibilities: Ensure project deliverables are done on time and in the right format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d Wallace Lim"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "image::wallacelim97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "{empty}[http://github.com/wallacelim97[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Responsibilities: Overall project coordination"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 27,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W12-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve feel free to let us know!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[**to be edited**]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* *Email us* : You can also reach our team lead at mailto:Wallacelim97@gmail.com[Wallace\u0027s email]."
      }
    ],
    "authorContributionMap": {
      "Berttwm": 3,
      "-": 4
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "A project often depends on third-party libraries."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "Managing these _dependencies_ can be automated using Gradle."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "joloong": 11,
      "-": 43
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "﻿\u003d PalPay - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "By: `Team AY1920S1-CS2103T-W12-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "This document describes the architecture and system design of _PalPay_."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "It is a living document that evolves throughout the design and implementation for each release."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "Each release will have an edition of the document, and the current edition of the document is for the first public release of the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "This document is aimed at covering the high-level system architecture and design."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "It is segmented into two major parts: software design, including system architecture, and design implementation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "The software design documents the main software components that operate and support the main system architecture."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Essential details such as the user stories and use cases, as well as the Non Functional Requirements are included at the back of the document."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d\u003d Audience"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "This document is written for software engineers want to gain an insight of the system architecture and design of the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "In particular, the intended audience of this document is the students taking the roles of the developers, designers, and software testers of _PalPay_ from CS2103T - Software Engineering."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "_PalPay_ is a CLI application targeted for users who have poor financial management skills."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "It allows the users to keep track of daily financial transactions, as well as set a budget for a time duration to achieve long-term financial success."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Not only that, users can keep a ledger of lending and borrowing of money with others so that the users can keep track of the flow of their money."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "It is responsible for,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//TODO: Update class diagram"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d UI Component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "The `UI` component uses JavaFx UI framework."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Logic Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ". `Logic` uses the `BankAccountParser` class to parse the user command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ". This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ". The command execution can affect the `Model` (e.g. adding a transaction)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ". The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ". In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete t1\")` API call."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ".Interactions Inside the Logic Component for the `delete t1` Command"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Model Component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "// TODO: check accuracy?"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* stores the Bank Account data."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cBankOperation\u003e` and `ObservableList\u003cBudget\u003e`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joloong"
        },
        "content": "that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change due to user command."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//+"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Storage Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* can save the Bank Account data in json format and read it back."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Common Classes"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//\u003d\u003d\u003d [Proposed] Undo/Redo Feature"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//Step 2. The user executes `delete 5` command to delete the 5th person in the address book."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//Step 3. The user executes `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//Step 5. The user then decides to execute the command `list`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//We designed it this way because it no longer makes sense to redo the `add n/David ...` command."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "//image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joloong"
        },
        "content": "// tag::transaction[]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "\u003d\u003d\u003d Transaction: `in` / `out` / `split`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "The `Transaction` abstract class allows user to input income, expense or split commands into the PalPay."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joloong"
        },
        "content": "`Transaction` is an abstract class which implements `UndoableAction`. `inTransaction` and `outTransaction` extends the `Transaction` class."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "`Transaction` stores an *amount*, *date* and a set of *categories*. This describes the variables a `Transaction` with the `BankAccount` will typically hold."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "joloong"
        },
        "content": "`Split` transaction is the only dependency that relies on an additional `peopleInvolved` variable."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joloong"
        },
        "content": "`inTransaction` and `outTransaction` implements `BankAccountOperation`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joloong"
        },
        "content": "Implementation of `Transaction` abstract class allows code reuse as different types of transactions depends on similar variables."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joloong"
        },
        "content": "`inTransaction` and `outTransaction` can be referenced by making a call to `BankAccountOperation`, this `BankAccountOperation` is then passed as an argument to `Logic` components and multiple CRUD commands."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joloong"
        },
        "content": "This allows multiple transaction calls within the same method."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joloong"
        },
        "content": "// end::transaction[]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "// tag::update[]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "\u003d\u003d\u003d Update: `update`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "This feature allows users to update either the **Amount**, **Date** or **Category** of either a Transaction or Budget."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "This `update` feature allows one or more fields of a Transaction or Budget to be updated. (e.g. `update t1 $/2` and `update t1 $/2 d/10102019` will both work as intended). This will minimize the need to input all non-required parameters if a user does not require all parameters of a Transaction or Budget to be changed."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Update requires `TYPE+INDEX` as one of its parameter"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* **Alternative 1 (current choice):** takes in `TYPE+INDEX` to decide whether to delete an item from Transaction or Budget list. (e.g. `delete b1` deletes item index 1 from budget)."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "** Pros: Requires lesser user steps to be taken before executing a `update` command"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "** Cons: Requires two lists to be created instead of 1. The `UniqueTransactionList` stores Transaction items and `UniqueBudgetList` to store Budget items."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* **Alternative 2:** Change to **Transaction** or **Budget** mode and keying in only index (e.g. `update 1`)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "** Pros: Requires only one unique list required to store both Transactions and Budgets."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "** Cons: Requires additional user step to switch between modes before executing a updating command."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "// end::update[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "\u003d\u003d\u003d Undo / Redo Command Feature: `undo`/`redo`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "joloong"
        },
        "content": "** Cons: Logic is duplicated twice."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "joloong"
        },
        "content": "For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "joloong"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joloong"
        },
        "content": "Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "joloong"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Delete Transaction Feature: `delete`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "joloong"
        },
        "content": "This feature allows the user to delete an existing transaction or budget from the list. +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "joloong"
        },
        "content": "The following activity diagram summarizes what happens when a user executes Delete command:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joloong"
        },
        "content": ".Activity Diagram of Delete Command"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "joloong"
        },
        "content": "image::DeleteActivityDiagram.png[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "`Transaction` is an abstract class which implements `UndoableAction`. `inTransaction` and `outTransaction` extend the `Transaction` class."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "`Transaction` stores an *amount*, *date* and a set of *categories* which describe the variables a `Transaction` with the `BankAccount` will typically hold."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "`Split` transaction is the only dependency that relies on an additional `peopleInvolved` variable."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "`inTransaction` and `outTransaction` implement `BankAccountOperation`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Delete requires `TYPE+INDEX` as one of its parameter"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "Implementation of `Transaction` abstract class allows code reuse as different types of transactions depends on similar variables."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "`inTransaction` and `outTransaction` can be referenced by making a call to `BankAccountOperation`,"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "this `BankAccountOperation` is then passed as an argument to `Logic` components and multiple CRUD commands."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "This allows multiple transaction calls within the same method."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "joloong"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "joloong"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Sort Feature: `sort`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "joloong"
        },
        "content": "This feature allows the user to _sort_ their bank account by the _amount_ or _date_ of their transactions by using the command `sort amount` or `sort date` respectively."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "joloong"
        },
        "content": "The `sort` command is facilitated by the _Logic_ and _Model_ components of the application."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "joloong"
        },
        "content": "The following sequence diagram shows how the sorting of transactions work when the user enters `sort amount`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ".Sequence Diagram for `sort amount`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "joloong"
        },
        "content": "image::SortSequenceDiagram.png[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Sorting of the Bank Account"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **Alternative 1 (Current Choice):** Creating a comparator for each area to be sorted."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "joloong"
        },
        "content": "** **Pros:** Easy to implement."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "joloong"
        },
        "content": "** **Cons:** Users can only sort by comparators that have been implemented."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "joloong"
        },
        "content": "Developers have to create a new comparator class to sort a new area."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **Alternative 2:** Users can define the area to be sorted."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "joloong"
        },
        "content": "** **Pros:** Extremely flexible for the users as they are not limited to the number of areas to be sorted."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "joloong"
        },
        "content": "** **Cons:** Difficult to implement."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "joloong"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "joloong"
        },
        "content": "// tag::filter[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Filter Feature: `filter`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "joloong"
        },
        "content": "This feature allows the user to _filter_ their bank account by the _category_ of their transactions by using the"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "joloong"
        },
        "content": " `filter [CATEGORY]...`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "joloong"
        },
        "content": "The `FilterCommandParser` implements `Parser` with the following operation:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `FilterCommandParser#parse()`: This operation will take in a `String` input from the user that represents different categories delimited by a whitespace."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "joloong"
        },
        "content": "It will then create a `TransactionContainsCategoriesPredicate` and passed into a new `FilterCommand`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "joloong"
        },
        "content": "Finally, this operation will return the new `FilterCommand`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "joloong"
        },
        "content": "The `filter` command is facilitated by the `FilterCommandParser` and `FilterCommand` of the application."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "joloong"
        },
        "content": "PalPay filters the list of transactions by checking if any of the specified categories exists in the transaction."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "joloong"
        },
        "content": "For instance, the command `filter breakfast dinner` would display a list of transactions with categories of breakfast or dinner or both."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "joloong"
        },
        "content": "The following class diagram depicts the relations of the FilterCommand, FilterCommandParser and its related classes."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "joloong"
        },
        "content": ".Class Diagram for `Filter`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "joloong"
        },
        "content": "image::FilterClassDiagram.png[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Filtering by multiple categories"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **Alternative 1 (Current Choice):** Creating one predicate for all categories to be sorted."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "joloong"
        },
        "content": "** **Pros:** Extremely flexible for the users as they are not limited to the number of categories to be filtered."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "joloong"
        },
        "content": "** **Cons:** Difficult to implement."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **Alternative 2:** Creating a predicate for each category to be sorted."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "joloong"
        },
        "content": "** **Pros:** Easy to implement."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "joloong"
        },
        "content": "** **Cons:** Users can only filter by predicates that have been implemented."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "joloong"
        },
        "content": "Developers have to create a new predicate class to filter a new category."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "joloong"
        },
        "content": "// end::filter[]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "joloong"
        },
        "content": "// tag::view[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d View Feature: `view`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "joloong"
        },
        "content": "This feature allows the user to switch between the different tabs of the application."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "joloong"
        },
        "content": "The `view` command is facilitated by the `MainWindow`, `MainTabPanel`, `ViewCommandParser` and `ViewCommand`."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "joloong"
        },
        "content": "The following activity diagram shows the flow of the `view` command."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "joloong"
        },
        "content": ".Activity Diagram for `View`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "joloong"
        },
        "content": "image::ViewActivityDiagram.png[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "joloong"
        },
        "content": "// end::view[]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "// tag::split[]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003d\u003d\u003d Split Feature: `split`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "This feature allows the user to pay for a certain item or make a transaction on behalf of his friends."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Refer to the \u003c\u003cUserGuide#Features, UserGuide\u003e\u003e for usage details."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "The `split` command is an abstraction of `LendMoney` class. +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "joloong"
        },
        "content": "Given a list of *shares* and *people*, each person is assigned an *amount* based on the corresponding positional share and the total amount given to `split` command. +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "A `LendMoney` instance is created for each person and executed."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "image::LedgerOperationDiagram.png[]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Current implementation of `Split` class encourages code reuse by abstracting the delegating the task of rebalancing to another class. +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "However, this introduces coupling as the behavior of `Split` is now inexplicably tied to `LendMoney`."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "// TODO: add sequence diagram here"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "// end::split[]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003d\u003d\u003d Settle Up Feature: `pay`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "This feature allows the user to send money to another person. +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "The balance in the `Ledger` and the balance of the recipient is updated accordingly."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "The `pay` command creates `LendMoney` class that handles the transfer of fund from the user to another person."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "// TODO: add sequence diagram here"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "// tag::set[]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d\u003d Set Budget Feature: `set`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "This feature allows the user to set a budget for a given time period for a category, if specified."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "The user is allowed to set multiple budgets, but duplicate budgets (budgets with the same identity in terms of *amount*, *date* and *tag*) are not allowed."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Upon setting the budget and prior to the deadline, the user\u0027s `OutTransaction` will deduct the amount from each budget in the list respectively."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "The `set` command is an extension of parent `Command` class, facilitated by the _Logic_ and _Model_ components of the application, _PalPay_ +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Given an *amount* and *date*, a new Budget is set for the user. +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "joloong"
        },
        "content": "Upon setting a new budget, a `BudgetCard` is created and displayed in a list in the application window till the date set by the user. +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "// TODO: add PUML figure for Sequence diagram"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Currently, `Budget` does not extend from `Transaction` although the two behave in a similar way."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "There is an aggregation between `Budget` and `Transaction` as the two can exist independent of each other,"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "although an effect on one may also cause an impact on the other."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "The current design was chosen over the former design of inheritance as there is a stark difference in the two"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "in a way that `Budget` does not affect the `balance` of the user\u0027s bank account directly while `Transaction` does."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Hence, by Liskov Substitution Principle, inheritance is not a suitable design. +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "// end::set[]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "joloong"
        },
        "content": "// tag::project[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "[[Implementation-Projection]]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Project Balance Feature: `project`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "joloong"
        },
        "content": "This feature allows users to _project_ their balance status based on past income and outflows as manifest in their _TransactionHistory_ by using the command `project [DATE]`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "The `project` command is facilitated by the Logic and Model components of the application, _PalPay_"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "The sequence diagram below demonstrates how the `project [DATE]` command is handled by the application."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ".Sequence Diagram of Project Command"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "image::Project.png[ProjectCommand Sequence Diagram]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d\u003d Future Enhancements"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Graphical Representation"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "joloong"
        },
        "content": "In future updates, the _user\u0027s_ balance projection will be displayed as a linear graph plotted against time, up until the date specified by the user in the command."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Projection by Category"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "In future updates, the _user_ will be able to customise projections beyond specifying a single date."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "joloong"
        },
        "content": "Some possible customizations include solely projection _income_ / _outflow_ amounts, and filtered projections based on _categories_."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "joloong"
        },
        "content": "For instance, `project d/22112019 c/Food -o` will project the _user\u0027s_ spending (or outflow, as denoted by the `-o` flag) on Food (specified by the `c/Food` tag) up until the 22nd of November, 2019 (specified by the `d/22112019` tag)."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "The project command has multiple possible implementations as to how the projection may be computed."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "In the current implementation, the projected amount is calculated via the following equation:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "joloong"
        },
        "content": "_Projected Balance \u003d Current Balance - [(Past Income - Past Outflow) / Total Days Elapsed] * Days Until Date of Projection_"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "While this algorithm allows for simple and fast computation, it does not hedge against one-time big purchases."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "joloong"
        },
        "content": "For example, if the user were to buy a computer, his outflow projection is likely to be proportionally larger in the short run."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d\u003d Alternative Implementations"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Linear Regression"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "In light of the above-mentioned limitation, a possible algorithm to be used is the"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "https://en.wikipedia.org/wiki/Gradient_descent#targetText\u003dGradient%20descent%20is%20a%20first,function%20at%20the%20current%20point[_Gradient Descent_]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "joloong"
        },
        "content": "algorithm in finding a best fit projection line for the user\u0027s balance."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "joloong"
        },
        "content": "However, this will increase the computational cost of the `project` function significantly, causing _PalPay_ to run slower overall."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "joloong"
        },
        "content": "// end::project[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "joloong"
        },
        "content": "We are using `java.util.logging` package for logging."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "joloong"
        },
        "content": "The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "joloong"
        },
        "content": "|`* * *` |data-oriented person |see an overview of my transactions in an intuitive graph |gain insights at a glance"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "joloong"
        },
        "content": "|`* * *` |student |input my spending into different categories |manage my expenses better"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "joloong"
        },
        "content": "|`* * *` |visual person | see how much budget I have left in each category |cut down on spending as necessary"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "|`* * *` |student with many friends |split the bill with my friends |know how much I should payment for a meal"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "|`* * *` |student who forgets to payment his debt on time |be reminded to payment my debt before the deadline |stop incurring interests"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "joloong"
        },
        "content": "|`* *` |patriotic Singaporean who travels to JB often |easily calculate how much Ringgit to bring |enjoy my holiday with insufficient money"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "joloong"
        },
        "content": "|`* *` |thrifty person |see how my savings or spending will project into the future |plan my budget"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "joloong"
        },
        "content": "|`*` |user who forgets to save money |be incentivized me to save money |be motivated to not overspend/save money"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "(For all use cases below, the **System** is the `PalPay` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d\u003d Use case: Add an income"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "1. User requests to add an income amount."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "2. PalPay adds the income amount."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "joloong"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "joloong"
        },
        "content": "Amount entered by the user is invalid."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "** 1a1. PalPay shows an error message."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "+"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d\u003d Use case: Delete expense"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "1. User requests to view spending."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "2. PalPay shows the list of expenses since beginning of time."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "3. User requests to delete an expense."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "4. PalPay deletes the specified expense."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "joloong"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "joloong"
        },
        "content": "User speicified days passed since."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "** 1a1. PalPay shows the list of expenses since the time period specified."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ". Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e with JDK 11 or above installed."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ". A user with above average typing speed for regular English text should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ". Upon user input, PalPay should execute tasks (and display results) within 1 second."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ". Users should have (and be able to specify) default options such that they can issue minimal commands for common tasks."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ". Should be quick and efficient, with each user session lasting no longer than 3 minutes to effectively manage his current financial state."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ". Should not make users feel defeated, but rather empowered in managing their finances."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "joloong"
        },
        "content": "[[mainstream-os]]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "joloong"
        },
        "content": "Mainstream OS::"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "joloong"
        },
        "content": "[[private-contact-detail]]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "joloong"
        },
        "content": "Private contact detail::"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "joloong"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "joloong"
        },
        "content": "The window size may not be optimum."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "joloong"
        },
        "content": ".. Resize the window to an optimum size."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "joloong"
        },
        "content": "Move the window to a different location."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "joloong"
        },
        "content": "Close the window."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Deleting a Person"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "joloong"
        },
        "content": ".. Prerequisites: List all persons using the `list` command."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "joloong"
        },
        "content": "Multiple persons in the list."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "joloong"
        },
        "content": "   Expected: First contact is deleted from the list."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "joloong"
        },
        "content": "Details of the deleted contact shown in the status message."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "joloong"
        },
        "content": "Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "joloong"
        },
        "content": "   Expected: No person is deleted."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "joloong"
        },
        "content": "Error details shown in the status message."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "joloong"
        },
        "content": "Status bar remains the same."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Saving Data"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 168,
      "joloong": 178,
      "dingyuchen": 33,
      "wallacelim97": 27,
      "Berttwm": 30,
      "-": 325
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": ". Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joloong"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5. These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "joloong": 4,
      "-": 119
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "Do not disable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": ". Locate the `build.gradle` file and select it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "Click `OK`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "To rectify,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "joloong": 12,
      "-": 78
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": ". Hybrids of unit and integration tests."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "joloong": 4,
      "-": 49
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "﻿\u003d PalPay - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "By: `AY1920S1-CS2103T-W12-3`      Since: `SEPT 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "PalPay is for those who *prefer to use a desktop app for managing personal finances*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "More importantly, PalPay is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "If you can type fast, PalPay can get your finance management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "This User Guide is written for the users of PalPay as an introductory document of the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "You are strongly encouraged to read this document before using the application to enjoy the full functionality of the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "Ready to start your journey to financial freedom?"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "Jump to \u003c\u003cQuick Start\u003e\u003e to get started."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "Enjoy!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ". Download the latest `palpay.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your finance manager."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": ". Double-click the file to start the app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "The GUI should appear within a few seconds."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ". Type your command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "Example: Typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Some example commands you can try:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `view transaction` : shows list of your transactions."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `in $/100 n/mother d/31102019 c/allowance` : adds an income to your personal finance of *100* dollars with"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "the category *mother* and the description *allowance*."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `out $/3 n/pie d/19112019 c/food` : adds an expenditure to your personal finance of *3* dollars with"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "the category *food* and the description *pie*."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `exit` : exits the app"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "Example: For `in $/AMOUNT n/ITEM d/DATE`, `AMOUNT`, `ITEM` and `DATE` are parameters which can be used as"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "`in $/300 n/concert d/19112019`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "* Items in square brackets are optional. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "Example: `n/ITEM [c/CATEGORY]` can be used as `n/coke c/drinks` or as `n/coke`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "Example: `[n/NAME]...` can be used as `{nbsp}` (i.e. 0 times), `n/Amy`, `n/Amy n/Betty` etc."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "* Parameters can be in any order. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "Example: If the command specifies `$/AMOUNT n/ITEM`, `n/ITEM $/AMOUNT` is also acceptable."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "* Parameters that need to be concatenated together are represented as `PARAM+PARAM`. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Example: `TYPE+INDEX` refers to joining `TYPE` and `INDEX` together without a space, such as `t1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003d\u003d\u003d Splitting a Bill with Friends : `split` [Work in Progress]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "Split a bill with your friends +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `split $/AMOUNT n/NAME1 [n/NAME2]... [s/SHARE]...`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "* `[SHARE]` defines portion of bill to be paid by each person"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "** if no shares are given, `amount` will be split evenly across all people, including user"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "** user is included in the bill if number of shares is *1* more than number of people"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "*** user\u0027s share will be the first listed share"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "** each person\u0027s share is assigned in order"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "*** i.e. last person\u0027s share is the last share listed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "** shares cannot be negative numbers"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `split $/1000 n/Amy n/Betty n/Catherine n/Dan`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "** $1000 is split equally between Amy, Betty, Catherine, Dan and the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `split $/100 n/Albert n/Bernard n/Clement s/2 s/1 s/7`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "** $100 is split with Albert owing $20, Bernard owing $10 and Clement owing $70."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003d\u003d\u003d Settling Up with a Friend : `pay` (V1.4)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Sends money to 1 friend +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Format: `pay $/AMOUNT n/NAME1`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "* `pay $/2.5 n/Albert`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Logging Expense : `out`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Adds an expenditure of your personal finance +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "Format: `out $/AMOUNT n/ITEM d/DATE [c/CATEGORY]`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `AMOUNT` input accepts a non-negative value lesser than or equal to 1,000,000 of the expenditure."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `ITEM` input accepts the description of the expenditure"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* `DATE` accepts the date of this transaction"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* `CATEGORY` accepts the CATEGORY for this expenditure"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* `in` will update the Bank Account with a net **negative** amount (e.g. `out n/milk $/2 d/10102019` will **decrease** Bank Acount balance by $2)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `out $/100 d/01012019 n/milk c/food c/drinks`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `out $/29 d/29022020 n/taxi c/transport`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `out $/12 d/31122019 n/burger`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Logging Income : `in`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Adds an income of your personal finance +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "Format: `in $/AMOUNT n/ITEM d/DATE [c/CATEGORY]`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `AMOUNT` input accepts a non-negative value lesser than or equal to 1,000,000 of the income."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `ITEM` input accepts the description of the income"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `DATE` input accepts accepts the date of this transaction"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `CATEGORY` input accepts the CATEGORY for this income"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `in` updates the Bank Account with a net positive amount (e.g. `in n/work $/1000 d/10102019` will **increase** Bank Acount balance by $1000)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `in $/100 d/01012019 n/errand c/work c/drinks`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `in $/200 d/29022020 n/mom c/family`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `in $/120 d/31122019 n/work`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Setting a Budget : `set`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "You can set a budget for a particular category until a certain date, given it is not a duplicate."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "A duplicate budget is a budget with the same `AMOUNT` and `DATE` and `CATEGORY`. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "If you attempt to do so, you will receive an error message: `This budget already exists in the bank account`. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Format: `set $/AMOUNT d/DATE c/CATEGORY`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `AMOUNT` input accepts the new budget amount to be set. This amount must be non-negative, non-zero and"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "less than or equal to 1,000,000."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `DATE` input accepts the deadline to be set. It cannot be a date in the past."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `CATEGORY` accepts the CATEGORY for the budget. A budget can be created without any `CATEGORY`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Example: Let\u0027s say you want to restrict your spending for a certain category until a certain deadline."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "PalPay allows you to set a budget and serve as a reminder to show how much of the budget set you have left"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "until the deadline. (V1.4) You will be more self-conscious of your spending and minimise your spending by setting a budget. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "To set a new budget: +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "1. Type `set` and enter the relevant details (amount, deadline, category) in the format given above. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "2. The result box will display the message \"New budget successfully set\". +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "3. If the budget already exists in the budget list, the result box will display the message \"This budget already exists\". +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "4. Now you can see the newly set budget in the budget list. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joloong"
        },
        "content": "// tag::view[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Displaying View : `view`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joloong"
        },
        "content": "Want to switch tabs without using your mouse? You can switch to another tab with the `view` command. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `view TAB`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `TAB` input only accepts `transaction`, `budget` and `ledger` in v1.4."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `view transaction`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `view budget`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joloong"
        },
        "content": "// end::view[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "\u003d\u003d\u003d Deleting Finance : `delete`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "Deletes the specified Transaction or Budget from the finance manager. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "Format: `delete TYPE+INDEX`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* `INDEX` refers to the target item number. (Items are sorted starting from the **latest** input added)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `TYPE` only accepts `t` (Transaction) or `b` (Budget). (e.g. `delete b1` refers to deleting an *Budget* of index 1)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `TYPE+INDEX` requires the TYPE and INDEX to be placed in sequential order (e.g. `delete b 1` or `delete 1` or `delete 1b` will not work)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* You can only delete an existing transaction or budget. Nothing will be deleted if the transaction or budget with `INDEX` does not exists."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* Example: `delete t1` will delete the first transaction from the list of transactions."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* `delete t1`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* `delete b3`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "\u003d\u003d\u003d Updating Finance : `update`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "Updates the specified income or expenditure from the finance manager. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "Format: `update TYPE+INDEX [$/AMOUNT] [d/date] [n/ITEM] [c/CATEGORY]`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `AMOUNT` accepts a non-negative value less than or equal to 1,000,000 to update the target Transaction or Budget"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* `INDEX` refers to the target item number. (Items are sorted starting from the **latest** input added)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `TYPE` only accepts `t` (Transaction) or `b` (Budget). (e.g. `update b1 ...` refers to updating a *Budget* of index 1)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `TYPE+INDEX` requires the TYPE and INDEX to be placed in sequential order (e.g. `update b 1 ..` or `update 1 ..` or `update 1b ..` will not work)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `update` requires at least one field to be updated but also allows more than one field to be updated (e.g. `update t1 $/20 d/10102019 n/milk` and `update t1 $/10` will both be accepted but `update t1` will not be accepted)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* You can only update an existing transaction or budget. Nothing will be updated if the transaction or budget with `INDEX` does not exists."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* Example: `update t1 $/3000 d/10102019` will update the first transaction from the list of transactions by changing it\u0027s *Amount* to $1000 and *Date* to 10/10/2019."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* `update t1 $/20 n/coke c/drinks d/12122019`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* `update b2 $/300`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "* `update t4 $/30 d/12102019`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joloong"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Sorting Transactions : `sort`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joloong"
        },
        "content": "Have you ever wonder which is the most expensive transaction you ever made?"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joloong"
        },
        "content": "Or wondered which is the latest transaction you made? Fret not!"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joloong"
        },
        "content": "You can now `sort` your transactions according to `date` or `amount`. +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `sort PREDICATE`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* You are only able to `sort` by `date` and `amount` in v1.3."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joloong"
        },
        "content": "* Transactions will be sorted in ascending order."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `sort amount`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `sort date`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joloong"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joloong"
        },
        "content": "// tag::filter[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Filtering Transactions : `filter`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joloong"
        },
        "content": "PalPay gives you the power to filter your transactions with your desired `CATEGORY`. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `filter CATEGORY...`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "****"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joloong"
        },
        "content": "* All transactions with at least one `CATEGORY` in the `CATEGORY...` input will be displayed."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joloong"
        },
        "content": "* Example: `filter transport allowance` will display transactions with `transport`, `allowance`, or"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joloong"
        },
        "content": "`transport` and `allowance`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `filter food`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `filter transport allowance`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joloong"
        },
        "content": "// end::filter[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Projecting Balance : `project`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "joloong"
        },
        "content": "Projects future balance based on past In or Out transactions +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Format: `project d/DATE`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "****"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* `DATE` input only accepts date in format DDMMYYYY."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "* `DATE` input must be preceded by its tag `d\\`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "* `DATE` input must be set in the future."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "****"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "* `project d/22072020`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "* `project d/01012020`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Redoing the Last Command : `redo`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joloong"
        },
        "content": "Redo the last command +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Undoing the Last Command : `undo`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joloong"
        },
        "content": "Undo the last command. +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Clearing All Entries : `clear`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Clears all entries from your Bank Account. +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Listing All Entries : `list`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Lists all entries from your Bank Account. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Viewing Help : `help`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Opens help page for the list of usable commands +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Exiting the Application : `exit`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003d\u003d\u003d Saving the Data"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "PalPay data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "joloong"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Bank Account folder."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "* *Split* `split $/AMOUNT n/NAME1 [n/NAME2]... [s/SHARE]...` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Example: `split $/100 n/Albert n/Bernard n/Clement s/2 s/1 s/7`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "joloong"
        },
        "content": "* *Out* : `out $/AMOUNT n/ITEM d/DATE [c/CATEGORY]` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "joloong"
        },
        "content": "Example: `out $/20 n/coke d/19112019 c/drink c/lunch`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "joloong"
        },
        "content": "* *In* `in $/AMOUNT n/ITEM d/DATE [c/CATEGORY]` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "joloong"
        },
        "content": "Example: `in $/100 n/allowance d/11112019 c/income`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* *Set* : `set $/AMOUNT d/DATE c/CATEGORY` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joloong"
        },
        "content": "Example: `set $/100 d/10102019 c/food`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "joloong"
        },
        "content": "* *View* : `view TAB` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "joloong"
        },
        "content": "Example: `view transaction`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* *Delete* : `delete TYPE+INDEX` +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Example: `delete t1`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* *Update* : `update TYPE+INDEX [$/AMOUNT] [d/date] [n/ITEM] [c/CATEGORY]` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Example: `update b1 $/100 c/transport`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "joloong"
        },
        "content": "* *Sort* : `sort PREDICATE` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "joloong"
        },
        "content": "Example: `sort amount`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joloong"
        },
        "content": "* *Filter* : `filter CATEGORY...` +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "joloong"
        },
        "content": "Example: `filter food`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* *Project* : `project DURATION` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Example: `project d/22072020`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 83,
      "joloong": 102,
      "dingyuchen": 10,
      "wallacelim97": 4,
      "Berttwm": 31,
      "-": 111
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete t1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteTransaction(t1)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveBankAccount(bankAccount)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 3,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/DeleteActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ":User executes Delete command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "if () then ([Valid Type and Index]          )"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    :Locate target entry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    :Delete target entry from storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    :Display success message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "else (          [else])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    :Display error message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "endif"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "stop"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 14
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "participant \":BankAccountParser\" as BankAccountParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "[-\u003e LogicManager : execute(\"delete t1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "LogicManager -\u003e BankAccountParser : parseCommand(\"delete t1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "activate BankAccountParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "BankAccountParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "DeleteCommandParser --\u003e BankAccountParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "BankAccountParser -\u003e DeleteCommandParser : parse(\"t1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "DeleteCommandParser --\u003e BankAccountParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e BankAccountParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "BankAccountParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "deactivate BankAccountParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/LedgerOperationDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Package Ledger \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Package Transaction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Interface LedgerOperation \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Class Ledger"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Class Transaction \u003c\u003cabstract\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Package {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Class Split"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Class LendMoney"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Class Payment"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Class ReceiveMoney"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u0027UniquePersonList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "UniquePersonList ---\"*\" Person"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Transaction --- Amount"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Transaction --- Date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u0027ledger operation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Ledger o--\u003e LedgerOperation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Ledger --- UniquePersonList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Split .up.|\u003e LedgerOperation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Payment .up.|\u003e LedgerOperation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "LendMoney .up.|\u003e Payment"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "ReceiveMoney .up.|\u003e Payment"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Split --\u003e Transaction"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Split --- LendMoney"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Payment --\u003e Transaction"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 51
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Interface ReadOnlyBankAccount \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Interface ReadOnlyLedger \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class BankAccount"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class ReadOnlyBankAccount"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class Ledger"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class Projection"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class VersionedBankAccount"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Package Transaction {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Interface BankOperation \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Interface LedgerOperation \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class Transaction \u003c\u003cabstract\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class InTransaction"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class OutTransaction"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class Budget"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Package {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class Split"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class LendMoney"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class Payment"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class ReceiveMoney"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Split -[hidden]-\u003e Payment"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "ReceiveMoney -[hidden]-\u003e LendMoney"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class UniqueBudgetList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class UniqueTransactionList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Person -[hidden]right-\u003e UniquePersonList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Package Util {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class Time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027read only implementation"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Ledger .up.|\u003e ReadOnlyLedger"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "BankAccount .up.|\u003e ReadOnlyBankAccount"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027first level of association"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "ModelManager o--\u003e VersionedBankAccount"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "VersionedBankAccount o--\u003e BankAccount"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "VersionedBankAccount o--\u003e Ledger"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027bank operation"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "BankAccount o--\u003e \"1\" UniqueTransactionList"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "UniqueTransactionList o--\u003e \"*\" BankOperation"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "InTransaction .up.|\u003e BankOperation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "OutTransaction .up.|\u003e BankOperation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "InTransaction --\u003e Transaction"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "OutTransaction --\u003e Transaction"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Transaction o--\u003e Date"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Transaction o--\u003e Amount"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027ledger operation"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Ledger o--\u003e LedgerOperation"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Split .up.|\u003e LedgerOperation"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Payment .up.|\u003e LedgerOperation"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "LendMoney .up.|\u003e Payment"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "ReceiveMoney .up.|\u003e Payment"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Split --\u003e Transaction"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Payment --\u003e Transaction"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "Split --- LendMoney"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Split o--\u003e Person"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Payment o--\u003e Person"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "LendMoney o--\u003e Person"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "ReceiveMoney o--\u003e Person"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027 budget"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "BankAccount o--\u003e \"1\" UniqueBudgetList"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "UniqueBudgetList o--\u003e \"*\" Budget"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Budget *--\u003e Amount"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Budget *--\u003e Date"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Budget *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027 person"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Person o--\u003e Amount"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Person *--\u003e Name"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Person *--\u003e Phone"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Person *--\u003e Email"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Person *--\u003e Address"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027BankAccount *--\u003e \"1\" UniqueTransactionList"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027BankAccount *--\u003e \"1\" UniqueBudgetList"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Transaction *--\u003e Amount"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Transaction *--\u003e Date"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Transaction *--\u003e Person"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027Transaction *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027InTransaction .up.|\u003e Transaction"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u0027OutTransaction .up.|\u003e Transaction"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 106,
      "dingyuchen": 3,
      "-": 29
    }
  },
  {
    "path": "docs/diagrams/Project.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "participant \":ProjectCommandParser\" as ProjectCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "participant \"p:ProjectCommand\" as ProjectCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "participant \":ReadOnlyBankAccount\" as ReadOnlyBankAccount MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "participant \"dc:DateComparator\" as DateComparator MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "participant \"pr:Projection\" as Projection MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "[-\u003e LogicManager : execute(\"project d/22112019\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"project d/22112019\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "create ProjectCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "AddressBookParser -\u003e ProjectCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "activate ProjectCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ProjectCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "deactivate ProjectCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "AddressBookParser -\u003e ProjectCommandParser : parse(\"d/22112019\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "activate ProjectCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "create ProjectCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ProjectCommandParser -\u003e ProjectCommand : 22112019"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "activate ProjectCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ProjectCommand --\u003e ProjectCommandParser : p"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "deactivate ProjectCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ProjectCommandParser --\u003e AddressBookParser : p"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "deactivate ProjectCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ProjectCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "destroy ProjectCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "AddressBookParser --\u003e LogicManager : p"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "LogicManager -\u003e ProjectCommand : execute()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "activate ProjectCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ProjectCommand -\u003e Model : getBankAccount()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Model --\u003e ProjectCommand : ReadOnlyBankAccount"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "create DateComparator"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ProjectCommand --\u003e DateComparator"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "activate DateComparator"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "DateComparator --\u003e ProjectCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "deactivate DateComparator"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ProjectCommand --\u003e ReadOnlyBankAccount : getSortedTransactionHistory(dc)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "activate ReadOnlyBankAccount"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ReadOnlyBankAccount --\u003e ProjectCommand : th"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "deactivate ReadOnlyBankAccount"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "create Projection"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ProjectCommand --\u003e Projection : th, 22112019"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "activate Projection"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "Projection --\u003e ProjectCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "deactivate Projection"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ProjectCommand -\u003e CommandResult :pr"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "CommandResult --\u003e ProjectCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "ProjectCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "deactivate ProjectCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 93
    }
  },
  {
    "path": "docs/diagrams/SortSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "participant \":BankAccountParser\" as BankAccountParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "participant \":SortCommandParser\" as SortCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "participant \"s:SortCommand\" as SortCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "participant \"r:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "participant \":ReadOnlyBankAccount\" as ReadOnlyBankAccount MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "[-\u003e LogicManager : execute(sort amount)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "LogicManager -\u003e BankAccountParser : parseCommand(sort amount)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "activate BankAccountParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "create SortCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "BankAccountParser -\u003e SortCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "SortCommandParser --\u003e BankAccountParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "BankAccountParser -\u003e SortCommandParser : parse(sort amount)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "create SortCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "SortCommandParser -\u003e SortCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "SortCommand --\u003e SortCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "SortCommandParser --\u003e BankAccountParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "SortCommandParser -[hidden]-\u003e BankAccountParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "destroy SortCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "BankAccountParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "deactivate BankAccountParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "LogicManager -\u003e SortCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "SortCommand -\u003e Model : getBankAccount()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "Model -\u003e ReadOnlyBankAccount : getSortedTransactionHistory(comparator)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "activate ReadOnlyBankAccount"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "ReadOnlyBankAccount --\u003e Model : sortedTransactionHistory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "deactivate ReadOnlyBankAccount"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "SortCommand -\u003e Model : setTransactions(sortedTransactionHistory)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "Model --\u003e SortCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "SortCommand -\u003e Model : commitBankAccount()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "Model --\u003e SortCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "SortCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "CommandResult -\u003e SortCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "SortCommand --\u003e LogicManager : r"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "SortCommand -[hidden]-\u003e LogicManager : r"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "destroy SortCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "joloong": 82
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Interface BankAccountStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class JsonBankAccountStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "StorageManager o--\u003e BankAccountStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "JsonBankAccountStorage .left.|\u003e BankAccountStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "JsonBankAccountStorage .down.\u003e JsonSerializableBankAccountStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "JsonSerializableBankAccountStorage .right.\u003e JsonSerializableTransaction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "JsonSerializableBankAccountStorage .left.\u003e JsonSerializableBudget"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "JsonSerializableTransaction ...\u003e JsonAdaptedCategory"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "JsonSerializableBudget ...\u003e JsonAdaptedCategory"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 10,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class TransactionListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class TransactionCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class BudgetListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "Class BudgetCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "MainWindow *-down-\u003e TransactionListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "MainWindow *-down-\u003e BudgetListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "TransactionListPanel -down-\u003e TransactionCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "BudgetListPanel -down-\u003e BudgetCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "TransactionListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "BudgetListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "TransactionCard --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "BudgetCard --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "TransactionCard ..\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "BudgetCard ..\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "TransactionListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "BudgetListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 16,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/drawio/FilterClassDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003cmxfile host\u003d\"www.draw.io\" modified\u003d\"2019-10-29T03:03:41.894Z\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0\" etag\u003d\"Qnm_eNM_Sm--YnjLhcXP\" version\u003d\"12.1.7\" type\u003d\"device\" pages\u003d\"1\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"c4acf3e9-155e-7222-9cf6-157b1a14988f\"\u003e7Vxbc5s4FP41nsnuTDNcjf0YO5fdmWSTrdNt+9SRQbFpMfKCnNj99XsEEhcJDI5vnVkymRYdJAFH3/nORZCeOV6s7yK0nD8QDwc9Q/PWPfO6Zxi6pQ3gPybZpBLHcVLBLPI93ikXTPyfmAs1Ll35Ho5LHSkhAfWXZaFLwhC7tCRDUUTeyt1eSFC+6hLNsCKYuChQpZ99j85T6cDWcvkf2J/NxZV1jZ+ZIvfHLCKrkF+vZ5gvyU96eoHEXLx/PEceeSuIzJueOY4IoenRYj3GAdOtUFs67rbmbHbfEQ5pqwEOcqfIdqwBts1hf/pB3NgrClZYPEM/gMlGnv8KhzN22HNGaBrTCIHunWvRAS5T7KMOG5PFAoFq+JlpJPeVZ0hURDdiWeI3fxGgEFqjOV0EINTh8IWEdMI7adB2537g3aMNWTEVxBSWRLRGcxL5P6E/EoPhdEQ5AE2bzeYHwZgEJAJBSNJrZYMmbDJ+mQjHMOxJqFrPRPcopuJWSBCgZexPk5tjXRYomvnhiFBKFryTeKrbwpVz3MCsDE7YE70FYtL5F77LjwM0xcEow5/0DLBY5AcuTK8lP9kZAXOh0Fu08ANmvf/gyEMhEnpONaVrvF01IQr8WQgyFxSDo2wdi6DkOH3FEcXrgoiD9A6TBabRBrrws32H45ITij5Mm2+5dep93mVesMy+IAVOCLNs5two4IDbRVsb0StsBJ5Sw2vsrii+SAjxNxDIdiLhGR6elrFcXia+dhWQFDoO8AubgSnSB/q64mJKlmyyJXL9cHaf9Lm2cslHriAmepv7FE9Azu7pDegcZATmewkSlM19z8NhgkKKKJpmVrYkfkgTrdoj+AXdj7VLu2fDc42hredt+GXdIwBLyHThJyjAYCVvOKbV+KilpWbEcISAMbdCiNHfHyFodqsP/x46z8/O6i66uvsePMYfdGW5sQdOhjdBHXMyIyEKbnKpZOp5n3vCFjRByHdM6YabIVpRUsYPXvv0S+H4K5vqUgP3m7av13zupLERjRAe+EuxkY4zbNHOxyWtfKB3xdwtNKcBYdTIRIzICpd5wpEPKmVUkMhSvTBl1DotoTuyilxcAwmTLyYQ+Axvx40KkggHiPqv5Ts4KEmYqiMFvYAWMid4WucGOO+c26/p3Ix+o3Mz9Qrq0gfGkbjLqooCmYcbPz48XP11/e3z40dg9SuQTGgEHqVzbdtcmwKFBm9n1rDWpuyymvBxCNem3ltd8NNB4+BRj7lz1GMb54SGUQONh5vJ5Oru5tsn9m+HjTNhwxmcExtmAzYmn8ZjOOzQcSZ06Jp1OnhUBh3DCoTIGVSeb4jwNcdCm7yiractKMGu0IGQtU4j+BWeGAiKOjcv7fKgNOXh/YqFOzF0LS1N/VRpYqRMlaxN9qh75Ld1MaJUBUkMmic9H3G8Cmhn1ycMFnVBBWeza722XPbvCgXxxeP0O3YpB8qUkACjsIPIKSFinzChqIZIVeSo7joYfbRgSg/U1p8sHX9hSyPE5SFbtxmUKz2hKMbRL7tPYXalnOOVcpqMq9qUxD6F5JV1lXwrq9Bie+PwllUXdy8ZxC/SQJtz73PHunuw7hZiq9+kMNvB43jEaynwKFWpBRF2teqO4FIklgnOaBtd9o9FcLWbsRUEt30DpiO7fcnO2kp2pyxbV0PFVNZ81y3ZAjg8FM8Tud7C5oHbiruijdumoScbeAseEJu/bKUL27+9dlu/l9lm71f+UNt2fnstii1c24VN3K0+qLiRu5Mz3a0KA5pHm0IHbjpqkUYwnm6XKU+XXqmS+uuWtq0/HKR3UHM1KYJUrKF1gWgobypKEx25PGSokcVzhMIYudQn4Zh5cT+Mx4jiGXh1HD9F2APSpLgLNrpggw+wBi2ijap4Ocu7Du5DKl7rSMMNCt7zYoTCH1euCytBH5c4QgzqXWHruFGHsXvUcdIUq3ZXtCt//jooqdo3Py1K1DTmAxsjPOTmzzD2PZz7S4lrwJ91XHNuFFXtsJ8WRWq1T+CnC6u6sEoMkIo4Ztsq9fFw21fgeYqXpUXumzXS1553eOuZLBOyKmfvvcPlxkbb3Di1/H1zYyWLtDQJKo40Ret0VMqKs3ZDOrprtm5J70UYznDrfcn9TV4kqszWD5Ubm45C078fwVlnnCG76wU42cSEqpxx2ayKPGUfhn6MYTP9mFVJ3dFyusFZ2af4nUVWsNv3owv1IxBRE6yuA76Ps2pfAW3kq7pIak++6ttS1cuWQNOWryyzYaID8ZUtfdg2sLbeVl/fq3tT7VK+m621y4Ox4fAs5vcOI2ly/DJZFkzcHDq9HcrrSUv+cKq043DIIEN8Yt1YgK8h9gMHGUr17silakvNvasKeQpKuwzq/5pBKZ8jW+fOoCzjnCSqXTq7bDnuxqJHo73jhCCOHIL02228qc5bApkl9q8bYpldQxDlhofbg4SG/scJEiy1ssX/7EhHyh0pl/JDkVb2L8/9JwAs6yykvA+/vrsmJjzBGXLOtuGrdZwamS69smEN38f3hlQiG7RLXXd+n6VfeZnau9L26m7v5Rugmf8tpLR7/genzJv/AA\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "joloong": 1
    }
  },
  {
    "path": "docs/diagrams/drawio/ViewActivityDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003cmxfile host\u003d\"www.draw.io\" modified\u003d\"2019-10-31T02:05:31.400Z\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0\" etag\u003d\"cu3U71AlOD68_bTgi8zD\" version\u003d\"12.1.9\" type\u003d\"device\" pages\u003d\"1\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e7V1bd9o4EP41OWf3ITm+yZfHXEi23STtlnR3uy97HKOAtwZzjCjQX78ylrEtCWxjW8K0vATLMojRfDPfjEbKhX47XT9E7nzyFI5gcKEpo/WFfnehaaqh2PhP3LJJWizLShrGkT8inbKGof8dkkaFtC79EVwUOqIwDJA/LzZ64WwGPVRoc6MoXBW7vYVB8Vvn7hgyDUPPDdjWv/wRmpBW1XSyG79BfzwhX21rZnLj1fW+jqNwOSPfd6Hpb9tXcnvqpp9Ffuhi4o7CVa5JH1zot1EYouTddH0Lg1i2qdiS5+733N2NO4IzVOWB7762mD/i1vdfh79rzh/rD9700iSzt0CbVCBwhOVDLsMITcJxOHODQdZ6s/3RMP5YBV9lfR7DcI4bVdz4H0RoQybbXaIQN03QNCB38Yijzd/x81cgvfxCPm57cbcuXG12V6PreMrjkc3hLGm594OA3F+gKPwKb8MgjLa/Rb+/V/AL32GFleqaG40hOiAhQ086xmLJPUlk/ADDKcRDxB0iGLjI/1ZUK5do53jXb/fox9DHY9EUgiSgguQRgiNDKX7CIlxGHiQPZdOM3+RGkTVtJ7+GIhhkwN/cYAlThaY1IwgwKmMNwLo8jxsXWHxoiFwUN77hicjJXlGI7JlZeXsrm5VvMEJwfVDcqdgUpSC2FG2rDMs6aZrkUKwr++enINracjSlAGrtoxye8NWX3J0MTfFFBqbjQLgfZGXw3DvdiW5XAGE5Wo220dpMG3QGVZ8XMIoHuIbeEmHHF3u26dTFXoTWm0wr4olcTXwEh3N3K6cV9sVFDaDAh92Q5nn82dLxqx3wGZp1VbRaNgs/1QIs/mjr1p7E5Tg0gfjrwAmW48+oij/rtPBnMPj704er2wRxH90oAeM8fhNDEU3gllaOl1NI/Gy/EKlbRTyqJgvIHUjzgARdATL9YEmAzMExA+c+QB4LrB2U1QKQM1zvgXIDQFpVAemIoa8GzcNMSqGSkXbGXwGQqWZqLTVL7X49ZZFi9zlq9s/83aX6qF/eP82f/n14en0fPj9fqmK0zNSBVC1L5XEoSoom4fR1uThRB2E4lAQN1kEYHP/QGWFzDCnAFQ7CYzxSA+A6Ff2D0zpymxE2hwHYy2Sb5NOULV0brD04R3446yE5sykXaQAGetxgqbNkBeAkfcCNvxhM52hzAe4YGeMfioqCLApsFs7oTBBpcgN/jOFy52HxYc6t38Ri8z03uCY3pv5otMU2b+aKeG/DDGr0XFQzg1pXU2E7P4YZPN6kAa2iSbNPKwZNx50DWQTRMprFNi0Xjf7y4r5evXy6fh5e3768+/D8aw8tnOoUYaVbnPATiMzHAksKro7KBzUOP5UrrVYqqRIYD/H9Uiymyt/56km6XJcqHp3P2BMYYIm7m1y3edxhsf97TEDRZ5tadCvr7xzurwH9UH/8JhlxvdGJWkQyU/X5GYQf5/iaYU1Qqse0SoLwjrUMmDzWCoNFnLv1386atwKrnLemJkQIbwU2bzJQ5M4WrreN0856OmyjOB0cviM0jDDlZFOaLX/VIy1SYo+q6RSzm2qRujTFMikerhymHUA1DvUv0o7W2IKckPd82EJDVT2xMJnN/DHqcdqpdcs4LqfUWWrdllOL1COwmFXriuzW7XozN8/WFe3PKd18vnsYvPQxnWTQboyXTlJFZsxNwKO7r8tRrD7nzHRNKrPHq/QSynQt1j2IrVw+fdZqVi0SsbpZvq/LWm06e6weZq2W4Rzq3w1rtSStV59mcrih3oFO9I5RFIfOmlQsG6mrwI5lcL+n2zCq9zUpdoWklljiLCeP3SPinHqMcuKstA3xZqyBrXjYT5wfB5g4f+ojcTapKi/5xNliIxZMnINYLaKzJs62Thk3RzJxtuUS55ol0i0U3NVISjcwiKCnBpENaM+n4M7Ry/MHYivurP1rl+dsBOmJkF5uZ3FI84+yhmzaylV5EbjQVWSLu4r8Y0yHrZZjQ+hk2D1aQxYf+aT+u29LBum4zydNYKh6JSfS3dYVOVsbhTPpBmCpvL7W+mL0ceWdVGkbICrWaQLP5oTG/UImXXdqANnIlFP13SdkVs3Rt79B7ChkGlRxBQAikNn71Dq9z8lwJCNTVeQ6zR7k1lPElUOzm4LvutBUAQVNG3QPzVRI/YWmSuVEgC4Omtx9Bmd/gkLTk6sonB2JbptFN3c69IZYbkag2IRMtk5G1sg+wcUyEH5IzjhyRz6WOpXUacNXUiwW8LLFQGS2WFV+LkSXwanyQQd2286yGcDYcufHcOx7T+7MHdMnxOUWpkXDrQ1HR517wMMV19N1iCutnD1kp13mc8zk4Eus2FKPvbTTc+6ITE2NPUuiq3MvD21SlErHGPFxhLw/h6FTtVsCi5D4EpW6mbaYht9RsJPaHlOXj+2nWRXomCnIW/B1oUenyjYvVK2nRRJ0Idkt13qZqklFhBa9xNfe6WaHfn6PbThV9gZM1iuKteGSTx/RTv842laAawoFbu19DSo/sNy7r8HiE+a2EmqHRJgD/wSHGwEcrnzkTV7cV9YWSAz0G5kJi16u4pRkdhaQ8PWSE4/EB7Flwj/xCphmZptOvAisDuNPh9RDxPuwM70Vq50eOlCauyHxujT2zZ4i3jNiZFFLNCbn32SIJUac3f79qINtZums4+bhCEuHL7P/LZSQhOwfOOmD/wE\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "joloong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.UserState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.storage.JsonUserStateStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.storage.UserStateStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PalPay ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        UserStateStorage userStateStorage \u003d new JsonUserStateStorage(userPrefs.getUserStateFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        storage \u003d new StorageManager(userStateStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s bank account and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * The data from the sample bank account will be used instead if {@code storage}\u0027s bank account is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * or an empty bank account will be used instead if errors occur when reading {@code storage}\u0027s bank account."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Optional\u003cReadOnlyUserState\u003e userStateOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ReadOnlyUserState initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "            userStateOptional \u003d storage.readUserState();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "            if (!userStateOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BankAccount\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "            initialData \u003d userStateOptional.orElseGet(SampleDataUtil::getSampleAccount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "            logger.info(\"Successfully create initial data\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BankAccount\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            initialData \u003d new UserState();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BankAccount\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            initialData \u003d new UserState();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assert initialData !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        logger.info(\"Starting PalPay \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PalPay ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 13,
      "dingyuchen": 11,
      "wallacelim97": 3,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final String LOG_FILE \u003d \"palpay.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 2,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"The transaction index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_USAGE \u003d \"Invalid command usage! \\n%1$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX \u003d \"The budget index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected static String getMessageUnknownCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected static String getMessageInvalidCommandFormat() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected static String getMessageInvalidTransactionDisplayedIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    protected static String getMessageInvalidCommandUsage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return Messages.MESSAGE_INVALID_COMMAND_USAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected static String getMessageTransactionsListedOverview() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected static String getMessageInvalidBudgetDisplayedIndex() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 23,
      "wallacelim97": 5,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns the BankAccount."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @see Model#getBankAccount()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    ReadOnlyUserState getUserState();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns the user prefs\u0027 bank account file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    Path getUserStateFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of transactions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ObservableList\u003cBankAccountOperation\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns an ObservableList of Transactions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ObservableList\u003cBankAccountOperation\u003e getTransactionList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ObservableList\u003cLedgerOperation\u003e getLedgerOperationsList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 3,
      "joloong": 11,
      "dingyuchen": 15,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.logic.parser.MainParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final MainParser mainParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        mainParser \u003d new MainParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Command command \u003d mainParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "            storage.saveUserState(model.getUserState());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public ReadOnlyUserState getUserState() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return model.getUserState();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Path getUserStateFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return model.getUserStateFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ObservableList\u003cBankAccountOperation\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ObservableList\u003cBankAccountOperation\u003e getTransactionList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ObservableList\u003cLedgerOperation\u003e getLedgerOperationsList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return model.getFilteredLedgerOperationsList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 7,
      "joloong": 10,
      "dingyuchen": 17,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "            + PREFIX_CATEGORY + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "            + PREFIX_CATEGORY + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 4,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.UserState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Bank Account has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        model.setUserState(new UserState());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.commitUserState();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 1,
      "dingyuchen": 2,
      "Berttwm": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * The application should switch tab."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final Tab switchTab;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Warning(s) for a permissible yet potentially problematic command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private String warnings;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, Tab switchTab, String... warnings) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.switchTab \u003d switchTab;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (warnings !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            for (String warning : warnings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                sb.append(warning + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            this.warnings \u003d sb.deleteCharAt(sb.length() - 1).toString(); // remove trailing newline"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, Tab switchTab) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this(feedbackToUser, showHelp, exit, switchTab, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, {@code warnings}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public CommandResult(String feedbackToUser, String... warnings) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this(feedbackToUser, false, false, null, warnings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this(feedbackToUser, false, false, null, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return warnings \u003d\u003d null ? feedbackToUser : feedbackToUser.concat(warnings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean isSwitchTab() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return switchTab !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Tab getTab() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return switchTab;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 switchTab \u003d\u003d otherCommandResult.switchTab;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, switchTab);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 25,
      "wallacelim97": 27,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Deletes a { @code Transaction } or { @code Budget } identified using it\u0027s displayed index from the bank account."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \": Deletes the transaction identified by the index number used in the displayed transaction list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) Transaction entries preceded by \u0027t\u0027, \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + \"Budget entries preceded by \u0027b\u0027 \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" t1\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + COMMAND_WORD + \" b1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Entry: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public DeleteCommand(String type, Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (this.type.equals(\"t\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "            ObservableList\u003cBankAccountOperation\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            BankAccountOperation transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "            model.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "            model.commitUserState();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, transactionToDelete),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "                false, false, Tab.TRANSACTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        } else if (this.type.equals(\"b\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            ObservableList\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            Budget budgetToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            model.deleteBudget(budgetToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "            model.commitUserState();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, budgetToDelete),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "                false, false, Tab.BUDGET);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new CommandException(\"Unknown command error\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 23,
      "joloong": 16,
      "dingyuchen": 3,
      "Berttwm": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.TransactionContainsCategoriesPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Filters the transactions in the bank account."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d FilterCommand.COMMAND_WORD + \": Filters the transaction \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + \"in the bank account.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"Parameter: CATEGORY\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"Example: \" + FilterCommand.COMMAND_WORD + \" food drink\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Bank Account has been filtered!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final TransactionContainsCategoriesPredicate pred;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public FilterCommand(TransactionContainsCategoriesPredicate pred) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(pred);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.pred \u003d pred;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.updateFilteredTransactionList(pred);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.commitUserState();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "                model.getFilteredTransactionList().size()), false, false, Tab.TRANSACTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (obj instanceof FilterCommand) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "            FilterCommand filterCommand \u003d (FilterCommand) obj;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return pred.equals(filterCommand.pred);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "joloong": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Adds an income to the bank account."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class InCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"in\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a transaction to the bank account.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + PREFIX_NAME + \"milk \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + PREFIX_AMOUNT + \"100 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + PREFIX_DATE + \"24022019 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + PREFIX_CATEGORY + \"friends \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + PREFIX_CATEGORY + \"owesMoney\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New transaction added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"This transaction already exists: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_AMOUNT_OVERFLOW \u003d \"Transaction amount cannot exceed 1 million (i.e. 1000000)\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String MESSAGE_AMOUNT_NEGATIVE \u003d \"Transaction amount cannot be negative\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String MESSAGE_AMOUNT_ZERO \u003d \"Transaction amount cannot be zero\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final BankAccountOperation transaction;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public InCommand(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (model.has(transaction)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "                String.format(MESSAGE_DUPLICATE, transaction), false, false, Tab.TRANSACTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            model.add(transaction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "            model.commitUserState();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "                String.format(MESSAGE_SUCCESS, transaction), false, false, Tab.TRANSACTION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (obj instanceof InCommand) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "            InCommand inCommand \u003d (InCommand) obj;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return transaction.equals(inCommand.transaction);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 16,
      "joloong": 29,
      "dingyuchen": 5,
      "wallacelim97": 18,
      "Berttwm": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all transactions\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 2,
      "wallacelim97": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " * Adds an income to the bank account."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "public class OutCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"out\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a transaction to the bank account.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + PREFIX_NAME + \"chicken \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + PREFIX_AMOUNT + \"5 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + PREFIX_DATE + \"10102019 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + PREFIX_CATEGORY + \"lunch \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + PREFIX_CATEGORY + \"foodAndBeverage\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Out transaction added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"This transaction already exists: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_AMOUNT_OVERFLOW \u003d \"Transaction amount cannot exceed 1 million (i.e. 1000000)\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String MESSAGE_AMOUNT_NEGATIVE \u003d \"Transaction amount cannot be negative\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String MESSAGE_AMOUNT_ZERO \u003d \"Transaction amount cannot be zero\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final BankAccountOperation transaction;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public OutCommand(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // model.add(transaction);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // return new CommandResult(String.format(MESSAGE_SUCCESS, transaction));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (model.has(transaction)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "                String.format(MESSAGE_DUPLICATE, transaction), false, false, Tab.TRANSACTION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "            model.add(transaction);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "            model.commitUserState();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "                String.format(MESSAGE_SUCCESS, transaction), false, false, Tab.TRANSACTION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        } else if (obj instanceof OutCommand) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            OutCommand outCommand \u003d (OutCommand) obj;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return transaction.equals(outCommand.transaction);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "joloong": 19,
      "dingyuchen": 3,
      "Berttwm": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ProjectCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.comparator.DateComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.Projection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * Projects user\u0027s future balance based on income/outflow history"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class ProjectCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"project\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Date must be set in the future\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_VOID_TRANSACTION_HISTORY \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            \"Transaction history is currently empty. It is impossible to cast a projection.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_TRANSACTION_HISTORY \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            \"There are too few transactions. It is impossible to cast a projection.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String SMALL_SAMPLE_SIZE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            \"Projection is based on a small sample size, and may be limited in its accuracy\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Project future balance based on past income/outflow.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            + PREFIX_DATE + \"DATE\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            + PREFIX_DATE + \"12122103 09:00\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_WARNING \u003d \"[WARNING] %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Projected balance: %s\\n%s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_BUDGET_SUCCESS \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            \"You are on track to meeting your budget of %s, with a surplus of %s!\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_BUDGET_CAUTION \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            \"You are likely to exceed your budget of %s, with a deficit of %s!\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private static final int RECOMMENDED_MINIMUM_TRANSACTIONS \u003d 15;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private static final int REQUIRED_MINIMUM_TRANSACTIONS \u003d 5;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public final Date date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private Index budgetIdx;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private Projection projection;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public ProjectCommand(Date date) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public ProjectCommand(Date date, Index budgetIdx) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.budgetIdx \u003d budgetIdx;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ObservableList\u003cBankAccountOperation\u003e transactionHistory \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "                model.getBankAccount().getSortedTransactionHistory(new DateComparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (transactionHistory.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            throw new CommandException(MESSAGE_VOID_TRANSACTION_HISTORY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (transactionHistory.size() \u003c REQUIRED_MINIMUM_TRANSACTIONS) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            throw new CommandException(MESSAGE_INSUFFICIENT_TRANSACTION_HISTORY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (this.getBudgetIdx().isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                Budget budget \u003d model.getFilteredBudgetList().get(this.budgetIdx.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                this.projection \u003d new Projection(transactionHistory, date, budget);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            this.projection \u003d new Projection(transactionHistory, date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return transactionHistory.size() \u003c RECOMMENDED_MINIMUM_TRANSACTIONS"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                ? new CommandResult(String.format(MESSAGE_SUCCESS, projection.toString(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                        projection.getBudgetForecastText()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                        String.format(MESSAGE_WARNING, SMALL_SAMPLE_SIZE))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                : new CommandResult(String.format(MESSAGE_SUCCESS, projection.toString(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                        projection.getBudgetForecastText()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    Optional\u003cIndex\u003e getBudgetIdx() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.budgetIdx \u003d\u003d null ? Optional.empty() : Optional.of(this.budgetIdx);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 2,
      "dingyuchen": 3,
      "wallacelim97": 94,
      "Berttwm": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReceiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SHARE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.ReceiveMoney;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Splits an amount into smaller different amounts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class ReceiveCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"receive\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Transfer successful\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + \": Friend pays you some money.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_AMOUNT + \"AMOUNT\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_NAME + \"NAME\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + \"[\" + PREFIX_SHARE + \"SHARE]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_AMOUNT + \"600 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_NAME + \"John Doe \\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"This transaction already exists: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final ReceiveMoney transaction;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ReceiveCommand(ReceiveMoney transaction) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (model.has(transaction)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DUPLICATE, transaction), false, false, Tab.LEDGER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            model.add(transaction);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            model.commitUserState();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, transaction), false, false, Tab.LEDGER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 8,
      "dingyuchen": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!model.canRedoUserState()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.redoUserState();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Sets the budget for the BankAccount."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a budget to the bank account.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + PREFIX_DATE + \"DEADLINE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + PREFIX_AMOUNT + \"100 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + PREFIX_DATE + \"01012019 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + PREFIX_CATEGORY + \"food \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New budget successfully set: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"This budget already exists: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MESSAGE_AMOUNT_OVERFLOW \u003d \"Budget amount cannot exceed 1 million (i.e. 1000000)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MESSAGE_AMOUNT_NEGATIVE \u003d \"Budget amount cannot be negative\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MESSAGE_AMOUNT_ZERO \u003d \"Budget amount cannot be zero\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MESSAGE_DATE_PAST \u003d \"Budget cannot be set for past dates\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public SetCommand(Budget budget) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (model.has(budget)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DUPLICATE, budget), false, false, Tab.BUDGET);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            model.add(budget);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "            model.commitUserState();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, budget), false, false, Tab.BUDGET);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 47,
      "joloong": 7,
      "dingyuchen": 2,
      "Berttwm": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Sorts all transactions in the bank account to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d SortCommand.COMMAND_WORD + \": Sorts the transaction \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"in the bank account. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"Parameter: BY\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"Example: \" + SortCommand.COMMAND_WORD + \" amount\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all transactions\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final Comparator\u003cBankAccountOperation\u003e comparator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public SortCommand(Comparator\u003cBankAccountOperation\u003e comparator) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        List\u003cBankAccountOperation\u003e sortedTransactionHistory \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            model.getBankAccount().getSortedTransactionHistory(comparator);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.setTransactions(sortedTransactionHistory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.commitUserState();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, Tab.TRANSACTION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (obj instanceof SortCommand) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "            SortCommand sortCommand \u003d (SortCommand) obj;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return comparator.equals(sortCommand.comparator);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 49,
      "dingyuchen": 5,
      "Berttwm": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SplitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SHARE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Split;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Splits an amount into smaller different amounts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "public class SplitCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"split\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Split successful\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        + \": Splits an expenditure between people and add that transaction to the bank account.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME]...\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + \"[\" + PREFIX_SHARE + \"SHARE]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_AMOUNT + \"600 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_NAME + \"John Soe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_NAME + \"John Moe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_SHARE + \"1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_SHARE + \"2 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + PREFIX_SHARE + \"3\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + \"If number of shares is one more than number of names listed, \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        + \"first share is taken to be user\u0027s share of the expenditure\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String SHARES_FORMAT \u003d \"If number of shares is equal to number of names given,\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"user is assumed to be excluded from the expenditure.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"Else, first share is taken to be the user\u0027s share.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"This transaction already exists: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final Split transaction;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public SplitCommand(Split transaction) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (model.has(transaction)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DUPLICATE, transaction), false, false, Tab.LEDGER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            model.add(transaction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            model.commitUserState();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, transaction), false, false, Tab.LEDGER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 2,
      "joloong": 11,
      "dingyuchen": 28,
      "Berttwm": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LEDGER_OPERATIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!model.canUndoUserState()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.undoUserState();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        model.updateFilteredLedgerList(PREDICATE_SHOW_ALL_LEDGER_OPERATIONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 30,
      "dingyuchen": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.InTransaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.OutTransaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " * Updates the details of an existing Transaction in the BankAccount."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the details of the person identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) Transaction entries preceded by \u0027t\u0027, \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + \"Budget entries preced by \u0027b\u0027 \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" t1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + PREFIX_AMOUNT + \"123 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        + PREFIX_DATE + \"12022019\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to update must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_UPDATE_ENTRY_SUCCESS \u003d \"Updated: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_AMOUNT_OVERFLOW \u003d \"Transaction amount cannot exceed 1 million (i.e. 1000000)\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String MESSAGE_AMOUNT_NEGATIVE \u003d \"Transaction amount cannot be negative\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String MESSAGE_AMOUNT_ZERO \u003d \"Transaction amount cannot be zero\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    private final UpdateTransactionDescriptor updateTransactionDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public UpdateCommand(String type, Index targetIndex, UpdateTransactionDescriptor updateTransactionDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(updateTransactionDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this.updateTransactionDescriptor \u003d new UpdateTransactionDescriptor(updateTransactionDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (this.type.equals(\"t\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "            ObservableList\u003cBankAccountOperation\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            BankAccountOperation transactionToReplace \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            BankAccountOperation updatedTransaction \u003d createUpdatedTransaction(transactionToReplace,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                updateTransactionDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            model.setTransaction(transactionToReplace, updatedTransaction);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "            model.commitUserState();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_UPDATE_ENTRY_SUCCESS, updatedTransaction),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "                false, false, Tab.TRANSACTION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        } else if (this.type.equals(\"b\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            ObservableList\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            Budget budgetToReplace \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            Budget updatedBudget \u003d createUpdatedBudget(budgetToReplace,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                updateTransactionDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            model.setBudget(budgetToReplace, updatedBudget);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "            model.commitUserState();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_UPDATE_ENTRY_SUCCESS, updatedBudget),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "                false, false, Tab.BUDGET);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new CommandException(\"Unknown command error\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Creates and returns a {@code Transaction} with the details of {@code transactionToEdit}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * edited with {@code editTransactionDescriptor}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static BankAccountOperation createUpdatedTransaction("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joloong"
        },
        "content": "        BankAccountOperation transactionToEdit, UpdateTransactionDescriptor updateTransactionDescriptor) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assert transactionToEdit !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Description updatedDescription \u003d updateTransactionDescriptor"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .getDescription()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .orElse(transactionToEdit.getDescription());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Amount updatedAmount \u003d updateTransactionDescriptor.getAmount().orElse(transactionToEdit.getAmount());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Date updatedDate \u003d updateTransactionDescriptor.getDate().orElse(transactionToEdit.getDate());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d updateTransactionDescriptor"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .getCategories().orElse(transactionToEdit.getCategories());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (transactionToEdit instanceof InTransaction) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return new InTransaction(updatedAmount, updatedDate, updatedDescription, updatedCategories);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            /* transactionToEdit instanceof OutTransaction. Add in more conditionals. */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return new OutTransaction(updatedAmount, updatedDate, updatedDescription, updatedCategories);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        UpdateCommand u \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return targetIndex.equals(u.targetIndex)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            \u0026\u0026 updateTransactionDescriptor.equals(u.updateTransactionDescriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Creates and returns a {@code Transaction} with the details of {@code transactionToEdit}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * edited with {@code editTransactionDescriptor}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private static Budget createUpdatedBudget(Budget budgetToEdit,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                                              UpdateTransactionDescriptor updateTransactionDescriptor) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assert budgetToEdit !\u003d null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        Amount updatedAmount \u003d updateTransactionDescriptor.getAmount().orElse(budgetToEdit.getBudget());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        Date updatedDate \u003d updateTransactionDescriptor.getDate().orElse(budgetToEdit.getDeadline());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d updateTransactionDescriptor"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            .getCategories().orElse(budgetToEdit.getCategories());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return new Budget(updatedAmount, updatedDate, updatedCategories);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Stores the details to update the transaction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * corresponding field value of the transaction."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static class UpdateTransactionDescriptor {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joloong"
        },
        "content": "        private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public UpdateTransactionDescriptor() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joloong"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public UpdateTransactionDescriptor(UpdateTransactionDescriptor toCopy) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joloong"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joloong"
        },
        "content": "            setCategories(toCopy.categories);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, amount, date, categories);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joloong"
        },
        "content": "         * Sets {@code categories} to this object\u0027s {@code categories}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joloong"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void setCategories(Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joloong"
        },
        "content": "            this.categories \u003d (categories !\u003d null) ? new HashSet\u003c\u003e(categories) : null;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joloong"
        },
        "content": "         * Returns an unmodifiable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joloong"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code categories} is null."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public Optional\u003cSet\u003cCategory\u003e\u003e getCategories() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return (categories !\u003d null) ? Optional.of(Collections.unmodifiableSet(categories)) : Optional.empty();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            if (!(other instanceof UpdateCommand.UpdateTransactionDescriptor)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            UpdateCommand.UpdateTransactionDescriptor e \u003d (UpdateCommand.UpdateTransactionDescriptor) other;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 getCategories().equals(e.getCategories())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 34,
      "joloong": 35,
      "dingyuchen": 2,
      "Berttwm": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Views the different kind of modes in PalPay."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ViewCommand.COMMAND_WORD + \": View the bank account.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"Parameter: SIMI\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "        + \"Example: \" + ViewCommand.COMMAND_WORD + \" transaction\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tab switched!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final Tab tab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public ViewCommand(Tab tab) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.tab \u003d tab;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, tab);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!(obj instanceof ViewCommand)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ViewCommand other \u003d (ViewCommand) obj;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return tab \u003d\u003d other.tab;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/comparator/AmountComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Comparator class for sorting Transactions in ascending order of amount"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class AmountComparator implements Comparator\u003cBankAccountOperation\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public int compare(BankAccountOperation t1, BankAccountOperation t2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireAllNonNull(t1, t2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return t1.getAmount().compareTo(t2.getAmount());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this \u003d\u003d obj"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "            || obj instanceof AmountComparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 22,
      "dingyuchen": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/comparator/DateComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * Comparator class for sorting Transactions in ascending order of date"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class DateComparator implements Comparator\u003cBankAccountOperation\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public int compare(BankAccountOperation o1, BankAccountOperation o2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireAllNonNull(o1, o2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return o1.getDate().compareTo(o2.getDate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this \u003d\u003d obj"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "            || obj instanceof DateComparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 14,
      "dingyuchen": 2,
      "wallacelim97": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, categoryList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 6,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"$/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final Prefix PREFIX_SHARE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final Prefix PREFIX_BUDGET \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 1,
      "dingyuchen": 1,
      "wallacelim97": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            String type \u003d ParserUtil.parseType(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return new DeleteCommand(type, index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 2,
      "joloong": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.TransactionContainsCategoriesPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * and returns a FilterCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new FilterCommand(new TransactionContainsCategoriesPredicate(Arrays.asList(tagKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.logic.commands.InCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.InTransaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Parses input arguments and creates a new InCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class InCommandParser implements Parser\u003cInCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public InCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        /* handles negative amount */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray()[0] \u003d\u003d (NEGATIVE_AMOUNT_SIGN)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new ParseException(String.format(InCommand.MESSAGE_AMOUNT_NEGATIVE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        /* handles 0 value */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray()[0] \u003d\u003d (ZERO_AMOUNT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            \u0026\u0026 argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray().length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new ParseException(String.format(InCommand.MESSAGE_AMOUNT_ZERO));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (categoryList.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "            categoryList.add(new Category(\"Uncategorised\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        BankAccountOperation transaction \u003d new InTransaction(amount, date, description, categoryList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return new InCommand(transaction);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 3,
      "joloong": 20,
      "dingyuchen": 2,
      "wallacelim97": 30,
      "Berttwm": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MainParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.InCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.OutCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ProjectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ReceiveCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.SplitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Parses input arguments and creates a new SplitCommand or InCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class MainParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SplitCommand or InCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * and returns an SplitCommand or InCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        case SplitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return new SplitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        case InCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return new InCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        case OutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return new OutCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return new SetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        case ProjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return new ProjectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        case ReceiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return new ReceiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 9,
      "joloong": 47,
      "dingyuchen": 4,
      "wallacelim97": 34,
      "Berttwm": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OutCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.logic.commands.OutCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.OutTransaction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " * Parses input arguments and creates a new OutCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "public class OutCommandParser implements Parser\u003cOutCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public OutCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OutCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        /* handles negative amount */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray()[0] \u003d\u003d (NEGATIVE_AMOUNT_SIGN)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new ParseException(String.format(OutCommand.MESSAGE_AMOUNT_NEGATIVE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        /* handles 0 value */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray()[0] \u003d\u003d (ZERO_AMOUNT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            \u0026\u0026 argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray().length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new ParseException(String.format(OutCommand.MESSAGE_AMOUNT_ZERO));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Description description \u003d new Description(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (categoryList.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "            categoryList.add(new Category(\"Uncategorised\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        BankAccountOperation transaction \u003d new OutTransaction(amount, date, description, categoryList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return new OutCommand(transaction);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 8,
      "dingyuchen": 1,
      "Berttwm": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final int MAX_AMOUNT_LENGTH \u003d 7;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final char NEGATIVE_AMOUNT_SIGN \u003d \u0027-\u0027;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final char ZERO_AMOUNT \u003d \u00270\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Berttwm": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     *                        unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim().substring(1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parses {@code type} into an {@code String} and returns it. Leading"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String trimmedType \u003d type.trim().substring(0, 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return trimmedType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (StringIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new ParseException(ex.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Parses a {@code String descriptions} into a {@code Description}. Leading and trailing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (!Name.isValidName(trimmedDescription)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Parses a {@code Collection\u003cString\u003e names} into a {@code List\u003cName\u003e}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param names"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static List\u003cName\u003e parseNames(Collection\u003cString\u003e names) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(names);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        List\u003cName\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        for (String name : names) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            nameList.add(parseName(name));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return nameList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}. Leading and trailing"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}. Leading and trailing"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (!trimmedDate.matches(Date.DATE_FORMAT)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            throw new ParseException(Date.MESSAGE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            throw new ParseException(Date.MESSAGE_DATE_INVALID);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}. Leading and trailing"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}. Leading and trailing"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!Category.isValidCategoryName(trimmedCategory)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static Set\u003cCategory\u003e parseCategories(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final Set\u003cCategory\u003e categorySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (String categoryName : categories) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joloong"
        },
        "content": "            categorySet.add(parseCategory(categoryName));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return categorySet;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e shares} into a {@code List\u003cInteger\u003e}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param shares"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static List\u003cInteger\u003e parseShares(Collection\u003cString\u003e shares) throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(shares);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        final List\u003cInteger\u003e intShares \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        for (String share : shares) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joloong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                int shareInt \u003d Integer.parseInt(share.trim());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                if (shareInt \u003c 0) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                    throw new ParseException(Amount.SHARE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joloong"
        },
        "content": "                intShares.add(Integer.parseInt(share.trim()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joloong"
        },
        "content": "            } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return intShares;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Parse {@code String s} into an {@code Amount}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param s input"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return Amount"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static Amount parseAmount(String s) throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return new Amount(Double.parseDouble(s));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new ParseException(ex.getMessage());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Parse Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return {@code Index} representing the budget\u0027s index"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static Index parseBudgetIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(oneBasedIndex);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 7,
      "joloong": 38,
      "dingyuchen": 56,
      "wallacelim97": 31,
      "Berttwm": 15,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ProjectCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.logic.commands.ProjectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * Parses input arguments and creates a new ProjectCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class ProjectCommandParser implements Parser\u003cProjectCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public ProjectCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_DATE, PREFIX_BUDGET);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ProjectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (date.compareTo(Date.now()) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_USAGE, ProjectCommand.MESSAGE_INVALID_DATE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_BUDGET)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            Index budgetIdx \u003d ParserUtil.parseBudgetIndex(argMultimap.getValue(PREFIX_BUDGET).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return new ProjectCommand(date, budgetIdx);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return new ProjectCommand(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 1,
      "wallacelim97": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReceiveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.logic.commands.ReceiveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.ReceiveMoney;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Parses input arguments and creates a new InCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class ReceiveCommandParser implements Parser\u003cReceiveCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ReceiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReceiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Person person \u003d new Person(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            date \u003d Date.now();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        // TODO: separate description from name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ReceiveMoney transaction \u003d new ReceiveMoney(person, amount, date, new Description(\"stub\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return new ReceiveCommand(transaction);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 12,
      "dingyuchen": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Parses input arguments and creates a new SetCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class SetCommandParser implements Parser\u003cSetCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public SetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT, PREFIX_DATE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        /* handles negative amount */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray()[0] \u003d\u003d (NEGATIVE_AMOUNT_SIGN)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new ParseException(String.format(SetCommand.MESSAGE_AMOUNT_NEGATIVE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        /* handles 0 value */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray()[0] \u003d\u003d (ZERO_AMOUNT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray().length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new ParseException(String.format(SetCommand.MESSAGE_AMOUNT_ZERO));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        /* handles amount above 1 million */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).get().length() \u003e MAX_AMOUNT_LENGTH) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new ParseException(String.format(SetCommand.MESSAGE_AMOUNT_OVERFLOW));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        Amount budget \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (date.isPast()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new ParseException(String.format(SetCommand.MESSAGE_DATE_PAST));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Budget newBudget \u003d new Budget(budget, date, categoryList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return new SetCommand(newBudget);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 51,
      "joloong": 5,
      "Berttwm": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.comparator.AmountComparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.comparator.DateComparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parses the given {@code String} of argument in the context of the SortCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // TODO: CHANGE TO ENUMS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (trimmedArgs.equals(\"date\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new SortCommand(new DateComparator());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (trimmedArgs.equals(\"amount\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new SortCommand(new AmountComparator());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SplitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SHARE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.logic.commands.SplitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Split;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Parses input arguments and creates a new SplitCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class SplitCommandParser implements Parser\u003cSplitCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public SplitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_SHARE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                PREFIX_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SplitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        List\u003cName\u003e names \u003d ParserUtil.parseNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UniquePersonList people \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        for (Name name : names) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            people.add(new Person(name));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).orElse(Date.now().toString()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        List\u003cInteger\u003e shares \u003d ParserUtil.parseShares(argMultimap.getAllValues(PREFIX_SHARE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (shares.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            shares \u003d IntStream.rangeClosed(0, people.size()).map(i -\u003e 1).boxed().collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        boolean validSharesLength \u003d shares.size() \u003d\u003d people.size() || shares.size() \u003d\u003d people.size() + 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!validSharesLength) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SplitCommand.SHARES_FORMAT));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (shares.size() \u003d\u003d people.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            shares.add(0, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Split transaction \u003d new Split(amount, date, description, shares, people);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return new SplitCommand(transaction);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 71,
      "Berttwm": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateTransactionDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " * Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            type \u003d ParserUtil.parseType(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        UpdateTransactionDescriptor updateTransactionDescriptor \u003d new UpdateTransactionDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            /* handles negative amount */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            if (argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray()[0] \u003d\u003d (NEGATIVE_AMOUNT_SIGN)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                throw new ParseException(String.format(UpdateCommand.MESSAGE_AMOUNT_NEGATIVE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            /* handles 0 value */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            if (argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray()[0] \u003d\u003d (ZERO_AMOUNT)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_AMOUNT).get().toCharArray().length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                throw new ParseException(String.format(UpdateCommand.MESSAGE_AMOUNT_ZERO));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "            updateTransactionDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "            updateTransactionDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "            updateTransactionDescriptor.setDescription("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "                ParserUtil.parseDescription(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        parseCategoriesForEdit(argMultimap.getAllValues(PREFIX_CATEGORY))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .ifPresent(updateTransactionDescriptor::setCategories);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!updateTransactionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return new UpdateCommand(type, index, updateTransactionDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e} if {@code categories} is non-empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * If {@code categories} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * {@code Set\u003cCategory\u003e} containing zero categories."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Optional\u003cSet\u003cCategory\u003e\u003e parseCategoriesForEdit(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assert categories !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d categories.size() \u003d\u003d 1 \u0026\u0026 categories.contains(\"\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "            ? Collections.emptySet() : categories;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Optional.of(ParserUtil.parseCategories(tagSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 3,
      "joloong": 27,
      "Berttwm": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (trimmedArgs.toLowerCase().equals(\"transaction\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new ViewCommand(Tab.TRANSACTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (trimmedArgs.toLowerCase().equals(\"budget\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new ViewCommand(Tab.BUDGET);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (trimmedArgs.toLowerCase().equals(\"ledger\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return new ViewCommand(Tab.LEDGER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        } else if (trimmedArgs.toLowerCase().equals(\"projection\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return new ViewCommand(Tab.PROJECTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 37,
      "dingyuchen": 1,
      "wallacelim97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BankAccount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.OutTransaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.UniqueBudgetList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.UniqueTransactionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Bank account of the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class BankAccount implements ReadOnlyBankAccount {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private Amount balance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private UniqueBudgetList budgets;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private UniqueTransactionList transactions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public BankAccount() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        balance \u003d Amount.zero();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        budgets \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        transactions \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public BankAccount(ReadOnlyBankAccount bankAccount) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        resetData(bankAccount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Resets the existing data of this {@code BankAccount} with {@code newData}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void resetData(ReadOnlyBankAccount newData) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        setBalance(newData.getBalance());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        setTransactions(newData.getTransactionHistory());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        setBudgets(newData.getBudgetHistory());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setBalance(Amount balance) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.balance.setAmount(balance);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void setTransactions(List\u003cBankAccountOperation\u003e transactionHistory) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.transactions.setTransactions(transactionHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgetHistory) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.budgets.setBudgets(budgetHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Replaces the given transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * {@code target} must exist in the bank account."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * The transaction identity of {@code editedTransaction} must not be the same as"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * another existing transaction in the bank account."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void setTransaction(BankAccountOperation transactionTarget, BankAccountOperation transactionEdit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(transactionEdit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        transactions.setTransaction(transactionTarget, transactionEdit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Replaces the given budget {@code target} in the list with {@code editedBudget}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * {@code target} must exist in the bank account."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * The budget identity of {@code editedBudget} must not be the same as"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * another existing budget in the bank account."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public void setBudget(Budget budgetTarget, Budget budgetEdit) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        requireNonNull(budgetEdit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        budgets.setBudget(budgetTarget, budgetEdit);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Adds a transaction to the bank account."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Updates {@code balance} and {@code budgets} respectively."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param txn Transaction to be added to bank account."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void add(BankAccountOperation txn) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        transactions.add(txn);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        updateBudgets(txn);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        Amount newBalance \u003d txn.handleBalance(this.balance);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.balance \u003d newBalance;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Adds a transaction to the bank account."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Updates {@code budget}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * @param bud Budget to be added to bank account."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void add(Budget bud) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        budgets.add(bud);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Removes {@code key} from this {@code BankAccount}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * {@code key} must exist in the bank account."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void remove(BankAccountOperation key) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joloong"
        },
        "content": "        transactions.remove(key);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.balance \u003d this.balance.subtractAmount(key.getAmount());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Removes {@code key} from this {@code BankAccount}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * {@code key} must exist in the bank account."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void remove(Budget key) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        budgets.remove(key);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Checks if transaction exists in bank account."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param transaction Transaction to be checked."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return true if transaction is in bank account, else otherwise."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return transactions.contains(transaction);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Checks if budget exists in bank account."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean has(Budget budget) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return budgets.contains(budget);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Updates each budget in {@code budgets} when OutTransaction is made."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @payram txn Transaction can be either InTransaction or OutTransaction."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private void updateBudgets(BankAccountOperation txn) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (txn instanceof OutTransaction) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            Amount outAmount \u003d txn.getAmount();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            Set\u003cCategory\u003e outCategories \u003d txn.getCategories();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            for (Budget bd : budgets) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                Budget newBd \u003d bd.updateBudget(outAmount, outCategories);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                setBudget(bd, newBd);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ObservableList\u003cBankAccountOperation\u003e getTransactionHistory() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return transactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetHistory() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return budgets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public SortedList\u003cBankAccountOperation\u003e getSortedTransactionHistory(Comparator\u003cBankAccountOperation\u003e t) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return getTransactionHistory().sorted(t);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public Amount getBalance() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.balance;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!(other instanceof BankAccount)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccount otherBankAccount \u003d (BankAccount) other;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this.budgets.equals(otherBankAccount.budgets)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 this.balance.equals(otherBankAccount.balance)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 this.transactions.equals(otherBankAccount.transactions);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 58,
      "joloong": 59,
      "dingyuchen": 63,
      "wallacelim97": 5,
      "Berttwm": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Ledger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.UniqueLedgerOperationList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Separate field in BankAccount to store transactions related to split"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class Ledger implements ReadOnlyLedger {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Amount pot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private UniquePersonList people;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private UniqueLedgerOperationList ledgerHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Ledger() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        pot \u003d Amount.zero();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        people \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ledgerHistory \u003d new UniqueLedgerOperationList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Ledger(ReadOnlyLedger ledger) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(ledger);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        pot \u003d ledger.getBalance();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        setLedgerHistory(ledger);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        setPersonList(ledger);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private void setLedgerHistory(ReadOnlyLedger ledger) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(ledger.getLedgerHistory());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.ledgerHistory.setLedgerOperations(ledger.getLedgerHistory());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private void setPersonList(ReadOnlyLedger ledger) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(ledger.getPeople());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        people.setPersons(ledger.getPeople());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Adds transaction into a separate splitHistory"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param transaction"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void addOperation(LedgerOperation transaction) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        pot \u003d transaction.handleBalance(pot, people);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ledgerHistory.add(transaction);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ObservableList\u003cLedgerOperation\u003e getLedgerHistory() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return ledgerHistory.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ObservableList\u003cLedgerOperation\u003e getSortedLedgerHistory(Comparator\u003cLedgerOperation\u003e t) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return getLedgerHistory().sorted(t);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPeople() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return people.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Amount getBalance() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return pot;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Resets the existing data of this {@code Ledger} with {@code otherLedger}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void resetData(ReadOnlyLedger otherLedger) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(otherLedger);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "        pot \u003d otherLedger.getBalance();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "        setLedgerHistory(otherLedger);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "        setPersonList(otherLedger);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean has(LedgerOperation ledgerOperation) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return ledgerHistory.contains(ledgerOperation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!(other instanceof Ledger)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Ledger otherLedger \u003d (Ledger) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this.pot.equals(otherLedger.pot)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u0026\u0026 this.people.equals(otherLedger.people)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u0026\u0026 this.ledgerHistory.equals(otherLedger.ledgerHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 17,
      "dingyuchen": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Predicate\u003cBankAccountOperation\u003e PREDICATE_SHOW_ALL_TRANSACTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Predicate\u003cLedgerOperation\u003e PREDICATE_SHOW_ALL_LEDGER_OPERATIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns the user prefs\u0027 bank account file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    Path getUserStateFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Sets the user prefs\u0027 bank account file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    void setUserStateFilePath(Path bankAccountFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Replaces bank account data with the data in {@code bankAccount}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    void setUserState(ReadOnlyUserState bankAccount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns the BankAccount"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ReadOnlyBankAccount getBankAccount();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns true if the model has previous bank account states to restore."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    boolean canUndoUserState();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Restores the model\u0027s bank account to its previous state."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    void undoUserState();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns true if the model has undone bank account states to restore."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "    boolean canRedoUserState();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Restores the model\u0027s bank account to its previously undone state."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "    void redoUserState();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Saves the current bank account state for undo/redo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "    void commitUserState();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Replaces the existing transaction history in the bank account"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * with {@code transactionHistory}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param transactionHistory"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    void setTransactions(List\u003cBankAccountOperation\u003e transactionHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ReadOnlyUserState getUserState();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns true if a transaction with the same identity as {@code transaction} exists in the bank account."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param transaction"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    boolean has(BankAccountOperation transaction);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Returns true if a budget with the same identity as {@code budget} exists in the bank account."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * @param budget"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    boolean has(Budget budget);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns true if a ledgerOperation with the same identity as {@code ledgerOperation} exists in the ledger."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param ledgerOperation"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    boolean has(LedgerOperation ledgerOperation);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Deletes the given transaction."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * The transaction must exist in the bank account."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param transaction"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    void deleteTransaction(BankAccountOperation transaction);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Replaces the given transaction {@code target} with {@code editedTransaction}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * {@code target} must exist in the bank account."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * The transaction identity of {@code editedTransaction} must not be"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * the same as another existing transaction in the bank account."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    void setTransaction(BankAccountOperation transactionTarget, BankAccountOperation transactionEdit);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Replaces the given budget {@code budget} with {@code editedBudget}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * {@code target} must exist in the bank account."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * The budget identity of {@code editedBudget} must not be"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * the same as another existing budget in the bank account."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    void setBudget(Budget budgetTarget, Budget budgetEdit);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Adds the given transaction."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * {@code transaction} must not already exist in the bank account."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param operation"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    void add(BankAccountOperation operation);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Adds the given ledgerOperation."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * {@code ledgerOperation} must not already exist in the bank account."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    void add(LedgerOperation operation);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Adds the given budget."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * {@code budget} must not already exist in the bank account."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    void add(Budget budget);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns an unmodifiable view of the filtered transaction list"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joloong"
        },
        "content": "    ObservableList\u003cBankAccountOperation\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Updates the filter of the filtered transaction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cBankAccountOperation\u003e predicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    void updateFilteredLedgerList(Predicate\u003cLedgerOperation\u003e predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns an unmodifiable view of the filtered budget list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Deletes the given budget."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * The budget must exist in the bank account."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    void deleteBudget(Budget budgetToDelete);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ObservableList\u003cLedgerOperation\u003e getFilteredLedgerOperationsList();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 18,
      "joloong": 55,
      "dingyuchen": 41,
      "Berttwm": 3,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final VersionedUserState versionedUserState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final FilteredList\u003cBankAccountOperation\u003e filteredTransactions;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private final FilteredList\u003cBudget\u003e filteredBudgets;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final FilteredList\u003cLedgerOperation\u003e filteredLedgerOperations;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Initializes a ModelManager with the given bankAccount and userPrefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ModelManager(ReadOnlyUserState userState, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireAllNonNull(userState, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        logger.fine(\"Initializing with bank account\" + userState + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.versionedUserState \u003d new VersionedUserState(userState);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003c\u003e(this.versionedUserState.getBankAccount().getTransactionHistory());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        filteredBudgets \u003d new FilteredList\u003c\u003e(this.versionedUserState.getBankAccount().getBudgetHistory());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        filteredLedgerOperations \u003d new FilteredList\u003c\u003e(this.versionedUserState.getLedger().getLedgerHistory());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this(new UserState(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bank Account \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Path getUserStateFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return userPrefs.getUserStateFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setUserStateFilePath(Path userStateFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(userStateFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "        userPrefs.setUserStateFilePath(userStateFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void setUserState(ReadOnlyUserState userState) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(userState);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.versionedUserState.resetData(userState);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ReadOnlyBankAccount getBankAccount() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return versionedUserState.getBankAccount();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ReadOnlyUserState getUserState() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this.versionedUserState;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return versionedUserState.getBankAccount().has(transaction);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean has(Budget budget) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return versionedUserState.getBankAccount().has(budget);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean has(LedgerOperation ledgerOperation) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return versionedUserState.getLedger().has(ledgerOperation);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void deleteTransaction(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        versionedUserState.remove(transaction);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public void deleteBudget(Budget budget) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        versionedUserState.remove(budget);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void setTransaction(BankAccountOperation transactionTarget, BankAccountOperation transactionEdit) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireAllNonNull(transactionTarget, transactionEdit);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        versionedUserState.set(transactionTarget, transactionEdit);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public void setBudget(Budget budgetTarget, Budget budgetEdit) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        requireAllNonNull(budgetTarget, budgetEdit);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        versionedUserState.set(budgetTarget, budgetEdit);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void add(Budget budget) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        versionedUserState.add(budget);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void add(BankAccountOperation operation) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joloong"
        },
        "content": "        versionedUserState.add(operation);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void add(LedgerOperation operation) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joloong"
        },
        "content": "        versionedUserState.add(operation);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public ObservableList\u003cBankAccountOperation\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return filteredBudgets;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ObservableList\u003cLedgerOperation\u003e getFilteredLedgerOperationsList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return filteredLedgerOperations;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean canUndoUserState() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return versionedUserState.canUndo();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void undoUserState() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        versionedUserState.undo();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean canRedoUserState() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return versionedUserState.canRedo();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void redoUserState() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        versionedUserState.redo();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void commitUserState() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        versionedUserState.commit();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void setTransactions(List\u003cBankAccountOperation\u003e transactionHistory) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        versionedUserState.set(transactionHistory);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cBankAccountOperation\u003e predicate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joloong"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void updateFilteredLedgerList(Predicate\u003cLedgerOperation\u003e predicate) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        filteredLedgerOperations.setPredicate(predicate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return versionedUserState.equals(other.versionedUserState)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 filteredTransactions.equals(other.filteredTransactions)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 filteredBudgets.equals(other.filteredBudgets);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 15,
      "joloong": 51,
      "dingyuchen": 52,
      "Berttwm": 3,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Projection.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.logic.commands.ProjectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.util.GradientDescent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * Represents a projection of user\u0027s balance at a set date in the future\\"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class Projection {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private final ObservableList\u003cBankAccountOperation\u003e transactionHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private Amount projection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private Amount budgetProjection;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private GradientDescent projector;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public Projection(ObservableList\u003cBankAccountOperation\u003e transactionHistory, Date date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.transactionHistory \u003d transactionHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.project();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public Projection(ObservableList\u003cBankAccountOperation\u003e transactionHistory, Date date,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                      Budget budget) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.transactionHistory \u003d transactionHistory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.project();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Computes projection for specified date based on transactionHistory"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private void project() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        double [] balances \u003d extractBalances();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        double [] dates \u003d extractDates();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.projector \u003d new GradientDescent(balances, dates);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        int daysToProject \u003d Date.daysBetween(Date.now(), this.date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.projection \u003d new Amount((int) Math.round(projector.predict(daysToProject)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (this.budget !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            int daysToBudgetDeadline \u003d Date.daysBetween(Date.now(), this.budget.getDeadline());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            this.budgetProjection \u003d new Amount(this.budget.getBudget().getIntegerValue()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                    - (int) Math.round(projector.predict(daysToBudgetDeadline)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        displayAsStage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    GradientDescent getProjector() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.projector;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    Optional\u003cBudget\u003e getBudget() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return Optional.ofNullable(this.budget);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Populates an array with the number of days from each transaction till the date which this projection is"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * initialized"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double[] extractDates() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        double[] daysFromNow \u003d new double[this.transactionHistory.size()];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        for (int i \u003d 0; i \u003c daysFromNow.length; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            daysFromNow[i] \u003d Date.daysBetween(Date.now(), transactionHistory.get(i).getDate());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return daysFromNow;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.projection.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public String getBudgetForecastText() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (this.getBudget().isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.budgetProjection.getIntegerValue() \u003e 0"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                ? String.format(ProjectCommand.MESSAGE_BUDGET_SUCCESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                this.budget.toString(), this.budgetProjection.toString())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                : String.format(ProjectCommand.MESSAGE_BUDGET_CAUTION,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                this.budget.toString(), this.budgetProjection.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Populates an array with the cumulative balance values"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * at the point of each transaction in {@code transactionHistory}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double[] extractBalances() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        double[] balances \u003d new double[this.transactionHistory.size()];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        double cumulativeBalance \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        for (int i \u003d 0; i \u003c balances.length; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            cumulativeBalance +\u003d transactionHistory.get(i).getAmount().getIntegerValue();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            balances[i] \u003d cumulativeBalance;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return balances;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Renders a graphical representation of this {@code Projection} in a separate JavaFX stage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private void displayAsStage() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        Stage projectionWindow \u003d new Stage();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionWindow.setTitle(\"Projection Graph\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionWindow.getIcons().add(new Image(MainApp.class.getResourceAsStream(\"/images/PalPay_32_1.png\")));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        Scene scene \u003d new Scene(new ProjectionGraph(this), 800, 600);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionWindow.setScene(scene);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionWindow.show();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 2,
      "wallacelim97": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ProjectionGraph.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.scene.chart.ScatterChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.util.GradientDescent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * JavaFX class for rendering the projection line + scatter plot graph"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class ProjectionGraph extends StackPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private GradientDescent gradientDescent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private NumberAxis xAxis;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double xMax;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double xMin;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double xUnit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double xRange;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double yMax;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double yMin;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double yUnit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double yRange;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    ProjectionGraph(Projection projection) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.gradientDescent \u003d projection.getProjector();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.budget \u003d projection.getBudget().orElse(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        // define axes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.xAxis \u003d defineXAxis();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.yAxis \u003d defineYAxis();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        // draw charts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        drawTransactionScatterChart();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        drawProjectionLineChart();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (this.budget !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            drawBudgetLineChart();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Draws the projection line chart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private void drawProjectionLineChart() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        LineChart\u003cNumber, Number\u003e projectionLine \u003d createProjectionLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        XYChart.Series\u003cNumber, Number\u003e projectionSeries \u003d defineProjectionSeries();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionLine.getData().add(projectionSeries);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.getChildren().add(projectionLine);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Plots the transaction scatter chart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private void drawTransactionScatterChart() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        ScatterChart\u003cNumber, Number\u003e transactionPlot \u003d createTransactionPlot();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        XYChart.Series\u003cNumber, Number\u003e transactionSeries \u003d defineTransactionSeries();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        transactionPlot.getData().add(transactionSeries);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.getChildren().add(transactionPlot);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Draws the budget line chart"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private void drawBudgetLineChart() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        LineChart\u003cNumber, Number\u003e budgetLine \u003d createBudgetLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        XYChart.Series\u003cNumber, Number\u003e budgetSeries \u003d defineBudgetSeries();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgetLine.getData().add(budgetSeries);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.getChildren().add(budgetLine);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return a horizontal {@code LineChart} created based on the user\u0027s budget"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private LineChart\u003cNumber, Number\u003e createBudgetLine() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        final LineChart\u003cNumber, Number\u003e budgetLine \u003d new LineChart\u003c\u003e(this.xAxis, this.yAxis);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgetLine.setLegendVisible(false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgetLine.setCreateSymbols(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgetLine.setHorizontalGridLinesVisible(false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgetLine.setVerticalGridLinesVisible(false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgetLine.getXAxis().setVisible(false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgetLine.getYAxis().setVisible(false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgetLine.getStylesheets().addAll(getClass().getResource(\"/view/BudgetLineChart.css\").toExternalForm());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return budgetLine;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return a {@code ScatterChart} created based on the user\u0027s {@code transactionHistory}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private ScatterChart\u003cNumber, Number\u003e createTransactionPlot() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        final ScatterChart\u003cNumber, Number\u003e transactionPlot \u003d new ScatterChart\u003c\u003e(this.xAxis, this.yAxis);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        transactionPlot.setLegendVisible(false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return transactionPlot;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return a {@code LineChart} representing the best-fit projection line"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private LineChart\u003cNumber, Number\u003e createProjectionLine() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        final LineChart\u003cNumber, Number\u003e projectionLine \u003d new LineChart\u003c\u003e(this.xAxis, this.yAxis);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionLine.setLegendVisible(false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionLine.setCreateSymbols(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionLine.setHorizontalGridLinesVisible(false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionLine.setVerticalGridLinesVisible(false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionLine.getXAxis().setVisible(false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionLine.getYAxis().setVisible(false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionLine.setCreateSymbols(false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionLine.setTitle(String.format(\"Balance Projection over %.0f days\", this.xRange));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionLine.getStylesheets().addAll(getClass()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                .getResource(\"/view/ProjectionLineChart.css\").toExternalForm());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return projectionLine;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return an {@code XYChart.Series} denoting the two endpoints of the best-fit projection line"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private XYChart.Series\u003cNumber, Number\u003e defineProjectionSeries() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        XYChart.Series\u003cNumber, Number\u003e projectionSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionSeries.setName(\"Projection Line\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionSeries.getData().add(new XYChart.Data\u003c\u003e(gradientDescent.getVariable(), gradientDescent.getResult()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionSeries.getData().add("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                new XYChart.Data\u003c\u003e(gradientDescent.getMinData(), gradientDescent.getMinOutput()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return projectionSeries;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return an {@code XYChart.Series} representing various balance states through time"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private XYChart.Series\u003cNumber, Number\u003e defineTransactionSeries() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        XYChart.Series\u003cNumber, Number\u003e transactionSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        transactionSeries.setName(\"Actual Balance\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        IntStream.range(0, gradientDescent.getNumInputs()).forEach(x -\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                transactionSeries.getData().add(new XYChart.Data\u003c\u003e(gradientDescent.getInputData(x),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                        gradientDescent.getActualValue(x)))"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return transactionSeries;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return an {@code XYChart.Series} representing the user\u0027s budget"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private XYChart.Series\u003cNumber, Number\u003e defineBudgetSeries() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        XYChart.Series\u003cNumber, Number\u003e budgetSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgetSeries.setName(\"Budget Line\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgetSeries.getData().add(new XYChart.Data\u003c\u003e(this.xAxis.getLowerBound() - this.xUnit,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                this.budget.getBudget().getActualValue()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgetSeries.getData().add(new XYChart.Data\u003c\u003e(Date.daysBetween(Date.now(), this.budget.getDeadline()),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                budget.getBudget().getActualValue()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return budgetSeries;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Defines the x-axis of the {@code ProjectionGraph}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return the x-axis of the {@code ProjectionGraph}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private NumberAxis defineXAxis() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        final NumberAxis xAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        xAxis.setLabel(\"Days From Now\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        xAxis.setAutoRanging(false);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.xMin \u003d Math.min(gradientDescent.getVariable(), gradientDescent.getMinData());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.xMax \u003d Math.max(gradientDescent.getVariable(), gradientDescent.getMaxData());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.xRange \u003d xMax - xMin;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.xUnit \u003d Math.round(xRange / 10);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        xAxis.setTickUnit(xUnit);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        xAxis.setLowerBound((Math.floor(xMin / xUnit) - 1) * xUnit);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        xAxis.setUpperBound((Math.ceil(xMax / xUnit) + 1) * xUnit);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return xAxis;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Defines the y-axis of the {@code ProjectionGraph}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return the y-axis of the {@code ProjectionGraph}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private NumberAxis defineYAxis() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        yAxis.setLabel(\"Balance ($)\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        yAxis.setAutoRanging(false);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.yMin \u003d Math.min(gradientDescent.getResult(), gradientDescent.getMinOutput());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (this.budget !\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            this.yMin \u003d Math.min(yMin, this.budget.getBudget().getActualValue());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.yMax \u003d Math.max(gradientDescent.getResult(), gradientDescent.getMaxOutput());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (this.budget !\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            this.yMax \u003d Math.max(yMax, this.budget.getBudget().getActualValue());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.yRange \u003d yMax - yMin;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.yUnit \u003d Math.round(yRange / 10);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        yAxis.setTickUnit(yUnit);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        yAxis.setLowerBound((Math.floor(yMin / yUnit) - 1) * yUnit);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        yAxis.setUpperBound((Math.ceil(yMax / yUnit) + 1) * yUnit);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return yAxis;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBankAccount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Unmodifiable view of an bank account"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public interface ReadOnlyBankAccount {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns an unmodifiable view of the transaction list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * This list will not contain any duplicate transactions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ObservableList\u003cBankAccountOperation\u003e getTransactionHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns an unmodifiable view of the sorted transaction list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * This list will not contain any duplicate transactions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ObservableList\u003cBankAccountOperation\u003e getSortedTransactionHistory(Comparator\u003cBankAccountOperation\u003e t);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    Amount getBalance();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    boolean has(BankAccountOperation transaction);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    boolean has(Budget budget);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 3,
      "joloong": 10,
      "dingyuchen": 19,
      "wallacelim97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyLedger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Unmodifiable view of a ledger"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public interface ReadOnlyLedger {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns an unmodifiable view of the transaction list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * This list will not contain any duplicate transactions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ObservableList\u003cLedgerOperation\u003e getLedgerHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns an unmodifiable view of the sorted transaction list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * This list will not contain any duplicate transactions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ObservableList\u003cLedgerOperation\u003e getSortedLedgerHistory(Comparator\u003cLedgerOperation\u003e t);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ObservableList\u003cPerson\u003e getPeople();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Amount getBalance();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    boolean has(LedgerOperation ledgerOperation);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    Path getUserStateFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Unmodifiable view of an user state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public interface ReadOnlyUserState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ReadOnlyBankAccount getBankAccount();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    ReadOnlyLedger getLedger();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 3,
      "dingyuchen": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Path userStateFilePath \u003d Paths.get(\"data\", \"bankaccount.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.s"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        setUserStateFilePath(newUserPrefs.getUserStateFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Path getUserStateFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return userStateFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setUserStateFilePath(Path userStateFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(userStateFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.userStateFilePath \u003d userStateFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 userStateFilePath.equals(o.userStateFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Objects.hash(guiSettings, userStateFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + userStateFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 12,
      "wallacelim97": 1,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": " * User state of the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class UserState implements ReadOnlyUserState {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private BankAccount bankAccount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Ledger ledger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public UserState() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        bankAccount \u003d new BankAccount();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ledger \u003d new Ledger();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public UserState(ReadOnlyBankAccount bankAccount, ReadOnlyLedger ledger) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        resetData(bankAccount, ledger);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public UserState(ReadOnlyUserState initialState) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        resetData(initialState.getBankAccount(), initialState.getLedger());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private void resetData(ReadOnlyBankAccount bankAccount, ReadOnlyLedger ledger) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireAllNonNull(bankAccount, ledger);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.bankAccount.resetData(bankAccount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.ledger.resetData(ledger);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Resets the existing data of this {@code UserState} with {@code userState}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void resetData(ReadOnlyUserState userState) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(userState);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        resetData(userState.getBankAccount(), userState.getLedger());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ReadOnlyBankAccount getBankAccount() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return bankAccount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ReadOnlyLedger getLedger() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return ledger;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void remove(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        bankAccount.remove(transaction);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void remove(Budget budget) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        bankAccount.remove(budget);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void set(BankAccountOperation transactionTarget, BankAccountOperation transactionEdit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        bankAccount.setTransaction(transactionTarget, transactionEdit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void set(Budget budgetTarget, Budget budgetEdit) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        bankAccount.setBudget(budgetTarget, budgetEdit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void set(List\u003cBankAccountOperation\u003e transactionHistory) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        bankAccount.setTransactions(transactionHistory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void add(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        bankAccount.add(transaction);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void add(LedgerOperation operation) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ledger.addOperation(operation);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void add(Budget budget) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        bankAccount.add(budget);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean has(BankAccountOperation txn) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return bankAccount.has(txn);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean has(Budget budget) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return bankAccount.has(budget);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean has(LedgerOperation ledgerOperation) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return ledger.has(ledgerOperation);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!(other instanceof UserState)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UserState otherUserState \u003d (UserState) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this.ledger.equals(otherUserState.ledger)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u0026\u0026 this.bankAccount.equals(otherUserState.bankAccount);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 19,
      "dingyuchen": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedUserState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " * {@code UserState} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class VersionedUserState extends UserState {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final List\u003cReadOnlyUserState\u003e userStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public VersionedUserState(ReadOnlyUserState initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        userStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        userStateList.add(new UserState(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Saves a copy of the current {@code UserState} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        userStateList.add(new UserState(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        userStateList.subList(currentStatePointer + 1, userStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Restores the user state to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        resetData(userStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Restores the user state to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        resetData(userStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns true if {@code undo()} has user state states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns true if {@code redo()} has user state states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return currentStatePointer \u003c userStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!(other instanceof VersionedUserState)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        VersionedUserState otherVersionedUserState \u003d (VersionedUserState) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return super.equals(otherVersionedUserState)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedUserState.currentStatePointer"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 userStateList.equals(otherVersionedUserState.userStateList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "            super(\"Current state pointer at start of bankAccountState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "            super(\"Current state pointer at end of bankAccountState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 94,
      "dingyuchen": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/category/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Represents a Category in the bank account."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidCategoryName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Categories names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public final String categoryName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param categoryName A valid category name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Category(String categoryName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(categoryName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        checkArgument(isValidCategoryName(categoryName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this.categoryName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns true if a given string is a valid category name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static boolean isValidCategoryName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 categoryName.equals(((Category) other).categoryName)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return \u0027[\u0027 + categoryName + \u0027]\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Split;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final Optional\u003cPhone\u003e phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final Optional\u003cEmail\u003e email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final Optional\u003cAddress\u003e address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Amount balance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Only name must be non-null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cCategory\u003e categories, Amount amount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireAllNonNull(name, phone, email, address, categories, amount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.phone \u003d Optional.of(phone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.email \u003d Optional.of(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.address \u003d Optional.of(address);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.categories.addAll(categories);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.balance \u003d amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this(name, phone, email, address, categories, Amount.zero());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Person(Name name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.phone \u003d Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.email \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.address \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.balance \u003d Amount.zero();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return phone.orElse(new Phone(\"65166666\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return email.orElse(new Email(\"empty@emptyemail.com\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return address.orElse(new Address(\"empty\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Amount getBalance() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return balance;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns an immutable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Collections.unmodifiableSet(categories);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param amount amount of money spent in {@link Split}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void spend(Amount amount) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        balance \u003d balance.subtractAmount(amount);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void receive(Amount amount) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        balance \u003d balance.addAmount(amount);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 otherPerson.getCategories().equals(getCategories());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Objects.hash(name, phone, email, address, categories);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .append(\" Balance: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .append(getBalance())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .append(\" Categories: \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joloong"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 11,
      "dingyuchen": 43,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return Optional of Person p"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Optional\u003cPerson\u003e get(Person p) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(p);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return internalList.stream().filter(person -\u003e person.equals(p)).findFirst();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns number of people in the list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 16,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Amount in terms of cents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Amount implements Comparable\u003cAmount\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final int UNSIGNED_INT_LIMIT \u003d 100000000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"Amounts should only be in integer or double, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String DOUBLE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"Amount should have maximum 2 decimal places\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String INT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        \"Amount should not exceed $\" + UNSIGNED_INT_LIMIT / 100 + \".\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String SHARE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        \"Shares cannot be negative\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final DecimalFormat AMOUNT_DOUBLE_FORMAT \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private int amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Amount(double amount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        checkArgument(isValidAmount(amount), DOUBLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        int cents \u003d (int) Math.round(amount * 100);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        checkArgument(isWithinLimits(cents), INT_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.amount \u003d cents;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Creates Amount object of {@code amount} cents"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param amount amount in cents"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Amount(int amount) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        checkArgument(isWithinLimits(amount), INT_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns true if a given value has maximally 2 decimal points."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static boolean isValidAmount(double amount) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        // String amountStr \u003d \"\" + amount;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        // int indexOfPeriod \u003d amountStr.lastIndexOf(\".\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        // return indexOfPeriod \u003d\u003d -1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        //     || amountStr.substring(indexOfPeriod + 1).length() \u003c\u003d 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return Math.abs(amount * 100 - Math.round(amount * 100)) \u003c 2 * 1.13E-13;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static double format(double value) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return Double.valueOf(AMOUNT_DOUBLE_FORMAT.format(value));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Checks if absolute value of {@code amount} is less than {@code MAX_AMOUNT}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static boolean isWithinLimits(int cents) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return cents \u003e\u003d -UNSIGNED_INT_LIMIT \u0026\u0026 cents \u003c\u003d UNSIGNED_INT_LIMIT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns amount in cents."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public int getIntegerValue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Returns amount in dollars"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double getActualValue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.amount / 100.0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Sets amount in cents."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.amount \u003d amount.amount;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Adds this.amount by amount."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param amount Amount to be added."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return New amount after addition."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Amount addAmount(Amount amount) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        final int newAmount \u003d this.amount + amount.amount;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return new Amount(newAmount);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Subtracts this.amount by amount."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param amount Amount to be subtracted."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return New amount after subtraction."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Amount subtractAmount(Amount amount) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        final int newAmount \u003d this.amount - amount.amount;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return new Amount(newAmount);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Multiplies amount by some fraction."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param portion Fraction of Amount."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Amount byShare(double portion) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        checkArgument(portion \u003e\u003d 0, SHARE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        double newAmount \u003d this.amount * portion;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return new Amount((int) newAmount);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Make amount negative."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * @return negative amount"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public Amount makeNegative() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (amount \u003c 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new Amount(this.amount);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        final int newAmount \u003d this.amount * -1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return new Amount(newAmount);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public boolean isNegative() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return this.amount \u003c 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Create new Amount of 0"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return Amount of 0"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static Amount zero() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return new Amount(0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static Amount of(int i) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return new Amount(i * 100);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return String.format(\"%.2f\", amount / 100.0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this \u003d\u003d obj"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joloong"
        },
        "content": "            || (obj instanceof Amount"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 amount \u003d\u003d ((Amount) obj).amount);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public int compareTo(Amount amount) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (this.amount \u003d\u003d amount.amount) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (this.amount \u003e amount.amount) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 37,
      "joloong": 67,
      "dingyuchen": 46,
      "wallacelim97": 17,
      "Berttwm": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/BankAccountOperation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Interface to differentiate between operations on BankAccount and Ledger"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public interface BankAccountOperation {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    Description getDescription();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Amount handleBalance(Amount balance);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Amount getAmount();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    Set\u003cCategory\u003e getCategories();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    boolean isSameTransaction(BankAccountOperation transaction);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Date getDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 2,
      "dingyuchen": 19,
      "Berttwm": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Handles Budget of a BankAccount."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private Date deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private boolean valid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private int between;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Budget() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.valid \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Constructor for Budget with no categories given."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * By default, category is \"general\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Budget(Amount amount, Date date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.deadline \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.categories.add(new Category(\"general\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.valid \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.between \u003d calculateRemaining();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Budget(Amount amount, Date date, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.deadline \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.categories.addAll(categories);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.valid \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.between \u003d calculateRemaining();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Budget(Amount amount, int duration) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.deadline \u003d calculateDeadline(duration);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.valid \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.between \u003d calculateRemaining();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Amount getBudget() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Date getDeadline() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Collections.unmodifiableSet(categories);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public String getBetween() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return String.format(\"%d more days\", this.between);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return this.valid;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Updates the amount of this budget given a new amount if the Transaction is of the same category."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * @param amount"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Budget updateBudget(Amount amount, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        boolean isSameCategory \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        for (Category ct : categories) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            if (this.categories.contains(ct)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                isSameCategory \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (isSameCategory) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            Amount newBudget \u003d this.amount.addAmount(amount);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            this.amount \u003d newBudget;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private void updateDeadline(Date date) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.deadline \u003d date;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Calculates the new Date given the amount of duration from Today."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * @return Date after {@code duration} days from today"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private Date calculateDeadline(int duration) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        LocalDate newDeadline \u003d today.plus(duration, DAYS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return new Date(newDeadline.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Calculates the number of days between budget\u0027s deadline and Today."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * @return int number of days between budget deadline and today"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public int calculateRemaining() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return Date.daysBetween(Date.TODAY, deadline);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Checks if the given budget is the same Budget object as this budget."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * @param otherBudget"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public boolean isSameBudget(Budget otherBudget) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (otherBudget \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return otherBudget !\u003d null"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            \u0026\u0026 otherBudget.getBudget().equals(getBudget())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            \u0026\u0026 otherBudget.getCategories().equals(getCategories())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            \u0026\u0026 otherBudget.getDeadline().equals(getDeadline());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        } else if (obj instanceof Budget) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            Budget inObj \u003d (Budget) obj;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return amount.equals(inObj.amount)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 deadline.equals(inObj.deadline)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                \u0026\u0026 categories.equals(inObj.categories)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 valid \u003d\u003d inObj.valid;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return String.format(\"$%s by %s\", this.amount.toString(), this.deadline.toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 146,
      "joloong": 14,
      "Berttwm": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " * represents the description of a transaction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        \"Descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    private final String fullDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * @param fullDescription A valid description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public Description(String fullDescription) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireNonNull(fullDescription);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        checkArgument(isValidDescription(fullDescription), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this.fullDescription \u003d fullDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "            || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 fullDescription.equals(((Description) other).fullDescription)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return fullDescription.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return fullDescription;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 16,
      "Berttwm": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/InTransaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Handles in transactions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class InTransaction extends Transaction implements BankAccountOperation {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public InTransaction(Amount amount, Date date, Description description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(amount, date, description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public InTransaction(Amount amount, Date date, Description description, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(amount, date, description, categories);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public InTransaction(Amount amount, Date date, Description description,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                         Set\u003cCategory\u003e categories, Person personInvolved) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(amount, date, description, categories, personInvolved);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Amount handleBalance(Amount balance) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        Amount newBalance \u003d balance.addAmount(super.amount);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return newBalance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (obj instanceof InTransaction) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "            InTransaction inObj \u003d (InTransaction) obj;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return super.amount.equals(inObj.amount)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 super.date.equals(inObj.date)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "                // \u0026\u0026 super.peopleInvolved.equals(inObj.peopleInvolved) // TODO: CONFIRM?"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 super.description.equals(inObj.description)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 super.categories.equals(inObj.categories);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return String.format(\"In transaction of %s\", super.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 9,
      "joloong": 27,
      "dingyuchen": 9,
      "Berttwm": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/LedgerOperation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Interface for operations on Ledger"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public interface LedgerOperation {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Amount handleBalance(Amount balance, UniquePersonList peopleInLedger);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    boolean isSameLedgerOperation(LedgerOperation ledgerOperation);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Date getDate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Amount getAmount();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    UniquePersonList getPeopleInvolved();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Description getDescription();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Optional\u003cList\u003cInteger\u003e\u003e getShares();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 4,
      "dingyuchen": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/LendMoney.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Payment concrete class from bankAccount to a Person"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class LendMoney extends Payment {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public LendMoney(Person person, Amount amount, Date date, Description description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(person, amount, date, description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public LendMoney(Person person, Amount amount, Description description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(person, amount, description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Amount handleBalance(Amount balance, UniquePersonList peopleInLedger) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Person target \u003d super.handleTarget(peopleInLedger);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        target.receive(amount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return balance.subtractAmount(amount);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean isSameLedgerOperation(LedgerOperation ledgerOperation) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this.equals(ledgerOperation);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Optional\u003cList\u003cInteger\u003e\u003e getShares() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        } else if (obj instanceof LendMoney) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            LendMoney payment \u003d (LendMoney) obj;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return this.amount.equals(payment.amount)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                \u0026\u0026 this.date.equals(payment.date)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                \u0026\u0026 this.person.equals(payment.person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 7,
      "dingyuchen": 42,
      "Berttwm": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/OutTransaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Handles out transactions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class OutTransaction extends Transaction implements BankAccountOperation {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public OutTransaction(Amount amount, Date date, Description description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(amount.makeNegative(), date, description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public OutTransaction(Amount amount, Date date, Description description, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(amount.makeNegative(), date, description, categories);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public OutTransaction(Amount amount, Date date, Description description,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                          Set\u003cCategory\u003e categories, Person personInvolved) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(amount.makeNegative(), date, description, categories, personInvolved);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Amount handleBalance(Amount balance) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Amount newBalance \u003d balance.addAmount(super.amount);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return newBalance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (obj instanceof OutTransaction) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "            OutTransaction inObj \u003d (OutTransaction) obj;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return super.amount.equals(inObj.amount)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 super.date.equals(inObj.date)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "                // \u0026\u0026 super.peopleInvolved.equals(inObj.peopleInvolved) // TODO"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 super.description.equals(inObj.description)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 super.categories.equals(inObj.categories);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return String.format(\"Out transaction of %s\", super.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 7,
      "joloong": 20,
      "dingyuchen": 10,
      "Berttwm": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Payment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Abstracted class to encourage code reuse in concrete classes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * {@see LendMoney}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * {@see ReceiveMoney}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public abstract class Payment extends Transaction implements LedgerOperation {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    protected final Person person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public Payment(Person person, Amount amount, Date date, Description description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(amount, date, description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public Payment(Person person, Amount amount, Description description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this(person, amount, Date.now(), description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Adds target into UniquePersonList if not already there"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param peopleInLedger list of People in the Ledger"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return reference to said Person"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    protected Person handleTarget(UniquePersonList peopleInLedger) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Person personInvolved \u003d person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (peopleInLedger.contains(person)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            personInvolved \u003d peopleInLedger.get(person).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            peopleInLedger.add(person);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return personInvolved;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public UniquePersonList getPeopleInvolved() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UniquePersonList list \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        list.add(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 47,
      "Berttwm": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/ReceiveMoney.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Concrete class to encapsulate payments from other People to self"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class ReceiveMoney extends Payment {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public ReceiveMoney(Person person, Amount amount, Date date, Description description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(person, amount, date, description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public ReceiveMoney(Person person, Amount amount, Description description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(person, amount, description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Amount handleBalance(Amount balance, UniquePersonList peopleInLedger) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Person target \u003d super.handleTarget(peopleInLedger);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        target.spend(amount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return balance.addAmount(amount);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean isSameLedgerOperation(LedgerOperation ledgerOperation) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this.equals(ledgerOperation);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Optional\u003cList\u003cInteger\u003e\u003e getShares() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        } else if (obj instanceof ReceiveMoney) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            ReceiveMoney payment \u003d (ReceiveMoney) obj;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return this.amount.equals(payment.amount)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                \u0026\u0026 this.date.equals(payment.date)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                \u0026\u0026 this.person.equals(payment.person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 7,
      "dingyuchen": 41,
      "Berttwm": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Split.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Split consists of Amount amount, Date date, {@code List\u003cAmount\u003e splitAmount}, and peopleInvolved"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class Split extends Transaction implements UndoableAction, LedgerOperation {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String SHARE_CONSTRAINTS \u003d \"number of shares must be one more than people involved\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final List\u003cInteger\u003e shares;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final List\u003cAmount\u003e splitAmounts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final UniquePersonList peopleInvolved;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public Split(Amount amount, Date date, Description description, List\u003cInteger\u003e shares, UniquePersonList people) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        super(amount, date, description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireAllNonNull(amount, date, shares, people);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        checkArgument(isValidSharesLength(shares, people), SHARE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.peopleInvolved \u003d people;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.shares \u003d shares;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        int denominator \u003d shares.stream().mapToInt(i -\u003e i).sum();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        List\u003cAmount\u003e amounts \u003d shares.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .map(share -\u003e amount.byShare((double) share / denominator))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        amounts.remove(0); // share to user no longer useful"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        splitAmounts \u003d rebalanceAmounts(amount, amounts);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static boolean isValidSharesLength(List\u003cInteger\u003e shares, UniquePersonList people) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return shares.size() \u003d\u003d people.size() + 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Adds missing amount to the first Amount in List due to rounding errors in division"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param amount  Amount that list to sum to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param amounts List of Amounts"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return List of Amounts that sum to amount"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private List\u003cAmount\u003e rebalanceAmounts(Amount amount, List\u003cAmount\u003e amounts) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Amount total \u003d amounts.stream().reduce(new Amount(0), (amount1, amount2) -\u003e amount1.addAmount(amount2));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!total.equals(amount)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            Amount difference \u003d amount.subtractAmount(total);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            amounts.set(0, amounts.get(0).addAmount(difference));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return amounts;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Modifies balance of each Person involved in Split. Person is added"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * into Ledger\u0027s personList if not already inside."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param balance        initial balance in the Ledger"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param peopleInLedger UniqueList of people involved in the Split"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return updated balance after splitting"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Amount handleBalance(Amount balance, UniquePersonList peopleInLedger) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Iterator\u003cPerson\u003e personInvolvedIterator \u003d peopleInvolved.iterator();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Iterator\u003cAmount\u003e amountIterator \u003d splitAmounts.iterator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Amount newBalance \u003d balance;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        while (personInvolvedIterator.hasNext()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            Amount expenditure \u003d amountIterator.next();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            Person person \u003d personInvolvedIterator.next();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            LendMoney transaction \u003d new LendMoney(person, expenditure, this.description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            newBalance \u003d transaction.handleBalance(newBalance, peopleInLedger);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return newBalance;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean isSameLedgerOperation(LedgerOperation ledgerOperation) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return equals(ledgerOperation);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        } else if (obj instanceof Split) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            Split splitObj \u003d (Split) obj;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return this.amount.equals(splitObj.amount)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                \u0026\u0026 this.date.equals(splitObj.date)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                \u0026\u0026 peopleInvolved.equals(splitObj.peopleInvolved)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                \u0026\u0026 splitAmounts \u003d\u003d splitObj.splitAmounts;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public UniquePersonList getPeopleInvolved() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return peopleInvolved;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Optional\u003cList\u003cInteger\u003e\u003e getShares() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return Optional.of(shares);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 3,
      "joloong": 14,
      "dingyuchen": 93,
      "Berttwm": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " * API of Transaction."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public abstract class Transaction implements UndoableAction {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected Amount amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    protected Description description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected Person peopleInvolved;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public Transaction(Amount amount, Date date, Description description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public Transaction(Amount amount, Date date, Description description, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this(amount, date, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.categories.addAll(categories);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public Transaction(Amount amount, Date date, Description description, Person personInvolved) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this(amount, date, description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.peopleInvolved \u003d personInvolved;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public Transaction(Amount amount, Date date, Description description,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                       Set\u003cCategory\u003e categories, Person personInvolved) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this(amount, date, description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.categories.addAll(categories);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.peopleInvolved \u003d personInvolved;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns an immutable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Collections.unmodifiableSet(categories);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean isSameTransaction(BankAccountOperation otherTransaction) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (otherTransaction \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return otherTransaction !\u003d null"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 otherTransaction.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 otherTransaction.getDate().equals(getDate())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 otherTransaction.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public abstract boolean equals(Object obj);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return String.format(\"%s $%s on %s\", this.description.toString(), this.amount.toString(), this.date.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 8,
      "joloong": 55,
      "dingyuchen": 15,
      "Berttwm": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/TransactionContainsCategoriesPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Category} matches the {@code Category} given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class TransactionContainsCategoriesPredicate implements Predicate\u003cBankAccountOperation\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final List\u003cCategory\u003e keyCategories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public TransactionContainsCategoriesPredicate(List\u003cString\u003e keyCategories) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.keyCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        keyCategories.forEach(category -\u003e this.keyCategories.add(new Category(category)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean test(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return keyCategories.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .anyMatch(keyCategory -\u003e isCategoryInsideCategories(transaction, keyCategory));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Checks if a {@code Category} exists in {@code Transaction}\u0027s set of {@code Category}s."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param transaction {@code Transaction} to be checked."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param keyCategory Category to be found in {@code Transaction}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private boolean isCategoryInsideCategories(BankAccountOperation transaction, Category keyCategory) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return transaction"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .getCategories()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .anyMatch(category -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "                StringUtil.containsWordIgnoreCase(category.getCategoryName(), keyCategory.getCategoryName()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "            || (other instanceof TransactionContainsCategoriesPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u0026\u0026 keyCategories.equals(((TransactionContainsCategoriesPredicate) other).keyCategories)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/UndoableAction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Abstraction of different user actions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public interface UndoableAction {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Amount getAmount();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Date getDate();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/UniqueBudgetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.exceptions.BudgetNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateBudgetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * A list of budgets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * A budget is considered unique by comparing using {@code Budget#isSameBudget(Budget)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * As such, adding and updating of budgets uses Budget#isSameBudget(Budget) for equality so as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * to ensure that the transaction being added or updated is unique in terms of identity in the UniqueBudgetList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * However, the removal of a Budget uses Budget#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * as to ensure that the budget with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * @see Budget#isSameBudget(Budget)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class UniqueBudgetList implements Iterable\u003cBudget\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Returns true if the list contains an equivalent transaction as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public boolean contains(Budget toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Adds a budget to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * The budget must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public void add(Budget toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Replaces the budget {@code target} in the list with {@code editedBudget}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * The budget identity of {@code editedBudget} must not be the same as"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * another existing budget in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public void setBudget(Budget target, Budget editedTransaction) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (!target.equals(editedTransaction) \u0026\u0026 contains(editedTransaction)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        internalList.set(index, editedTransaction);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Removes the equivalent transaction from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * The transaction must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public void remove(Budget toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Replaces the contents of this list with {@code budgets}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * {@code budgets} must not contain duplicate budgets."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (!budgetsAreUnique(budgets)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        internalList.setAll(budgets);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public ObservableList\u003cBudget\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Iterator\u003cBudget\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                || (other instanceof UniqueBudgetList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueBudgetList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Returns true if {@code budgets} contains only unique budgets."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private boolean budgetsAreUnique(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        for (int i \u003d 0; i \u003c budgets.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            for (int j \u003d i + 1; j \u003c budgets.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                if (budgets.get(i).equals(budgets.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/UniqueLedgerOperationList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateTransactionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": " * A list of ledger operations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": " * A ledger operation is considered unique by comparing using"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": " * {@code LedgerOperation#isSameLedgerOperation(LedgerOperation)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": " * As such, adding and updating of ledger operations uses LedgerOperation#isSameLedgerOperation(LedgerOperation)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": " * for equality so as to ensure that the ledger operation being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": " * UniqueLedgerOperationList. However, the removal of a LedgerOperation uses LedgerOperation#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": " * as to ensure that the ledger operation with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @see LedgerOperation#isSameLedgerOperation(LedgerOperation)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class UniqueLedgerOperationList implements Iterable\u003cLedgerOperation\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final ObservableList\u003cLedgerOperation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final ObservableList\u003cLedgerOperation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns true if the list contains an equivalent ledger operations as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean contains(LedgerOperation toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Adds a ledger operation to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * The ledger operation must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void add(LedgerOperation toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Replaces the ledger operation {@code ledgerOperationTarget} in the list with {@code ledgerOperationEdit}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * {@code ledgerOperationTarget} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * The ledger operation identity of {@code ledgerOperationEdit} must not be the same as"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * another existing ledger operation in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setTransaction(LedgerOperation ledgerOperationTarget, LedgerOperation ledgerOperationEdit) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireAllNonNull(ledgerOperationTarget, ledgerOperationEdit);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        int index \u003d internalList.indexOf(ledgerOperationTarget);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!ledgerOperationTarget.equals(ledgerOperationEdit) \u0026\u0026 contains(ledgerOperationEdit)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "        internalList.set(index, ledgerOperationEdit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Removes the equivalent ledger operation from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * The ledger operation must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void remove(LedgerOperation toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Replaces the contents of this list with {@code ledgerOperations}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * {@code internalList} must not contain duplicate ledgerOperations."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setLedgerOperations(List\u003cLedgerOperation\u003e ledgerOperations) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireAllNonNull(ledgerOperations);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!ledgerOperationsAreUnique(ledgerOperations)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "        internalList.setAll(ledgerOperations);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setLedgerOperations(UniqueLedgerOperationList ledgerOperations) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "        setLedgerOperations(ledgerOperations.internalList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ObservableList\u003cLedgerOperation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Iterator\u003cLedgerOperation\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            || (other instanceof UniqueLedgerOperationList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueLedgerOperationList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns true if {@code ledgerOperations} contains only unique ledgerOperations."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private boolean ledgerOperationsAreUnique(List\u003cLedgerOperation\u003e ledgerOperations) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (int i \u003d 0; i \u003c ledgerOperations.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joloong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ledgerOperations.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joloong"
        },
        "content": "                if (ledgerOperations.get(i).equals(ledgerOperations.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 41,
      "dingyuchen": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/UniqueTransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateTransactionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * A list of transactions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * A transaction is considered unique by comparing using {@code Transaction#isSameTransaction(Transaction)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * As such, adding and updating of transactions uses Transaction#isSameTransaction(Transaction) for equality so as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * to ensure that the transaction being added or updated is unique in terms of identity in the UniqueTransactionList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * However, the removal of a Transaction uses Transaction#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * as to ensure that the transaction with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * @see Transaction#isSameTransaction(BankAccountOperation)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class UniqueTransactionList implements Iterable\u003cBankAccountOperation\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final ObservableList\u003cBankAccountOperation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final ObservableList\u003cBankAccountOperation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Returns true if the list contains an equivalent transaction as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean contains(BankAccountOperation toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Adds a transaction to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * The transaction must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void add(BankAccountOperation toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Replaces the transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * The transaction identity of {@code editedTransaction} must not be the same as"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * another existing transaction in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void setTransaction(BankAccountOperation transactionTarget, BankAccountOperation transactionEdit) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        requireAllNonNull(transactionTarget, transactionEdit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        int index \u003d internalList.indexOf(transactionTarget);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (!transactionTarget.equals(transactionEdit) \u0026\u0026 contains(transactionEdit)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        internalList.set(index, transactionEdit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Removes the equivalent transaction from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * The transaction must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void remove(BankAccountOperation toRemove) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Replaces the contents of this list with {@code transactions}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * {@code transaction} must not contain duplicate transactions."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void setTransactions(List\u003cBankAccountOperation\u003e transactions) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        requireAllNonNull(transactions);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!transactionsAreUnique(transactions)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        internalList.setAll(transactions);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void setTransactions(UniqueTransactionList transactions) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        setTransactions(transactions.internalList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public ObservableList\u003cBankAccountOperation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Iterator\u003cBankAccountOperation\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            || (other instanceof UniqueTransactionList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueTransactionList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Returns true if {@code transactions} contains only unique transactions."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private boolean transactionsAreUnique(List\u003cBankAccountOperation\u003e transactions) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            for (int j \u003d i + 1; j \u003c transactions.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                if (transactions.get(i).equals(transactions.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return internalList.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 18,
      "joloong": 17,
      "dingyuchen": 101,
      "Berttwm": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/BudgetNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Signals that the operation is unable to find the specified Budget"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class BudgetNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/DuplicateBudgetException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Signals that the operation will result in duplicate Budgets (Budgets are considered duplicate if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * details)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class DuplicateBudgetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public DuplicateBudgetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        super(\"Operation would result in duplicate budgets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/DuplicateTransactionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Signals that the operation will result in duplicate Transactions (Transactions are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": " * duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class DuplicateTransactionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public DuplicateTransactionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "        super(\"Operation would result in duplicate transactions.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/TransactionNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Signals that the operation is unable to find the specified transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class TransactionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * Represents a date within PalPay."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * Guarantees:  immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Date implements Comparable\u003cDate\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_FORMAT_CONSTRAINTS \u003d \"Invalid date format.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "            + \"Date objects must adhere to the format: DDMMYYYY\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_DATE_INVALID \u003d \"Invalid date.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            + \"%s is not a valid date in the (Gregorian) calendar\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"\\\\b\\\\d{8}\\\\b\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"ddMMyyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final Date TODAY \u003d now();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public Date(String value) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        checkArgument(isValid(value), MESSAGE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        checkArgument(isValidDate(value), String.format(MESSAGE_DATE_INVALID, value));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.date \u003d LocalDate.parse(value, DATE_FORMATTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return isValidFormat(test) \u0026\u0026 isValidDate(test);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static boolean isValidFormat(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return test.matches(DATE_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @param test A String representation of a date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return Whether {@code test} represents a valid date in the Gregorian calendar"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        int day \u003d Integer.parseInt(test.substring(0, 2));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        int month \u003d Integer.parseInt(test.substring(2, 4));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        int year \u003d Integer.parseInt(test.substring(4));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        boolean isLeapYear \u003d Year.isLeap(year);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return ChronoField.DAY_OF_MONTH.range().isValidIntValue(day) \u0026\u0026 // Checks if day is potentially valid"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                ChronoField.MONTH_OF_YEAR.range().isValidIntValue(month) \u0026\u0026 // Checks if month is valid"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                ChronoField.YEAR.range().isValidIntValue(year) \u0026\u0026 // Checks if year is valid"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                day \u003c\u003d Month.of(month).length(isLeapYear); // Checks if day is valid with relation to year and month"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.date.format(DATE_FORMATTER).hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.date.format(DATE_FORMATTER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * TODO: remove and refactor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public LocalDate toLocalDate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public int compareTo(Date date) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this.date.compareTo(date.date);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Get today\u0027s date"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return Date object of today\u0027s date"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static Date now() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        String today \u003d DATE_FORMATTER.format(LocalDate.now());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return new Date(today);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static int daysBetween(Date x, Date y) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return (int) DAYS.between(x.toLocalDate(), y.toLocalDate());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public boolean isPast() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return daysBetween(TODAY, this) \u003c 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 6,
      "joloong": 14,
      "dingyuchen": 10,
      "wallacelim97": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/GradientDescent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.stream.DoubleStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import org.apache.commons.math3.exception.MathArithmeticException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * A utility class for performing gradient descent for linear regression"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public final class GradientDescent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private static final double LEARNING_RATE \u003d 0.001;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private static final double TOLERANCE \u003d 1E-11;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private static final int MAX_ITERATIONS \u003d 100000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private static final int OUTPUT_SCALE_FACTOR \u003d 100;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double variable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double result;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private final int numInputs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double [] inputData;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double [] actualValues;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double theta0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double theta1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double minData;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double maxData;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double dataMean;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double dataRange;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double minOutput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double maxOutput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double outputMean;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double outputRange;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private int iterations;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Sole constructor for the Gradient Descent class"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @param actualValues the actual values of the target variable (which is to be predicted by the model)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @param inputData the values of input variables (which will be used to predict the target variable)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public GradientDescent(double[] actualValues, double[] inputData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        requireNonNull(actualValues);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        requireNonNull(inputData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.inputData \u003d inputData;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.numInputs \u003d this.inputData.length;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.theta0 \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.theta1 \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.actualValues \u003d actualValues;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.iterations \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.scaleData();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.train();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Normalise features in data set to optimise gradient descent"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private void scaleData() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.dataMean \u003d DoubleStream.of(inputData).sum() / numInputs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.minData \u003d DoubleStream.of(inputData).min().orElseThrow(MathArithmeticException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.maxData \u003d DoubleStream.of(inputData).max().orElseThrow(MathArithmeticException::new);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.dataRange \u003d maxData - minData;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        IntStream.range(0, numInputs).forEach(i -\u003e this.inputData[i] \u003d (this.inputData[i] - dataMean) / dataRange);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.outputMean \u003d DoubleStream.of(actualValues).sum() / numInputs;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.minOutput \u003d DoubleStream.of(actualValues).min().orElseThrow(MathArithmeticException::new);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.maxOutput \u003d DoubleStream.of(actualValues).max().orElseThrow(MathArithmeticException::new);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.outputRange \u003d maxOutput - minOutput;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        IntStream.range(0, numInputs).forEach(i -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                this.actualValues[i] \u003d (this.actualValues[i] - outputMean) / outputRange);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Performs the gradient descent algorithm to optimise {@code theta0} \u0026 {@code theta1}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void train() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        double delta0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        double delta1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            this.iterations++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            delta0 \u003d LEARNING_RATE * deriveTheta(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            delta1 \u003d LEARNING_RATE * deriveTheta(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            theta0 -\u003d delta0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            theta1 -\u003d delta1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        } while((Math.abs(delta0) \u003e TOLERANCE || Math.abs(delta1) \u003e TOLERANCE) \u0026\u0026 iterations \u003c\u003d MAX_ITERATIONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @param theta the \"independent\" variable"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return The (partial) derivative of the sum of costs for values of theta"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double deriveTheta(int theta) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        double cost \u003d 0.0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (theta \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            for (int i \u003d 0; i \u003c numInputs; i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                cost +\u003d computeHypothesis(inputData[i]) - inputData[i];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            for (int i \u003d 0; i \u003c numInputs; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                cost +\u003d (computeHypothesis(inputData[i]) - inputData[i]) * inputData[i];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return (1.0 / numInputs) * cost;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @param input An independent variable found in the training data"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return A prediction on the dependent variable based on current values of {@code theta0} and {@code theta1}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private double computeHypothesis(double input) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return theta0 + theta1 * input;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @param input An independent variable specified by the user"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * @return A prediction on the dependent variable based on the final values of {@code theta0} and {@code theta1}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double predict(double input) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.variable \u003d input;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        double scaledData \u003d (input - dataMean) / dataRange;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.result \u003d computeHypothesis(scaledData) * outputRange + outputMean;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double getActualValue(int idx) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return (this.actualValues[idx] * outputRange + outputMean) / OUTPUT_SCALE_FACTOR;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double getInputData(int idx) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.inputData[idx] * dataRange + dataMean;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public int getNumInputs() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.numInputs;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double getMinData() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return minData;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double getMaxData() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return maxData;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double getMinOutput() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return minOutput / OUTPUT_SCALE_FACTOR;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double getMaxOutput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return maxOutput / OUTPUT_SCALE_FACTOR;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double getDataRange() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return dataRange;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double getOutputRange() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return outputRange / OUTPUT_SCALE_FACTOR;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double getVariable() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return variable;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public double getResult() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return result / OUTPUT_SCALE_FACTOR;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.UserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.InTransaction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.OutTransaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Contains utility methods for populating {@code BankAccount} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static BankAccountOperation[] getSampleTransactions() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return new BankAccountOperation[]{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            new InTransaction(new Amount(100), Date.now(), new Description(\"a\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            new OutTransaction(new Amount(44.44), Date.now(), new Description(\"b\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            new OutTransaction(new Amount(23.3), Date.now(), new Description(\"c\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            new InTransaction(new Amount(34.01), Date.now(), new Description(\"d\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            new OutTransaction(new Amount(9.99), Date.now(), new Description(\"e\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "                getCategorySet(\"friends\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "                getCategorySet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "                getCategorySet(\"neighbours\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "                getCategorySet(\"family\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "                getCategorySet(\"classmates\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "                getCategorySet(\"colleagues\"))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns a sample BankAccount containing sample transactions."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static ReadOnlyUserState getSampleAccount() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UserState sampleUserState \u003d new UserState();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        for (BankAccountOperation sampleTxn : getSampleTransactions()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            sampleUserState.add(sampleTxn);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return sampleUserState;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns a category set containing the list of strings given."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static Set\u003cCategory\u003e getCategorySet(String... strings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .map(Category::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 10,
      "dingyuchen": 20,
      "Berttwm": 6,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SamplePlotDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javax.swing.JFrame;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import org.math.plot.Plot2DPanel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * A sample plotting utility for 2 variable graphs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * TODO: integrate with MainWindow for graphical view mode"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class SamplePlotDataUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private static double[] x \u003d {2, 4, 6, 8};"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private static double[] y \u003d {2, 5, 5, 8};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Plots the data on a graph in a new window"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static void plotData() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        Plot2DPanel plot \u003d new Plot2DPanel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        plot.addScatterPlot(\"X-Y\", x, y);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        JFrame frame \u003d new JFrame(\"Original X-Y Data\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        frame.setContentPane(plot);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        frame.setSize(600, 600);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        frame.setVisible(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static void main (String[] args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        plotData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Time.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * Represents point in time within PalPay."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * Guarantees:  immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time objects must adhere to the format: HHmm\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public final LocalTime time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public Time(String value) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        checkArgument(isValidTime(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.time \u003d LocalTime.parse(value, TIME_FORMATTER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            TIME_FORMATTER.parse(test);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                \u0026\u0026 time.equals(((Time) other).time)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.time.format(TIME_FORMATTER).hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this.time.format(TIME_FORMATTER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 3,
      "dingyuchen": 1,
      "wallacelim97": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BankAccountStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyBankAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Represents a storage for {@link seedu.address.model.BankAccount}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public interface BankAccountStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Path getBankAccountFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns BankAccount data as a {@link ReadOnlyBankAccount}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Optional\u003cReadOnlyUserState\u003e readAccount() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @see #getBankAccountFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    Optional\u003cReadOnlyUserState\u003e readAccount(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Saves the given {@link ReadOnlyBankAccount} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param bankAccount cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    void saveAccount(ReadOnlyUserState bankAccount) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @see #saveAccount(ReadOnlyUserState)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    void saveAccount(ReadOnlyUserState bankAccount, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 5,
      "dingyuchen": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBankOperations.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.InTransaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.OutTransaction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Jackson-friendly version of {@link Transaction}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "class JsonAdaptedBankOperations {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Transaction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Constructs a {@code JsonAdaptedBankOperations} with the given transaction details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public JsonAdaptedBankOperations(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                                     @JsonProperty(\"amount\") String amount, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "                                     @JsonProperty(\"tagged\") List\u003cJsonAdaptedCategory\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Converts a given {@code Transaction} into this class for Jason use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public JsonAdaptedBankOperations(BankAccountOperation source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "        tagged.addAll(source.getCategories().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Transaction} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted transaction."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public BankAccountOperation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final List\u003cCategory\u003e transactionCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (JsonAdaptedCategory category : tagged) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "            transactionCategories.add(category.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (!Amount.isValidAmount(Double.parseDouble(amount))) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        final Amount modelAmount \u003d new Amount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (!Date.isValid(date)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(transactionCategories);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if ((Double.parseDouble(amount)) \u003c 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            /* if amount is negative */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new OutTransaction(modelAmount.makeNegative(), modelDate, modelDescription, modelCategories);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            /* if amount is positive */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new InTransaction(modelAmount, modelDate, modelDescription, modelCategories);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "joloong": 79,
      "dingyuchen": 7,
      "wallacelim97": 8,
      "Berttwm": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Jackson-friendly version of {@link Budget}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Budget\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given budget details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"amount\") String amount, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedCategory\u003e tagged) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jason use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        amount \u003d source.getBudget().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        date \u003d source.getDeadline().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        tagged.addAll(source.getCategories().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted budgets."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final List\u003cCategory\u003e budgetCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (JsonAdaptedCategory category : tagged) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "            budgetCategories.add(category.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (!Amount.isValidAmount(Double.parseDouble(amount))) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        final Amount modelAmount \u003d new Amount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(budgetCategories);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new Budget(new Amount(Double.parseDouble(amount)), new Date(date), modelCategories);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 71,
      "joloong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCategory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Jackson-friendly version of {@link Category}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "class JsonAdaptedCategory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public JsonAdaptedCategory(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Converts a given {@code Category} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public JsonAdaptedCategory(Category source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        tagName \u003d source.categoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Converts this Jackson-friendly adapted category object into the model\u0027s {@code Category} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Category toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!Category.isValidCategoryName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new Category(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 14,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLedgerOperations.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.LendMoney;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.ReceiveMoney;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Split;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Jackson-friendly version of {@link JsonAdaptedLedgerOperations}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class JsonAdaptedLedgerOperations {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"LedgerOperation\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e people \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final List\u003cString\u003e shares \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public JsonAdaptedLedgerOperations(@JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                                       @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                                       @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                                       @JsonProperty(\"people\") List\u003cJsonAdaptedPerson\u003e people,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "                                       @JsonProperty(\"shares\") List\u003cString\u003e shares) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (people !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            this.people.addAll(people);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (shares !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            this.shares.addAll(shares);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public JsonAdaptedLedgerOperations(LedgerOperation source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        people.addAll(source.getPeopleInvolved().asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        shares.addAll(source.getShares().orElse(new ArrayList\u003c\u003e()).stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .map(i -\u003e i.toString()).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Converts this Jackson-friendly adapted ledger object into the model\u0027s {@code Ledger} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ledger."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public LedgerOperation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (!Date.isValid(date)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!Amount.isValidAmount(Double.parseDouble(amount))) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final Amount modelAmount \u003d new Amount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "                Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (people \u003d\u003d null || people.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "                UniquePersonList.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        final UniquePersonList peopleInvolved \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        peopleInvolved.setPersons(people.stream().map(jsonAdaptedPerson -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                return jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (shares \u003d\u003d null || shares.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"shares\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        final List\u003cInteger\u003e modelShares \u003d shares.stream().map(s -\u003e Integer.parseInt(s)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!Split.isValidSharesLength(modelShares, peopleInvolved)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new IllegalValueException(Split.SHARE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (peopleInvolved.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return modelAmount.isNegative()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joloong"
        },
        "content": "                ? new ReceiveMoney(people.get(0).toModelType(), modelAmount, modelDate, modelDescription)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                : new LendMoney(people.get(0).toModelType(), modelAmount.makeNegative(), modelDate, modelDescription);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return new Split(modelAmount, modelDate, modelDescription, modelShares, peopleInvolved);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 72,
      "dingyuchen": 54,
      "wallacelim97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedCategory\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        tagged.addAll(source.getCategories().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final List\u003cCategory\u003e personCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (JsonAdaptedCategory category : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "            personCategories.add(category.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(personCategories);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelCategories);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 10,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonBankAccountStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": " * A class to access BankAccount data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class JsonBankAccountStorage implements BankAccountStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBankAccountStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public JsonBankAccountStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Path getBankAccountFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Optional\u003cReadOnlyUserState\u003e readAccount() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return readAccount(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Similar to {@link #readAccount()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public Optional\u003cReadOnlyUserState\u003e readAccount(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Optional\u003cJsonSerializableBankAccount\u003e jsonBankAccount \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "            filePath, JsonSerializableBankAccount.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!jsonBankAccount.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return Optional.of(jsonBankAccount.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void saveAccount(ReadOnlyUserState bankAccount) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        saveAccount(bankAccount, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Similar to {@link #saveAccount(ReadOnlyUserState)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void saveAccount(ReadOnlyUserState bankAccount, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(bankAccount);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBankAccount(bankAccount), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 10,
      "dingyuchen": 12,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableBankAccount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.UserState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": " * An Immutable BankAccount that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "@JsonRootName(value \u003d \"bankaccount\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "class JsonSerializableBankAccount {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d \"Transactions list contains duplicate transaction(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"Budgets list contains duplicate budget(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LEDGER \u003d \"Ledger list contains duplicate Ledger operation(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final List\u003cJsonAdaptedBankOperations\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final List\u003cJsonAdaptedLedgerOperations\u003e ledgers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Constructs a {@code JsonSerializableBankAccount} with the given transactions."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public JsonSerializableBankAccount(@JsonProperty(\"transactions\") List\u003cJsonAdaptedBankOperations\u003e transactions,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                                       @JsonProperty(\"budgets\") List\u003cJsonAdaptedBudget\u003e budgets,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                                       @JsonProperty(\"ledgers\") List\u003cJsonAdaptedLedgerOperations\u003e ledgers) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.transactions.addAll(transactions);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Converts a given {@code ReadOnlyBankAccount} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBankAccount}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public JsonSerializableBankAccount(ReadOnlyUserState source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        budgets"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .addAll(source.getBankAccount().getBudgetHistory()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                .map(JsonAdaptedBudget::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        transactions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .addAll(source.getBankAccount().getTransactionHistory()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                .map(JsonAdaptedBankOperations::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Converts this bank account into the model\u0027s {@code BankAccount} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public UserState toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UserState user \u003d new UserState();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        for (JsonAdaptedBankOperations jsonAdaptedBankOperations : transactions) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            BankAccountOperation txn \u003d jsonAdaptedBankOperations.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            if (user.has(txn)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            user.add(txn);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        for (JsonAdaptedBudget jsonAdaptedBudget : budgets) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Budget budget \u003d jsonAdaptedBudget.toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            if (user.has(budget)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            user.add(budget);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return user;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 10,
      "joloong": 53,
      "dingyuchen": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableUserState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.UserState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": " * An Immutable UserState that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "@JsonRootName(value \u003d \"userstate\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "class JsonSerializableUserState {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d \"Transactions list contains duplicate transaction(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"Budgets list contains duplicate budget(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LEDGER \u003d \"Ledgers list contains duplicate budget(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final List\u003cJsonAdaptedBankOperations\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final List\u003cJsonAdaptedLedgerOperations\u003e ledgers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Constructs a {@code JsonSerializableUserState} with the given transactions."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public JsonSerializableUserState(@JsonProperty(\"transactions\") List\u003cJsonAdaptedBankOperations\u003e transactions,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "                                     @JsonProperty(\"budgets\") List\u003cJsonAdaptedBudget\u003e budgets,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "                                     @JsonProperty(\"ledgers\") List\u003cJsonAdaptedLedgerOperations\u003e ledgers) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.transactions.addAll(transactions);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.ledgers.addAll(ledgers);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public JsonSerializableUserState(ReadOnlyUserState source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        transactions"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "                .addAll(source.getBankAccount().getTransactionHistory()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        .map(JsonAdaptedBankOperations::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        budgets"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "                .addAll(source.getBankAccount().getBudgetHistory()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        .map(JsonAdaptedBudget::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ledgers"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "                .addAll(source.getLedger().getLedgerHistory()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        .map(JsonAdaptedLedgerOperations::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Converts this user state into the model\u0027s {@code UserState} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public UserState toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "        UserState userState \u003d new UserState();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (JsonAdaptedBankOperations jsonAdaptedBankOperations : transactions) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "            BankAccountOperation txn \u003d jsonAdaptedBankOperations.toModelType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            if (userState.has(txn)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            userState.add(txn);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (JsonAdaptedBudget jsonAdaptedBudget : budgets) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Budget budget \u003d jsonAdaptedBudget.toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            if (userState.has(budget)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            userState.add(budget);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (JsonAdaptedLedgerOperations jsonAdaptedLedgerOperations : ledgers) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "            LedgerOperation ledgerOperation \u003d jsonAdaptedLedgerOperations.toModelType();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            if (userState.has(ledgerOperation)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_LEDGER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            userState.add(ledgerOperation);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return userState;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 87,
      "dingyuchen": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserStateStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": " * A class to access UserState data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class JsonUserStateStorage implements UserStateStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUserStateStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public JsonUserStateStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Path getUserStateFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Optional\u003cReadOnlyUserState\u003e readUserState() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return readUserState(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Optional\u003cReadOnlyUserState\u003e readUserState(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Optional\u003cJsonSerializableUserState\u003e jsonUserState \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "            filePath, JsonSerializableUserState.class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!jsonUserState.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return Optional.of(jsonUserState.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void saveUserState(ReadOnlyUserState userState) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        saveUserState(userState, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void saveUserState(ReadOnlyUserState userState, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(userState);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableUserState(userState), filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "joloong": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "public interface Storage extends UserStateStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    Path getUserStateFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    Optional\u003cReadOnlyUserState\u003e readUserState(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    void saveUserState(ReadOnlyUserState bankAccount) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 4,
      "dingyuchen": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * Manages storage of BankAccount data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private UserStateStorage userStateStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public StorageManager(UserStateStorage userStateStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.userStateStorage \u003d userStateStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BankAccount methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Path getUserStateFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return userStateStorage.getUserStateFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Optional\u003cReadOnlyUserState\u003e readUserState() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return readUserState(userStateStorage.getUserStateFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Optional\u003cReadOnlyUserState\u003e readUserState(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return userStateStorage.readUserState(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void saveUserState(ReadOnlyUserState userState) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        saveUserState(userState, userStateStorage.getUserStateFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void saveUserState(ReadOnlyUserState userState, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "        userStateStorage.saveUserState(userState, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 13,
      "dingyuchen": 1,
      "wallacelim97": 2,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserStateStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserState}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "public interface UserStateStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    Path getUserStateFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns UserState data as a {@link ReadOnlyUserState}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    Optional\u003cReadOnlyUserState\u003e readUserState() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @see #getUserStateFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    Optional\u003cReadOnlyUserState\u003e readUserState(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Saves the given {@link ReadOnlyUserState} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param userState cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    void saveUserState(ReadOnlyUserState userState) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @see #saveUserState(ReadOnlyUserState)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    void saveUserState(ReadOnlyUserState userState, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * An UI component that displays information of a {@code Budget}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class BudgetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private static final String FXML \u003d \"BudgetListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public final Budget budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private FlowPane between;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public BudgetCard(Budget budget, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        amount.setText(budget.getBudget().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        date.setText(budget.getDeadline().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        categories.getChildren().add(new Label(budget.getBetween()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        budget.getCategories().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        if (!(other instanceof BudgetCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        BudgetCard card \u003d (BudgetCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            \u0026\u0026 budget.equals(card.budget);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 58,
      "joloong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Panel containing the list of budgets set."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class BudgetListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private static final String FXML \u003d \"BudgetListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private ListView\u003cBudget\u003e budgetListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public BudgetListPanel(ObservableList\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        budgetListView.setItems(budgets);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        budgetListView.setCellFactory(listView -\u003e new BudgetListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Budget} using a {@code BudgetCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    class BudgetListViewCell extends ListCell\u003cBudget\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        protected void updateItem(Budget budget, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            super.updateItem(budget, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            if (empty || budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                setGraphic(new BudgetCard(budget, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-w12-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        root.sizeToScene();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LedgerCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * An UI component that displays information of a {@code Budget}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class LedgerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private static final String FXML \u003d \"LedgerListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public final LedgerOperation ledgerOperation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private FlowPane people;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerCard(LedgerOperation ledgerOperation, int displayedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.ledgerOperation \u003d ledgerOperation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        amount.setText(ledgerOperation.getAmount().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        date.setText(ledgerOperation.getDate().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // TODO FIX"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        //balance.setText(ledgerOperation.getAmount().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ledgerOperation.getPeopleInvolved().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .sorted(Comparator.comparing(person -\u003e person.getName().fullName))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .forEach(person -\u003e people.getChildren().add(new Label(person.getName().fullName)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!(other instanceof LedgerCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        LedgerCard card \u003d (LedgerCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u0026\u0026 ledgerOperation.equals(card.ledgerOperation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 3,
      "dingyuchen": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LedgerListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Panel containing the list of ledgers set."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class LedgerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private static final String FXML \u003d \"LedgerListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LedgerListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private ListView\u003cLedgerOperation\u003e ledgerListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerListPanel(ObservableList\u003cLedgerOperation\u003e ledgerOperations) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ledgerListView.setItems(ledgerOperations);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ledgerListView.setCellFactory(listView -\u003e new LedgerListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Ledger} using a {@code LedgerCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    class LedgerListViewCell extends ListCell\u003cLedgerOperation\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        protected void updateItem(LedgerOperation ledgerOperation, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            super.updateItem(ledgerOperation, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            if (empty || ledgerOperation \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                setGraphic(new LedgerCard(ledgerOperation, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 7,
      "dingyuchen": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoginWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Controller for a login page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class LoginWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LoginWindow.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final String FXML \u003d \"LoginWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Label loginStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private TextField userName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private TextField passWord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public LoginWindow(Stage root) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        root.sizeToScene();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public LoginWindow() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainTabPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.ProjectionGraph;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Panel containing the different tabs of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class MainTabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final String FXML \u003d \"MainTabPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MainTabPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private StackPane transactionListPanelPlaceholder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private StackPane budgetListPanelPlaceholder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private StackPane ledgerListPanelPlaceholder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private StackPane projectionGraphPlaceholder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private TabPane mainTabPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public MainTabPanel(TransactionListPanel transactionListPanel, BudgetListPanel budgetListPanel,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                        LedgerListPanel ledgerListPanel, StackPane projectionGraph) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        transactionListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        budgetListPanelPlaceholder.getChildren().add(budgetListPanel.getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ledgerListPanelPlaceholder.getChildren().add(ledgerListPanel.getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        projectionGraphPlaceholder \u003d projectionGraph;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    //  TODO: remove"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected void switchToTransactionTab() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.mainTabPanel.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected void switchToBudgetTab() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.mainTabPanel.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    protected void switchToLedgerTab() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.mainTabPanel.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    protected void switchToProjectionTab() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.mainTabPanel.getSelectionModel().select(3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void updateProjectionGraph(ProjectionGraph projectionGraph) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.projectionGraphPlaceholder \u003d projectionGraph;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 44,
      "dingyuchen": 9,
      "wallacelim97": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private MainTabPanel mainTabPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private TransactionListPanel transactionListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private BudgetListPanel budgetListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private LedgerListPanel ledgerListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private StackPane mainTabPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private MenuItem transactionMenuItem;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private MenuItem budgetMenuItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private StackPane transactionListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private StackPane budgetListPanelPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private StackPane ledgerListPanelPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private StackPane statusBarPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * TODO: implement keyboard shortcuts"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // setAccelerator(transactionMenuItem, KeyCombination.valueOf(\"F2\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ObservableList\u003cBankAccountOperation\u003e transactionList \u003d logic.getTransactionList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joloong"
        },
        "content": "        transactionListPanel \u003d new TransactionListPanel(transactionList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        ObservableList\u003cBudget\u003e budgetList \u003d logic.getBudgetList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        budgetListPanel \u003d new BudgetListPanel(budgetList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ObservableList\u003cLedgerOperation\u003e ledgerOperationsList \u003d logic.getLedgerOperationsList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ledgerListPanel \u003d new LedgerListPanel(ledgerOperationsList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        StackPane projectionGraph \u003d new StackPane();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        mainTabPanel \u003d new MainTabPanel(transactionListPanel, budgetListPanel, ledgerListPanel, projectionGraph);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joloong"
        },
        "content": "        mainTabPanelPlaceholder.getChildren().add(mainTabPanel.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joloong"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter(logic.getUserStateFilePath(), transactionList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joloong"
        },
        "content": "        statusBarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Handles the switching of tab depending on {@code tab}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private void handleSwitchTab(Tab tab) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joloong"
        },
        "content": "        switch (tab) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joloong"
        },
        "content": "        case TRANSACTION:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joloong"
        },
        "content": "            showTransactionTab();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joloong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joloong"
        },
        "content": "        case BUDGET:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joloong"
        },
        "content": "            showBudgetTab();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joloong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        case LEDGER:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            showLedgerTab();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joloong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        case PROJECTION:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            showProjectionTab();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joloong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joloong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public TransactionListPanel getTransactionListPanel() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return transactionListPanel;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joloong"
        },
        "content": "            if (commandResult.isSwitchTab()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joloong"
        },
        "content": "                handleSwitchTab(commandResult.getTab());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joloong"
        },
        "content": "            ObservableList\u003cBankAccountOperation\u003e transactionList \u003d logic.getTransactionList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joloong"
        },
        "content": "            statusBarFooter.setBalance(transactionList);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Switch to transaction tab."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private void showTransactionTab() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joloong"
        },
        "content": "        mainTabPanel.switchToTransactionTab();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Switch to budget tab."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private void showBudgetTab() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joloong"
        },
        "content": "        mainTabPanel.switchToBudgetTab();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Switch to ledger tab."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private void showLedgerTab() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        mainTabPanel.switchToLedgerTab();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private void showProjectionTab() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        mainTabPanel.switchToProjectionTab();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 10,
      "joloong": 61,
      "dingyuchen": 22,
      "wallacelim97": 10,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        person.getCategories().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 4,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Label balance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ObservableList\u003cBankAccountOperation\u003e transactions) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        setBalance(transactions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setBalance(ObservableList\u003cBankAccountOperation\u003e transactions) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Amount amount \u003d Amount.zero();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (BankAccountOperation transaction : transactions) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "            amount \u003d amount.addAmount(transaction.getAmount());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        balance.setText(\"Balance: \" + this.amount.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 16,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransactionCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * An UI component that displays information of a {@code Transaction}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class TransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private static final String FXML \u003d \"TransactionListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public final BankAccountOperation transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public TransactionCard(BankAccountOperation transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        amount.setText(transaction.getAmount().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        date.setText(transaction.getDate().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        description.setText(transaction.getDescription().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        transaction.getCategories().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        if (!(other instanceof TransactionCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        TransactionCard card \u003d (TransactionCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                \u0026\u0026 transaction.equals(card.transaction);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 3,
      "joloong": 7,
      "dingyuchen": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransactionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * Panel containing the list of transactions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class TransactionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private static final String FXML \u003d \"TransactionListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private ListView\u003cBankAccountOperation\u003e transactionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public TransactionListPanel(ObservableList\u003cBankAccountOperation\u003e transactions) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        transactionListView.setItems(transactions);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        transactionListView.setCellFactory(listView -\u003e new TransactionListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Transaction} using a {@code TransactionCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cBankAccountOperation\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        protected void updateItem(BankAccountOperation transaction, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                setGraphic(new TransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 4,
      "dingyuchen": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/PalPay_32_1.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/tab/Tab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.ui.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The different types of tab for the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "public enum Tab {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "    TRANSACTION,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    BUDGET,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    LEDGER,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    PROJECTION,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 8,
      "dingyuchen": 1,
      "wallacelim97": 2
    }
  },
  {
    "path": "src/main/resources/view/BudgetLineChart.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ".chart-plot-background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ".default-color0.chart-series-line {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    -fx-stroke: red;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ".default-color0.chart-line-symbol {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    -fx-background-color: red, white;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 11
    }
  },
  {
    "path": "src/main/resources/view/BudgetListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "                \u003cLabel fx:id\u003d\"amount\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 33,
      "joloong": 1
    }
  },
  {
    "path": "src/main/resources/view/BudgetListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    \u003cListView fx:id\u003d\"budgetListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 8
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "joloong"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "joloong"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 2,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/LedgerListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003cLabel fx:id\u003d\"amount\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"people\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "joloong": 33,
      "dingyuchen": 1
    }
  },
  {
    "path": "src/main/resources/view/LedgerListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "    \u003cListView fx:id\u003d\"ledgerListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "joloong": 8
    }
  },
  {
    "path": "src/main/resources/view/LoginWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003cfx:root maximized\u003d\"true\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \u003cImage url\u003d\"@/images/login_icon.png\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "joloong": 41
    }
  },
  {
    "path": "src/main/resources/view/MainTabPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "    \u003cTabPane fx:id\u003d\"mainTabPanel\" VBox.vgrow\u003d\"ALWAYS\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \u003ctabs\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003cTab text\u003d\"Transaction\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003cVBox fx:id\u003d\"transactionList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "                            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"transactionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003cTab text\u003d\"Budget\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003ccontent\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003cVBox fx:id\u003d\"budgetList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "                            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"budgetListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003c/content\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u003cTab text\u003d\"Ledger\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                \u003ccontent\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003cVBox fx:id\u003d\"ledgerList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"ledgerListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                \u003c/content\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            \u003cTab text\u003d\"Projection\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                \u003ccontent\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                    \u003cVBox fx:id\u003d\"projectionGraph\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"projectionGraphPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                \u003c/content\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \u003c/tabs\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "joloong": 38,
      "dingyuchen": 9,
      "wallacelim97": 11
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "         title\u003d\"PalPay\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \u003cImage url\u003d\"@/images/PalPay_32_1.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "                           styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "                           styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003cVBox fx:id\u003d\"mainTab\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"mainTabPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusBarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "joloong": 11,
      "dingyuchen": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "joloong": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ProjectionLineChart.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ".chart-plot-background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ".default-color0.chart-series-line {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    -fx-stroke: blue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ".default-color0.chart-line-symbol {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    -fx-background-color: blue, white;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 11
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\" text\u003d\"hello\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    \u003cLabel fx:id\u003d\"balance\" text\u003d\"world\" GridPane.halignment\u003d\"RIGHT\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "joloong": 3,
      "-": 9
    }
  },
  {
    "path": "src/main/resources/view/TransactionListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        \u003cLabel fx:id\u003d\"amount\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$people\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "joloong": 2,
      "dingyuchen": 32
    }
  },
  {
    "path": "src/main/resources/view/TransactionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "  \u003cListView fx:id\u003d\"transactionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "dingyuchen": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableUserStateTest/duplicateTransactionUserState.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": "  \"transactions\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"milk\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"100.00\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"24022019\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"owesMoney\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"milk\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"100.00\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"24022019\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"owesMoney\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "  \"budgets\": [],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "  \"ledgers\": []"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 22,
      "dingyuchen": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableUserStateTest/invalidTransactionUserState.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": "  \"transactions\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"food\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"10.00\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"2!/40/22019\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"owesMoney\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "  \"budgets\": [],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "  \"ledgers\": []"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 13,
      "dingyuchen": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableUserStateTest/typicalTransactionsUserState.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "  \"_comment\": \"UserState save file which contains the same Transaction values as in TypicalTransactions#getTypicalUserState()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "  \"transactions\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"milk\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"100.00\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"10112019\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"food\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"honey\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"200.00\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"11112019\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"breakfast\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"chicken\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"300.00\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"12112019\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"dinner\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"oil\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"400.00\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"13112019\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"drink\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"eggs\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"500.00\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"14112019\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"lunch\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"onion\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"600.00\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"15112019\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"club\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"garlic\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"700.00\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"16112019\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"grocery\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "  \"budgets\": [],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "  \"ledgers\": []"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 60,
      "dingyuchen": 3
    }
  },
  {
    "path": "src/test/data/JsonUserStateStorageTest/invalidAndValidTransactionUserState.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": "  \"transactions\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"food\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"500.00\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"24022019\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"owesMoney\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"drink\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"160.00\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"24022019\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"owesMoney\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"lunch\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"100.00\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"2/40/22019\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"owesMoney\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "  \"budgets\": [],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "  \"ledgers\": []"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 33
    }
  },
  {
    "path": "src/test/data/JsonUserStateStorageTest/invalidTransactionUserState.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": "  \"transactions\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"description\": \"food\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"amount\": \"10.00\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"date\": \"2!/40/22019\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"owesMoney\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "  \"budgets\": [],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "  \"ledgers\": []"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/MessagesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class MessagesTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void messagesAreAllCorrect() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(Messages.getMessageUnknownCommand(), \"Unknown command\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(Messages.getMessageInvalidCommandFormat(), \"Invalid command format! \\n%1$s\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(Messages.getMessageTransactionsListedOverview(), \"%1$d transactions listed!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(Messages.getMessageInvalidTransactionDisplayedIndex(),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \"The transaction index provided is invalid\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(Messages.getMessageInvalidBudgetDisplayedIndex(), \"The budget index provided is invalid\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/PalPay_32_1.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.logic.commands.InCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.storage.JsonUserStateStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        JsonUserStateStorage bankAccountStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            new JsonUserStateStorage(temporaryFolder.resolve(\"bankAccount.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        StorageManager storage \u003d new StorageManager(bankAccountStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void execute_commandInvalidIndexError_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        String deleteCommand \u003d \"delete t9\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        String inCommand \u003d InCommand.COMMAND_WORD + \" $/100 n/milk c/food d/10112019\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertCommandSuccess(inCommand, String.format(InCommand.MESSAGE_SUCCESS, TypicalTransactions.ALICE), model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // TODO: FIX"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        JsonBankAccountStorage bankAccountStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "                new JsonBankAccountIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionBankAccount.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "        StorageManager storage \u003d new StorageManager(bankAccountStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withCategories().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void getFilteredTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTransactionList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joloong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private static class JsonBankAccountIoExceptionThrowingStub extends JsonUserStateStorage {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joloong"
        },
        "content": "        private JsonBankAccountIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void saveUserState(ReadOnlyUserState userState, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 22,
      "dingyuchen": 14,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalUserState;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        model \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // TODO: Refactor into InCommandIntegrationTest"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Transaction validTransaction \u003d new BankOperationBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBankAccount(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        expectedModel.add(validTransaction);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(new AddCommand(validTransaction), model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTransaction), expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Transaction transactionInList \u003d model.getBankAccount().getTransactionHistory().get(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandFailure(new AddCommand(transactionInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 8,
      "dingyuchen": 5,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalUserState;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.UserState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void execute_emptyBankAccount_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.commitUserState();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void execute_nonEmptyBankAccount_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        expectedModel.setUserState(new UserState());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.commitUserState();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 6,
      "dingyuchen": 4,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void getFeedBackToUser() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String feedback \u003d commandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(feedback, new CommandResult(\"feedback\").getFeedbackToUser());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertNotEquals(feedback, new CommandResult(\"false\").getFeedbackToUser());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        CommandResult warningCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \"feedback\", \"warnings1\", \"warnings2\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String warningFeedback \u003d warningCommandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(warningFeedback, new CommandResult("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \"feedback\", \"warnings1\", \"warnings2\").getFeedbackToUser());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertNotEquals(warningFeedback, new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \"feedback\", \"warnings\", \"warningsFalse\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void isShowHelp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", true, false, null, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        boolean showHelp \u003d commandResult.isShowHelp();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(showHelp,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", true, false, null, null).isShowHelp());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertNotEquals(showHelp,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", false, false, null, null).isShowHelp());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", true, false, null, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "        boolean exit \u003d commandResult.isExit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(exit,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", true, false, null, null).isExit());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertNotEquals(exit,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", false, true, null, null).isExit());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void isSwitchTab() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", true, false, Tab.BUDGET, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Tab tab \u003d commandResult.getTab();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "        boolean switchTab \u003d commandResult.isSwitchTab();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(tab,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", true, false, Tab.BUDGET, null).getTab());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(switchTab,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", true, false, Tab.BUDGET, null).isSwitchTab());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertNotEquals(tab,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", false, false, Tab.TRANSACTION, null).getTab());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(commandResult.equals("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", false, false, null, null)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(commandResult.equals("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", true, false, null, null)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(commandResult.equals("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", false, true, null, null)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different switchTab value -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(commandResult.equals("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", false, false, Tab.BUDGET, null)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", true, false, null, null).hashCode());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", false, true, null, null).hashCode());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different switchTabValue -\u003e returns different hashcode"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            new CommandResult(\"feedback\", false, false, Tab.BUDGET, null).hashCode());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 74,
      "wallacelim97": 17,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.BankAccount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.TransactionContainsCategoriesPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "//import seedu.address.testutil.UpdateTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_CATEGORY + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_CATEGORY + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_CATEGORY + \"hubby*\"; // \u0027*\u0027 not allowed in categories"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // TODO: FIX"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     public static final UpdateCommand.UpdateTransactionDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     public static final UpdateCommand.UpdateTransactionDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     static {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //         DESC_AMY \u003d new UpdateTransactionDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //             .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //             .withCategories(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //         DESC_BOB \u003d new UpdateTransactionDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //             .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //             .withCategories(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * - the bank account, filtered transaction list and selected transaction in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "        BankAccount expectedBankAccount \u003d new BankAccount(actualModel.getBankAccount());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        List\u003cBankAccountOperation\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedBankAccount, actualModel.getBankAccount());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the transaction at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * {@code model}\u0027s bank account."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static void showTransactionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation transaction \u003d model.getFilteredTransactionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final List\u003cString\u003e categories \u003d transaction"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .getCategories()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .map(category -\u003e category.getCategoryName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.updateFilteredTransactionList(new TransactionContainsCategoriesPredicate(categories));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(1, model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Deletes the first transaction in {@code model}\u0027s filtered list from {@code model}\u0027s bank account."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static void deleteFirstTransaction(Model model) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation firstTransaction \u003d model.getFilteredTransactionList().get(0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.deleteTransaction(firstTransaction);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.commitUserState();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 41,
      "dingyuchen": 6,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalUserState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.testutil.TypicalTypes.TYPE_TRANSACTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation transactionToDelete \u003d model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .getFilteredTransactionList()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TYPE_TRANSACTION, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENTRY_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.commitUserState();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(deleteCommand, model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new CommandResult(expectedMessage, false, false, Tab.TRANSACTION), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TYPE_TRANSACTION, outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation transactionToDelete \u003d model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .getFilteredTransactionList()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TYPE_TRANSACTION, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENTRY_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "        showNoTransaction(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.commitUserState();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(deleteCommand, model,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new CommandResult(expectedMessage, false, false, Tab.TRANSACTION), expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of bank account list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBankAccount().getTransactionHistory().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TYPE_TRANSACTION, outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(TYPE_TRANSACTION, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(TYPE_TRANSACTION, INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(TYPE_TRANSACTION, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private void showNoTransaction(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.updateFilteredTransactionList(p -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(model.getFilteredTransactionList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 8,
      "joloong": 31,
      "dingyuchen": 7,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 2,
      "Berttwm": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalUserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.TransactionContainsCategoriesPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FilterCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        TransactionContainsCategoriesPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new TransactionContainsCategoriesPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        TransactionContainsCategoriesPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new TransactionContainsCategoriesPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        FilterCommand findFirstCommandCopy \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(filterFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(filterFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // TODO: more testcases"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void execute_zeroKeywords_noTransactionFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        TransactionContainsCategoriesPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.commitUserState();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(command, model,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new CommandResult(expectedMessage, false, false, Tab.TRANSACTION), expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parses {@code userInput} into a {@code TransactionContainsCategoriesPredicate}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private TransactionContainsCategoriesPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new TransactionContainsCategoriesPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 72,
      "dingyuchen": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalUserState;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for HelpCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, false, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 17,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/InCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.BankAccount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyBankAccount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.testutil.BankOperationBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "public class InCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void constructor_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void executeTransactionAcceptedByModeladdSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        ModelStubAcceptingTransactionAdded modelStub \u003d new ModelStubAcceptingTransactionAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation validTransaction \u003d new BankOperationBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        InCommand inCommand \u003d new InCommand(validTransaction);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        CommandResult commandResult \u003d inCommand.execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertEquals(String.format(InCommand.MESSAGE_SUCCESS, validTransaction), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertEquals(Arrays.asList(validTransaction), modelStub.transactionsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation validTransaction \u003d new BankOperationBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        InCommand addCommand \u003d new InCommand(validTransaction);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTransaction(validTransaction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertThrows(CommandException.class, InCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation firstTransaction \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .withCategories(\"Food\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .withAmount(\"100\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .withDate(\"10102019\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation secondTransaction \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .withCategories(\"Drinks\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .withAmount(\"80\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .withDate(\"10102019\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        InCommand addFirstCommand \u003d new InCommand(firstTransaction);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        InCommand addSecondCommand \u003d new InCommand(secondTransaction);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertTrue(addFirstCommand.equals(addFirstCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        InCommand addFirstCommandCopy \u003d new InCommand(firstTransaction);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertTrue(addFirstCommand.equals(addFirstCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertFalse(addFirstCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertFalse(addFirstCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertFalse(addFirstCommand.equals(addSecondCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public Path getUserStateFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void setUserStateFilePath(Path bankAccountFilePath) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void setUserState(ReadOnlyUserState bankAccount) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(LedgerOperation operation) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(Budget budget) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public ReadOnlyBankAccount getBankAccount() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public boolean canUndoUserState() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void undoUserState() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public boolean canRedoUserState() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void redoUserState() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void commitUserState() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void setTransactions(List\u003cBankAccountOperation\u003e transactionHistory) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public ReadOnlyUserState getUserState() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(Budget budget) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be calld.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public boolean has(LedgerOperation ledgerOperation) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"This method should not be calld.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void deleteTransaction(BankAccountOperation target) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void setTransaction(BankAccountOperation target, BankAccountOperation editedTransaction) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void setBudget(Budget budgetTarget, Budget budgetEdit) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public FilteredList\u003cBankAccountOperation\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cBankAccountOperation\u003e predicate) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void updateFilteredLedgerList(Predicate\u003cLedgerOperation\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void deleteBudget(Budget budgetToDelete) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public ObservableList\u003cLedgerOperation\u003e getFilteredLedgerOperationsList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * A Model stub that contains a single transaction."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private class ModelStubWithTransaction extends ModelStub {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joloong"
        },
        "content": "        private final Transaction transaction;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ModelStubWithTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joloong"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joloong"
        },
        "content": "            this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joloong"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return this.transaction.isSameTransaction(transaction);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * A Model stub that always accept the transaction being added."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private class ModelStubAcceptingTransactionAdded extends ModelStub {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        final ArrayList\u003cBankAccountOperation\u003e transactionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joloong"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return transactionsAdded.stream().anyMatch(transaction::isSameTransaction);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(LedgerOperation operation) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            transactionsAdded.add(transaction);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void commitUserState() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public ReadOnlyBankAccount getBankAccount() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new BankAccount();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 22,
      "joloong": 65,
      "dingyuchen": 47,
      "Berttwm": 70,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalUserState;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        model \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/OutCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.BankAccount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyBankAccount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.testutil.BankOperationBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "public class OutCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void constructor_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new OutCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void executeTransactionAcceptedByModeladdSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        ModelStubAcceptingTransactionAdded modelStub \u003d new ModelStubAcceptingTransactionAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation validTransaction \u003d new BankOperationBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        OutCommand outCommand \u003d new OutCommand(validTransaction);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        CommandResult commandResult \u003d outCommand.execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertEquals(String.format(OutCommand.MESSAGE_SUCCESS, validTransaction), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertEquals(Arrays.asList(validTransaction), modelStub.transactionsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation validTransaction \u003d new BankOperationBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        InCommand addCommand \u003d new InCommand(validTransaction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTransaction(validTransaction);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertThrows(CommandException.class, InCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation firstTransaction \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .withCategories(\"Food\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .withAmount(\"100\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .withDate(\"10102019\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation secondTransaction \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .withCategories(\"Drinks\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .withAmount(\"80\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .withDate(\"10102019\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        OutCommand addFirstCommand \u003d new OutCommand(firstTransaction);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        OutCommand addSecondCommand \u003d new OutCommand(secondTransaction);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertTrue(addFirstCommand.equals(addFirstCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        OutCommand addFirstCommandCopy \u003d new OutCommand(firstTransaction);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertTrue(addFirstCommand.equals(addFirstCommandCopy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertFalse(addFirstCommand.equals(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertFalse(addFirstCommand.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertFalse(addFirstCommand.equals(addSecondCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public Path getUserStateFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void setUserStateFilePath(Path bankAccountFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void setUserState(ReadOnlyUserState bankAccount) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(LedgerOperation operation) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(Budget budget) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public ReadOnlyBankAccount getBankAccount() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public boolean canUndoUserState() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void undoUserState() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public boolean canRedoUserState() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void redoUserState() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void commitUserState() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public void setTransactions(List\u003cBankAccountOperation\u003e transactionHistory) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public ReadOnlyUserState getUserState() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(Budget budget) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be calld.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public boolean has(LedgerOperation ledgerOperation) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"This method should not be calld.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public void deleteTransaction(BankAccountOperation target) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public void setTransaction(BankAccountOperation target, BankAccountOperation editedTransaction) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void setBudget(Budget budgetTarget, Budget budgetEdit) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public FilteredList\u003cBankAccountOperation\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cBankAccountOperation\u003e predicate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void updateFilteredLedgerList(Predicate\u003cLedgerOperation\u003e predicate) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void deleteBudget(Budget budgetToDelete) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public ObservableList\u003cLedgerOperation\u003e getFilteredLedgerOperationsList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * A Model stub that contains a single transaction."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    private class ModelStubWithTransaction extends ModelStub {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        private final Transaction transaction;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        ModelStubWithTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return this.transaction.isSameTransaction(transaction);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * A Model stub that always accept the transaction being added."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    private class ModelStubAcceptingTransactionAdded extends ModelStub {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        final ArrayList\u003cBankAccountOperation\u003e transactionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return transactionsAdded.stream().anyMatch(transaction::isSameTransaction);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(LedgerOperation operation) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            addTransaction(transaction);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        private void addTransaction(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            transactionsAdded.add(transaction);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void commitUserState() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        public ReadOnlyBankAccount getBankAccount() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "            return new BankAccount();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 14,
      "joloong": 22,
      "dingyuchen": 32,
      "Berttwm": 238
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ProjectCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.ReadOnlyBankAccount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.stubs.BankAccountStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.stubs.ModelStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.UniqueTransactionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.testutil.BankOperationBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class ProjectCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void constructor_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProjectCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void executeProjectCommand_oneTransaction_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        BankAccountOperation transaction \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                .withCategories(\"Food\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                .withAmount(\"100\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                .withDate(\"10102019\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        List\u003cBankAccountOperation\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        transactions.add(transaction);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        ModelStubWithTransactions modelStub \u003d new ModelStubWithTransactions(transactions);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        Date date \u003d new Date(\"12122019\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        ProjectCommand projectCommand \u003d new ProjectCommand(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e projectCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * A Model stub that contains a single transaction."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private class ModelStubWithTransaction extends ModelStub {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        private final Transaction transaction;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        ModelStubWithTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return this.transaction.isSameTransaction(transaction);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * A Model stub that contains 10 transactions."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private class ModelStubWithTransactions extends ModelStub {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        private ReadOnlyBankAccountStub readOnlyBankAccountStub;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        ModelStubWithTransactions(List\u003cBankAccountOperation\u003e transactions) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            this.readOnlyBankAccountStub \u003d new ReadOnlyBankAccountStub();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            readOnlyBankAccountStub.setTransactions(transactions);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        public ReadOnlyBankAccount getBankAccount() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return readOnlyBankAccountStub;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private class ReadOnlyBankAccountStub extends BankAccountStub {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        private UniqueTransactionList transactions;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        ReadOnlyBankAccountStub() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            this.transactions \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        void setTransactions(List\u003cBankAccountOperation\u003e transactions) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            this.transactions.setTransactions(transactions);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        public ObservableList\u003cBankAccountOperation\u003e getTransactionHistory() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return transactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        public ObservableList\u003cBankAccountOperation\u003e getSortedTransactionHistory(Comparator\u003cBankAccountOperation\u003e t) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return getTransactionHistory().sorted(t);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTransaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalUserState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        deleteFirstTransaction(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        deleteFirstTransaction(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.undoUserState();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model.undoUserState();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        deleteFirstTransaction(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        deleteFirstTransaction(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.undoUserState();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.undoUserState();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.redoUserState();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.redoUserState();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 44,
      "dingyuchen": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.BankAccount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyBankAccount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class SetCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public void constructor_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SetCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public void executeBudgetAcceptedByModeladdSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        ModelStubAcceptingBudgetAdded modelStub \u003d new ModelStubAcceptingBudgetAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        SetCommand setCommand \u003d new SetCommand(validBudget);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        CommandResult commandResult \u003d setCommand.execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assertEquals(String.format(SetCommand.MESSAGE_SUCCESS, validBudget), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assertEquals(Arrays.asList(validBudget), modelStub.budgetsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        Budget firstBudget \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            .withCategories(\"Food\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            .withAmount(\"100\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            .withDate(\"10102019\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        Budget secondBudget \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            .withCategories(\"Drinks\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            .withAmount(\"80\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            .withDate(\"10102019\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        SetCommand setFirstCommand \u003d new SetCommand(firstBudget);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        SetCommand setSecondCommand \u003d new SetCommand(secondBudget);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assertTrue(setFirstCommand.equals(setFirstCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        // same values -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        SetCommand setFirstCommandCopy \u003d new SetCommand(firstBudget);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assertFalse(setFirstCommand.equals(setFirstCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assertFalse(setFirstCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assertFalse(setFirstCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assertFalse(setFirstCommand.equals(setSecondCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public Path getUserStateFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void setUserStateFilePath(Path bankAccountFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void setUserState(ReadOnlyUserState bankAccount) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(LedgerOperation operation) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(Budget budget) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public ReadOnlyBankAccount getBankAccount() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public boolean canUndoUserState() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void undoUserState() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public boolean canRedoUserState() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void redoUserState() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void commitUserState() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void setTransactions(List\u003cBankAccountOperation\u003e transactionHistory) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public ReadOnlyUserState getUserState() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(Budget budget) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be calld.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public boolean has(LedgerOperation ledgerOperation) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"This method should not be calld.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void deleteTransaction(BankAccountOperation target) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void setTransaction(BankAccountOperation target, BankAccountOperation editedTransaction) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void setBudget(Budget budgetTarget, Budget budgetEdit) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public FilteredList\u003cBankAccountOperation\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public FilteredList\u003cBudget\u003e getFilteredBudgetist() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cBankAccountOperation\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void updateFilteredLedgerList(Predicate\u003cLedgerOperation\u003e predicate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public void deleteBudget(Budget budgetToDelete) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public ObservableList\u003cLedgerOperation\u003e getFilteredLedgerOperationsList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * A Model stub that contains a single transaction."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private class ModelStubWithBudget extends ModelStub {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        private final Budget budget;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        ModelStubWithBudget(Budget budget) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            this.budget \u003d budget;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(Budget budget) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return this.budget.isSameBudget(budget);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * A Model stub that always accept the transaction being added."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private class ModelStubAcceptingBudgetAdded extends ModelStub {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        final ArrayList\u003cBudget\u003e budgetsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(Budget budget) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return budgetsAdded.stream().anyMatch(budget::isSameBudget);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(LedgerOperation operation) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public void add(Budget budget) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            budgetsAdded.add(budget);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public void commitUserState() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        public ReadOnlyBankAccount getBankAccount() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "            return new BankAccount();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yewon0303": 252,
      "joloong": 18,
      "dingyuchen": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalUnsortedUserState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.comparator.AmountComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.comparator.DateComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for SortCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Model expectedSortedByAmountModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        model \u003d new ModelManager(getTypicalUnsortedUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        expectedSortedByAmountModel \u003d new ModelManager(getTypicalUnsortedUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void execute_sortByAmount_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        AmountComparator amountComparator \u003d new AmountComparator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cBankAccountOperation\u003e sortedTransactionHistory \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "            expectedSortedByAmountModel.getBankAccount().getSortedTransactionHistory(amountComparator);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedSortedByAmountModel.setTransactions(sortedTransactionHistory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedSortedByAmountModel.commitUserState();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(new SortCommand(amountComparator), model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new CommandResult(SortCommand.MESSAGE_SUCCESS, false, false, Tab.TRANSACTION),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "            expectedSortedByAmountModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void execute_sortByDate_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        DateComparator dateComparator \u003d new DateComparator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cBankAccountOperation\u003e sortedTransactionHistory \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "            expectedSortedByAmountModel.getBankAccount().getSortedTransactionHistory(dateComparator);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedSortedByAmountModel.setTransactions(sortedTransactionHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedSortedByAmountModel.commitUserState();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(new SortCommand(dateComparator), model,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new CommandResult(SortCommand.MESSAGE_SUCCESS, false, false, Tab.TRANSACTION),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "            expectedSortedByAmountModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        SortCommand amountSort \u003d new SortCommand(new AmountComparator());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        SortCommand dateSort \u003d new SortCommand(new DateComparator());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(amountSort.equals(amountSort));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(amountSort.equals(new SortCommand(new AmountComparator())));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(amountSort.equals(\"1\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(amountSort.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different sort -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(amountSort.equals(dateSort));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 76,
      "dingyuchen": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTransaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalUserState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        deleteFirstTransaction(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        deleteFirstTransaction(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        deleteFirstTransaction(expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        deleteFirstTransaction(expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.undoUserState();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedModel.undoUserState();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 40,
      "dingyuchen": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " * Contains integration tests (interaction with the Model,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " * UndoCommand and RedoCommand) and unit tests for UpdateCommand."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalUserState(), new UserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    private String typeTransaction \u003d \"t\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    private String typeBudget \u003d \"b\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation editedTransaction \u003d new BankOperationBuilder().build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        UpdateTransactionDescriptor descriptor \u003d new UpdateTransactionDescriptorBuilder(editedTransaction).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(typeTransaction ,INDEX_FIRST_TRANSACTION, descriptor);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_TRANSACTION_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BankAccount(model.getBankAccount()), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        BankAccountOperation txn \u003d model.getFilteredTransactionList().get(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        expectedModel.set(txn, editedTransaction);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Index indexLastTransaction \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Transaction lastTransaction \u003d model.getFilteredTransactionList().get(indexLastTransaction.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankOperationBuilder transactionInList \u003d new BankOperationBuilder(lastTransaction);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // TODO : FIX"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Transaction editedTransaction \u003d transactionInList.withAmount(\"1\").withDate(\"1\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                .withCategories(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withCategories(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTransaction, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BankAccount(model.getBankAccount()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        expectedModel.set(lastTransaction, editedTransaction);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TRANSACTION, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Transaction editedTransaction \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BankAccount(model.getBankAccount()), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Transaction transactionInFilteredList \u003d model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                .getFilteredTransactionList()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                .get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // TODO: FIX"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Transaction editedTransaction \u003d new BankOperationBuilder(transactionInFilteredList).withAmount(\"1\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BankAccount(model.getBankAccount()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        expectedModel.set(model.getFilteredTransactionList().get(0), editedTransaction);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void execute_duplicateTransactionUnfilteredList_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Transaction firstTransaction \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstTransaction).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TRANSACTION, descriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void execute_duplicateTransactionFilteredList_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Transaction transactionInList \u003d model"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                .getBankAccount().getTransactionHistory().get(INDEX_SECOND_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                new EditPersonDescriptorBuilder(transactionInList).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void execute_invalidTransactionIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void execute_invalidTransactionIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBankAccount().getTransactionHistory().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TRANSACTION, DESC_AMY);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TRANSACTION, copyDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TRANSACTION, DESC_AMY)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TRANSACTION, DESC_BOB)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 7,
      "Berttwm": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateTransactionDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "// import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class UpdateTransactionDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // different categories -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withCategories(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.commands.ViewCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void execute_viewBudget_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new CommandResult(MESSAGE_SUCCESS, false, false, Tab.BUDGET);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(new ViewCommand(Tab.BUDGET), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void execute_viewTransaction_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new CommandResult(MESSAGE_SUCCESS, false, false, Tab.TRANSACTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertCommandSuccess(new ViewCommand(Tab.TRANSACTION), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ViewCommand viewTransaction \u003d new ViewCommand(Tab.TRANSACTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ViewCommand viewBudget \u003d new ViewCommand(Tab.BUDGET);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ViewCommand viewLedger \u003d new ViewCommand(Tab.LEDGER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(viewTransaction.equals(viewTransaction));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(viewBudget.equals(viewBudget));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(viewTransaction.equals(new ViewCommand(Tab.TRANSACTION)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(viewTransaction.equals(viewBudget));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(viewTransaction.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different view -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(viewBudget.equals(viewLedger));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(viewTransaction.equals(viewBudget));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/comparator/AmountComparatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class AmountComparatorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private AmountComparator amountComparator \u003d new AmountComparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void compare_equalToBenson_returnsTrue() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(amountComparator.compare(BENSON, BENSON) \u003d\u003d 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void compare_lessThanBenson_returnsTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(amountComparator.compare(BENSON, ALICE) \u003e 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void compare_lessThanBenson_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(amountComparator.compare(BENSON, CARL) \u003e 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void compare_nullBankAccountOperations_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e amountComparator.compare(null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void equals_sameIdentityAmountComparator_isEqual() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(amountComparator, new AmountComparator());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/comparator/DateComparatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class DateComparatorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private DateComparator dateComparator \u003d new DateComparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void compare_equalToBenson_returnsTrue() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(dateComparator.compare(BENSON, BENSON) \u003d\u003d 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void compare_lessThanBenson_returnsTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(dateComparator.compare(BENSON, ALICE) \u003e 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void compare_lessThanBenson_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(dateComparator.compare(BENSON, CARL) \u003e 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void compare_nullBankAccountOperations_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e dateComparator.compare(null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void equals_sameIdentityAmountComparator_isEqual() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(dateComparator, new DateComparator());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withCategories(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // multiple categories - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withCategories(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // zero categories"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withCategories().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joloong"
        },
        "content": "            + INVALID_TAG_DESC + VALID_TAG_FRIEND, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 8,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String argsString \u003d \"  some random string /c category with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import static seedu.address.testutil.TypicalTypes.TYPE_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assertParseSuccess(parser, \"t1\", new DeleteCommand(TYPE_TRANSACTION, INDEX_FIRST_TRANSACTION));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 2,
      "joloong": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Category.MESSAGE_CONSTRAINTS); // invalid category"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // while parsing {@code PREFIX_CATEGORY} alone will reset the categories of the {@code Person} being edited,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // parsing it together with a valid category results in error"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "            + VALID_ADDRESS_AMY + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .withCategories(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // categories"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joloong"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withCategories(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .withCategories(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joloong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withCategories().build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 4,
      "joloong": 31,
      "-": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.TransactionContainsCategoriesPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "                new FilterCommand(new TransactionContainsCategoriesPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFilterCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFilterCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MainParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTypes.TYPE_TRANSACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.InCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.OutCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ProjectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ReceiveCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.SplitCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.TransactionContainsCategoriesPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "// TODO: ADD ALL THE COMMANDS"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class MainParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final MainParser parser \u003d new MainParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_split() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(SplitCommand.COMMAND_WORD + \" $/69 n/John\") instanceof SplitCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "            SplitCommand.COMMAND_WORD + \" $/69 n/John n/Lisa s/2 s/3\") instanceof SplitCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "            SplitCommand.COMMAND_WORD + \" $/69 n/John n/Lisa s/1 s/2 s/3\") instanceof SplitCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_receive() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(ReceiveCommand.COMMAND_WORD + \" $/69 n/John\") instanceof ReceiveCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_in() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "            InCommand.COMMAND_WORD + \" $/69 n/John d/19112019\") instanceof InCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "            InCommand.COMMAND_WORD + \" $/69 n/John d/19112019 c/Food\") instanceof InCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "            InCommand.COMMAND_WORD + \" $/69 n/John d/19112019 c/Food c/Drink\") instanceof InCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_out() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "            OutCommand.COMMAND_WORD + \" $/69 n/John d/21032019\") instanceof OutCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "            OutCommand.COMMAND_WORD + \" $/69 n/John d/21032019 c/Food\") instanceof OutCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "            OutCommand.COMMAND_WORD + \" $/69 n/John d/21032019 c/Drink\") instanceof OutCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_set() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "            SetCommand.COMMAND_WORD + \" $/69 d/31122019\") instanceof SetCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "            SetCommand.COMMAND_WORD + \" $/69 d/31122019 c/Food\") instanceof SetCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_project() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "            ProjectCommand.COMMAND_WORD + \" d/31122019\") instanceof ProjectCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_filter() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(FilterCommand.COMMAND_WORD + \" food\") instanceof FilterCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "        FilterCommand command \u003d (FilterCommand) parser.parseCommand("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": "            FilterCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(new FilterCommand(new TransactionContainsCategoriesPredicate(keywords)), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" amount\") instanceof SortCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" date\") instanceof SortCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_undo() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" tmr\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_redo() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" later\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(ViewCommand.COMMAND_WORD + \" transaction\") instanceof ViewCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(ViewCommand.COMMAND_WORD + \" budget\") instanceof ViewCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(ViewCommand.COMMAND_WORD + \" ledger\") instanceof ViewCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_update() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(UpdateCommand.COMMAND_WORD + \" t1 $/69\") instanceof UpdateCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(UpdateCommand.COMMAND_WORD + \" b1 $/69\") instanceof UpdateCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joloong"
        },
        "content": "            UpdateCommand.COMMAND_WORD + \" t1 $/69 c/Food\") instanceof UpdateCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joloong"
        },
        "content": "            UpdateCommand.COMMAND_WORD + \" t1 $/69 c/Food d/19112019\") instanceof UpdateCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joloong"
        },
        "content": "            UpdateCommand.COMMAND_WORD + \" t1 $/69 c/Food d/19112019 n/KFC\") instanceof UpdateCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joloong"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joloong"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + TYPE_TRANSACTION + INDEX_FIRST_TRANSACTION.getOneBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(new DeleteCommand(TYPE_TRANSACTION, INDEX_FIRST_TRANSACTION), command);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joloong"
        },
        "content": "            HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 176,
      "dingyuchen": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "            MESSAGE_INVALID_INDEX, () -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assertEquals(INDEX_FIRST_TRANSACTION, ParserUtil.parseIndex(\"t1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        assertEquals(INDEX_FIRST_TRANSACTION, ParserUtil.parseIndex(\"  t1\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseType((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseType(\"\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseType_validValue_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(\"b\", ParserUtil.parseType(\"b1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseNames_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNames(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseNames_collectionWithInvalidNames_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNames(Arrays.asList(\"John\", \"Doe!\")));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseNames_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(ParserUtil.parseNames(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseNames_collectionWithValidNames_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cName\u003e validNames \u003d ParserUtil.parseNames(Arrays.asList(\"John\", \"Doe\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(validNames, ParserUtil.parseNames(Arrays.asList(\"John\", \"Doe\")));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory(null));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_TAG));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_TAG_1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_TAG_1));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_TAG_1);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(tagWithWhitespace));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCategories_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategories(null));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCategories_collectionWithInvalidCategories_throwsParseException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategories(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCategories_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(ParserUtil.parseCategories(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseCategories_collectionWithValidCategories_returnsCategorySet() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Set\u003cCategory\u003e actualCategorySet \u003d ParserUtil.parseCategories(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Set\u003cCategory\u003e expectedCategorySet \u003d new HashSet\u003cCategory\u003e(Arrays.asList(new Category(VALID_TAG_1),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new Category(VALID_TAG_2)));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedCategorySet, actualCategorySet);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription(null));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseDescription_invalidDescription_throwsParseException() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(\"!loveyou!\"));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Description expectedDescription \u003d new Description(\"milk\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(\"milk\"));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Description expectedDescription \u003d new Description(\"milk\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(WHITESPACE + \"milk\" + WHITESPACE));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseDate_invalidDate_throwsParseException() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(\"21/03/2019\"));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Date expectedDate \u003d new Date(\"21032019\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(\"21032019\"));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Date expectedDate \u003d new Date(\"19112019\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(WHITESPACE + \"19112019\" + WHITESPACE));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseShares_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseShares(null));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseShares_invalidShares_throwsParseException() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cString\u003e invalidShares \u003d new ArrayList\u003c\u003e(Arrays.asList(\"hello\", \"world\"));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseShares(invalidShares));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseShares_validValueWithoutWhitespace_returnsList() throws Exception {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cString\u003e validShares \u003d new ArrayList\u003c\u003e(Arrays.asList(\"1\", \"2\"));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cInteger\u003e expectedValidShares \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 2));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedValidShares, ParserUtil.parseShares(validShares));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount(null));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseAmount_invalidAmount_throwsParseException() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(\"$100.00\"));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(\"100.005\"));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseAmount_validPositiveValue_returnsAmount() throws Exception {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Amount expectedPositiveAmount \u003d new Amount(10.00);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedPositiveAmount, ParserUtil.parseAmount(\"10.00\"));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseAmount_validNegativeValue_returnsAmount() throws Exception {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Amount expectedNegativeAmount \u003d new Amount(-10.00);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedNegativeAmount, ParserUtil.parseAmount(\"-10.00\"));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseBudgetIndex_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBudgetIndex(null));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseBudgetIndex_invalidZeroValue_throwsParseException() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBudgetIndex(\"0\"));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseBudgetIndex_invalidNegativeValue_throwsParseException() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBudgetIndex(\"-1\"));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parseBudgetIndex_validPositiveValue_returnsBudgetIndex() throws Exception {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(index, ParserUtil.parseBudgetIndex(\"1\"));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 2,
      "joloong": 157,
      "-": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.comparator.AmountComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.comparator.DateComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parse_validArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        SortCommand expectedAmountSortCommand \u003d new SortCommand(new AmountComparator());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        SortCommand expectedDateSortCommand \u003d new SortCommand(new DateComparator());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"amount\", expectedAmountSortCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"date\", expectedDateSortCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // leading and trailing whitespaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"   amount   \", expectedAmountSortCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"   date   \", expectedDateSortCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.ui.tab.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // invalid"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseFailure(parser, \"invalid\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ViewCommand viewTransaction \u003d new ViewCommand(Tab.TRANSACTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ViewCommand viewBudget \u003d new ViewCommand(Tab.BUDGET);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ViewCommand viewLedger \u003d new ViewCommand(Tab.LEDGER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"transaction\", viewTransaction);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"budget\", viewBudget);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"ledger\", viewLedger);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // leading and trailing whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"   transaction   \", viewTransaction);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"   budget      \", viewBudget);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"        ledger         \", viewLedger);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // upper and lower case"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"TrAnSaCtIoN\", viewTransaction);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"bUdGeT\", viewBudget);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertParseSuccess(parser, \"   lEdGer   \", viewLedger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BankAccountTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalUserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateTransactionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.testutil.BankOperationBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class BankAccountTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private final BankAccount bankAccount \u003d new BankAccount();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertEquals(Collections.emptyList(), bankAccount.getTransactionHistory());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertEquals(Collections.emptyList(), bankAccount.getBudgetHistory());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e bankAccount.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void resetData_withValidReadOnlyBankAccount_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ReadOnlyBankAccount newData \u003d getTypicalUserState().getBankAccount();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        bankAccount.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertEquals(newData, bankAccount);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void resetData_withDuplicateTransactions_throwsDuplicateTransactionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        // Two transactions with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation editedAlice \u003d new BankOperationBuilder(ALICE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        List\u003cBankAccountOperation\u003e newTransactions \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountStub newData \u003d new BankAccountStub(newTransactions);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertThrows(DuplicateTransactionException.class, () -\u003e bankAccount.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // TODO: implement test for budget during copying"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // public  void resetData_withDuplicateBudget_throwsDuplicateBudgetException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void hasTransaction_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e bankAccount.has((BankAccountOperation) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e bankAccount.has((Budget) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void hasTransaction_transactionNotInBankAccount_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(bankAccount.has(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void hasTransaction_transactionInBankAccount_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        bankAccount.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(bankAccount.has(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void hasTransaction_transactionWithSameIdentityFieldsInBankAccount_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        bankAccount.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation editedAlice \u003d new BankOperationBuilder(ALICE)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(bankAccount.has(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void getTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            bankAccount.getTransactionHistory().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * A stub ReadOnlyBankAccount whose transactions list can violate interface constraints."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static class BankAccountStub implements ReadOnlyBankAccount {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": "        private final ObservableList\u003cBankAccountOperation\u003e transactions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        private final ObservableList\u003cBudget\u003e budget \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        private Amount balance \u003d Amount.zero();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": "        BankAccountStub(Collection\u003cBankAccountOperation\u003e transactions) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "            this.transactions.setAll(transactions);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public ObservableList\u003cBankAccountOperation\u003e getTransactionHistory() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return transactions;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public ObservableList\u003cBankAccountOperation\u003e getSortedTransactionHistory(Comparator\u003cBankAccountOperation\u003e t) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public Amount getBalance() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return balance;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joloong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joloong"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetHistory() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return budget;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        public boolean has(Budget budget) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 87,
      "dingyuchen": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/DateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // null Date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValid(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // invalid Date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertFalse(Date.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertFalse(Date.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertFalse(Date.isValid(\"abc\")); // alphabet only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertFalse(Date.isValid(\"^!\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertFalse(Date.isValid(\"1921*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertFalse(Date.isValid(\"3022019\")); // not in correct format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertFalse(Date.isValid(\"00012019\")); // not a valid date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // valid Date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertTrue(Date.isValid(\"19112019\")); // numerical digits only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        assertTrue(Date.isValid(\"01012069\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Date firstDate \u003d new Date(\"21032019\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Date secondDate \u003d new Date(\"19112019\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(firstDate.equals(firstDate));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(firstDate.equals(new Date(\"21032019\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstDate.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstDate.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different Date -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstDate.equals(secondDate));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 52,
      "dingyuchen": 2,
      "wallacelim97": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.TransactionContainsCategoriesPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.testutil.UserStateBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(new BankAccount(), new BankAccount(modelManager.getBankAccount()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        userPrefs.setUserStateFilePath(Paths.get(\"bank/account/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        userPrefs.setUserStateFilePath(Paths.get(\"new/bank/account/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setBankAccountFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserStateFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setBankAccountFilePath_validPath_setsBankAccountFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Path path \u003d Paths.get(\"bank/account/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        modelManager.setUserStateFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(path, modelManager.getUserStateFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void hasTransaction_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.has((BankAccountOperation) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void hasTransaction_transactionNotInBankAccount_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(modelManager.has(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void hasTransaction_transactionInBankAccount_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        modelManager.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(modelManager.has(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void getFilteredTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .getFilteredTransactionList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UserState userState \u003d new UserStateBuilder().withTransaction(ALICE).withTransaction(BENSON).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UserState differentUserState \u003d new UserState();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        modelManager \u003d new ModelManager(userState, userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(userState, userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different bankAccount -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentUserState, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final List\u003cString\u003e categories \u003d ALICE"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .getCategories()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .map(category -\u003e category.getCategoryName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joloong"
        },
        "content": "        modelManager.updateFilteredTransactionList(new TransactionContainsCategoriesPredicate(categories));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(userState, userPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joloong"
        },
        "content": "        modelManager.updateFilteredTransactionList(Model.PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        differentUserPrefs.setUserStateFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(userState, differentUserPrefs)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 32,
      "dingyuchen": 14,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // null Time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // invalid Time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(Time.isValidTime(\"abc\")); // alphabet only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(Time.isValidTime(\"^!\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(Time.isValidTime(\"1921*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(Time.isValidTime(\"191\")); // not in correct format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(Time.isValidTime(\"6969\")); // not a valid time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // valid Time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(Time.isValidTime(\"0000\")); // numerical digits only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(Time.isValidTime(\"2359\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Time firstTime \u003d new Time(\"2119\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Time secondTime \u003d new Time(\"1921\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(firstTime.equals(firstTime));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(firstTime.equals(new Time(\"2119\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstTime.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstTime.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstTime.equals(secondTime));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 62,
      "dingyuchen": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setUserStateFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/category/CategoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidTagName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void getCategoryName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Category validCategory \u003d new Category(\"food\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(validCategory.getCategoryName().equals(\"food\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(validCategory.getCategoryName().equals(\"drink\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void isValidCategoryName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // null category name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategoryName(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Category firstCategory \u003d new Category(\"club\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Category secondCategory \u003d new Category(\"drink\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(firstCategory.equals(firstCategory));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(firstCategory.equals(new Category(\"club\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstCategory.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstCategory.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different Category -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstCategory.equals(secondCategory));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Category validCategory \u003d new Category(\"food\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(validCategory.toString().equals(\"[food]\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(validCategory.toString().equals(\"[drink]\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getCategories().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same name, different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .withCategories(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .withCategories(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withCategories(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withCategories(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 8,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withCategories(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withCategories(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 2,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/model/stubs/BankAccountStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.model.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.ReadOnlyBankAccount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.UniqueBudgetList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.UniqueTransactionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * Bank account of the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class BankAccountStub implements ReadOnlyBankAccount {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private Amount balance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private UniqueBudgetList budgets;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private UniqueTransactionList transactions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public BankAccountStub() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        balance \u003d Amount.zero();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        budgets \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        transactions \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public ObservableList\u003cBankAccountOperation\u003e getTransactionHistory() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public ObservableList\u003cBankAccountOperation\u003e getSortedTransactionHistory(Comparator\u003cBankAccountOperation\u003e t) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public Amount getBalance() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetHistory() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public boolean has(Budget budget) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/stubs/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.model.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.ReadOnlyBankAccount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * A default model stub that has all of the methods failing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public Path getUserStateFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void setUserStateFilePath(Path bankAccountFilePath) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void setUserState(ReadOnlyUserState bankAccount) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void add(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void add(LedgerOperation operation) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void add(Budget budget) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public ReadOnlyBankAccount getBankAccount() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public boolean canUndoUserState() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void undoUserState() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public boolean canRedoUserState() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void redoUserState() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void commitUserState() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void setTransactions(List\u003cBankAccountOperation\u003e transactionHistory) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public ReadOnlyUserState getUserState() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public boolean has(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public boolean has(Budget budget) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be calld.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public boolean has(LedgerOperation ledgerOperation) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be calld.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void deleteTransaction(BankAccountOperation target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void setTransaction(BankAccountOperation target, BankAccountOperation editedTransaction) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void setBudget(Budget budgetTarget, Budget budgetEdit) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public FilteredList\u003cBankAccountOperation\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cBankAccountOperation\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void updateFilteredLedgerList(Predicate\u003cLedgerOperation\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public void deleteBudget(Budget budgetToDelete) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public ObservableList\u003cLedgerOperation\u003e getFilteredLedgerOperationsList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/AmountTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private static final Amount ZERO \u003d new Amount(0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private static final Amount ONE \u003d new Amount(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void amountConstructor_overBoundary_throwsException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(Amount.UNSIGNED_INT_LIMIT + 1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void isWithinLimits_withinLimits_true() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(Amount.isWithinLimits(Amount.UNSIGNED_INT_LIMIT));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(Amount.isWithinLimits(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(Amount.isWithinLimits(1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(Amount.isWithinLimits(-1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(Amount.isWithinLimits(-Amount.UNSIGNED_INT_LIMIT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void isWithinLimits_overLimits_false() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(Amount.isWithinLimits(Amount.UNSIGNED_INT_LIMIT + 1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(Amount.isWithinLimits(-Amount.UNSIGNED_INT_LIMIT - 1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void isValidAmount_validAmount_true() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(Amount.isValidAmount(12.34));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(Amount.isValidAmount(12.04));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(Amount.isValidAmount(10.20));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(Amount.isValidAmount(12.4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(Amount.isValidAmount(1093284.0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(Amount.isValidAmount(1093284.00));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void isValidAmount_invalidAmount_false() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(Amount.isValidAmount(12.043));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(Amount.isValidAmount(12.0401));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(Amount.isValidAmount(10.999999999999999));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void byShare_validShares_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertEquals(ZERO, ONE.byShare(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertEquals(new Amount(10), new Amount(30).byShare(1.0 / 3));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void byShare_invalidShares_throwsException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e ONE.byShare(-1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 4,
      "dingyuchen": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/BudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/LendMoneyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.testutil.LedgerOperationBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class LendMoneyTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void handleBalance_validArguments_updatesBalance() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Person joel \u003d new PersonBuilder().withName(LedgerOperationBuilder.DEFAULT_NAME1).withAmount(\"100\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        LedgerOperationBuilder lob \u003d new LedgerOperationBuilder();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UniquePersonList list \u003d lob.getPeople();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        LedgerOperation lendJoel100 \u003d lob.withAmount(\"100\").withPerson(joel).addPerson(joel).asLendMoney();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertEquals(lendJoel100.handleBalance(Amount.of(100), list), Amount.zero());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertEquals(Amount.of(200), joel.getBalance());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void handleBalance_invalidPerson_throwsMismatchException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/ReceiveMoneyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.testutil.LedgerOperationBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class ReceiveMoneyTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void handleBalance_validArguments_updatesBalance() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Person joel \u003d new PersonBuilder().withName(LedgerOperationBuilder.DEFAULT_NAME1).withAmount(\"100\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        LedgerOperationBuilder lob \u003d new LedgerOperationBuilder();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UniquePersonList list \u003d lob.getPeople();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        LedgerOperation takeJoel100 \u003d lob.withAmount(\"100\").withPerson(joel).addPerson(joel).asLendMoney();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        //        assertEquals(lendJoel100.handleBalance(Amount.of(100), list), Amount.zero());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        //        assertEquals(Amount.of(200), joel.getBalance());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void handleBalance_invalidPerson_throwsMismatchException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 1,
      "dingyuchen": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/SplitTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class SplitTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //TODO: implement stub"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void handleBalance_validArguments_updatesBalance(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //TODO: implement stub"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void constructor_noShares_splitAmountEvenly() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/TransactionContainsCategoriesPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.testutil.BankOperationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class TransactionContainsCategoriesPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        TransactionContainsCategoriesPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new TransactionContainsCategoriesPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        TransactionContainsCategoriesPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new TransactionContainsCategoriesPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        TransactionContainsCategoriesPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new TransactionContainsCategoriesPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void test_categoryContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        TransactionContainsCategoriesPredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new TransactionContainsCategoriesPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(predicate.test(new BankOperationBuilder().withCategories(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        predicate \u003d new TransactionContainsCategoriesPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(predicate.test(new BankOperationBuilder().withCategories(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        predicate \u003d new TransactionContainsCategoriesPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(predicate.test(new BankOperationBuilder().withCategories(\"Alice\", \"Carol\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        predicate \u003d new TransactionContainsCategoriesPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertTrue(predicate.test(new BankOperationBuilder().withCategories(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void test_tagDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "        TransactionContainsCategoriesPredicate predicate \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new TransactionContainsCategoriesPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(predicate.test(new BankOperationBuilder().withCategories(\"Alice\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "        predicate \u003d new TransactionContainsCategoriesPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(predicate.test(new BankOperationBuilder().withCategories(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // Keywords match amount and date, but does not match category"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        predicate \u003d new TransactionContainsCategoriesPredicate(Arrays.asList(\"12345\", \"19112019\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertFalse(predicate.test(new BankOperationBuilder().withCategories(\"Alice\").withAmount(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .withDate(\"19112019\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 74,
      "dingyuchen": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/UniqueTransactionListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateTransactionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.testutil.BankOperationBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class UniqueTransactionListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final UniqueTransactionList uniqueTransactionList \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void contains_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTransactionList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void contains_transactionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(uniqueTransactionList.contains(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void contains_transactionInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.add(ALICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(uniqueTransactionList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void contains_transactionWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation editedAlice \u003d new BankOperationBuilder(ALICE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertTrue(uniqueTransactionList.contains(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void add_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTransactionList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void add_duplicateTransaction_throwsDuplicateTransactionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.add(ALICE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(DuplicateTransactionException.class, () -\u003e uniqueTransactionList.add(ALICE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setTransaction_nullTargetTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTransactionList.setTransaction(null, ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setTransaction_nullEditedTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTransactionList.setTransaction(ALICE, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setTransaction_targetTransactionNotInList_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e uniqueTransactionList.setTransaction(ALICE, ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setTransaction_editedTransactionIsSameTransaction_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.add(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.setTransaction(ALICE, ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        UniqueTransactionList expectedUniqueTransactionList \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedUniqueTransactionList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedUniqueTransactionList, uniqueTransactionList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setTransaction_editedTransactionHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccountOperation editedAlice \u003d new BankOperationBuilder(ALICE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.setTransaction(ALICE, editedAlice);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "        UniqueTransactionList expectedUniqueTransactionList \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedUniqueTransactionList.add(editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedUniqueTransactionList, uniqueTransactionList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setTransaction_editedTransactionHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.setTransaction(ALICE, BENSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": "        UniqueTransactionList expectedUniqueTransactionList \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedUniqueTransactionList.add(BENSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedUniqueTransactionList, uniqueTransactionList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setTransaction_editedTransactionHasNonUniqueIdentity_throwsDuplicateTransactionException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.add(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.add(BENSON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(DuplicateTransactionException.class, () -\u003e uniqueTransactionList.setTransaction(ALICE, BENSON));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void remove_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTransactionList.remove(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void remove_transactionDoesNotExist_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e uniqueTransactionList.remove(ALICE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void remove_existingTransaction_removesTransaction() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.add(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.remove(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joloong"
        },
        "content": "        UniqueTransactionList expectedUniqueTransactionList \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedUniqueTransactionList, uniqueTransactionList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void setTransactions_nullUniqueTransactionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                uniqueTransactionList.setTransactions((List\u003cBankAccountOperation\u003e) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void setTransactions_uniqueTransactionList_replacesOwnListWithProvidedUniqueTransactionList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        uniqueTransactionList.add(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UniqueTransactionList expectedUniqueTransactionList \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        expectedUniqueTransactionList.add(BENSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        uniqueTransactionList.setTransactions(expectedUniqueTransactionList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertEquals(expectedUniqueTransactionList, uniqueTransactionList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public void setTransactions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "                        uniqueTransactionList.setTransactions((List\u003cBankAccountOperation\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setTransactions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.add(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cBankAccountOperation\u003e transactionList \u003d Collections.singletonList(BENSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joloong"
        },
        "content": "        uniqueTransactionList.setTransactions(transactionList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joloong"
        },
        "content": "        UniqueTransactionList expectedUniqueTransactionList \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joloong"
        },
        "content": "        expectedUniqueTransactionList.add(BENSON);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(expectedUniqueTransactionList, uniqueTransactionList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setTransactions_listWithDuplicateTransactions_throwsDuplicateTransactionException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cBankAccountOperation\u003e listWithDuplicateTransactions \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(DuplicateTransactionException.class, () -\u003e uniqueTransactionList"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joloong"
        },
        "content": "                .setTransactions(listWithDuplicateTransactions));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueTransactionList"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            .remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 145,
      "dingyuchen": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final List\u003cJsonAdaptedCategory\u003e VALID_TAGS \u003d BENSON.getCategories().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "            .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cJsonAdaptedCategory\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": "        invalidTags.add(new JsonAdaptedCategory(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 4,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableBankAccountTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.UserState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class JsonSerializableBankAccountTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .get(\"src\", \"test\", \"data\", \"JsonSerializableUserStateTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final Path TYPICAL_TRANSACTIONS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .resolve(\"typicalTransactionsUserState.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final Path INVALID_TRANSACTION_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .resolve(\"invalidTransactionUserState.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final Path DUPLICATE_TRANSACTION_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .resolve(\"duplicateTransactionUserState.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void toModelType_typicalTransactionsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        JsonSerializableBankAccount dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TRANSACTIONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "            JsonSerializableBankAccount.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UserState bankAccountFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UserState typicalTransactionsBankAccount \u003d TypicalTransactions.getTypicalUserState();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(bankAccountFromFile, typicalTransactionsBankAccount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void toModelType_invalidTransactionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        JsonSerializableBankAccount dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TRANSACTION_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "            JsonSerializableBankAccount.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void toModelType_duplicateTransactions_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        JsonSerializableBankAccount dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TRANSACTION_FILE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "            JsonSerializableBankAccount.class).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableBankAccount.MESSAGE_DUPLICATE_TRANSACTION,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 44,
      "dingyuchen": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "        userPrefs.setUserStateFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 5,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserStateStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.ReadOnlyUserState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.UserState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class JsonUserStateStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .get(\"src\", \"test\", \"data\", \"JsonUserStateStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void readUserState_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserState(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private java.util.Optional\u003cReadOnlyUserState\u003e readUserState(String filePath) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new JsonUserStateStorage(Paths.get(filePath)).readUserState(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertFalse(readUserState(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // TODO:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //     assertThrows(DataConversionException.class, () -\u003e readUserState(\"notJsonFormatUserState.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // TODO:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // public void readUserState_invalidTransactionUserState_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //     assertThrows(DataConversionException.class, () -\u003e readUserState(\"invalidTransactionUserState.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // TODO:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // public void readUserState_invalidAndValidTransactionUserState_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //     assertThrows("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //         DataConversionException.class, () -\u003e readUserState(\"invalidAndValidTransactionUserState.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // public void readAndSaveUserState_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     Path filePath \u003d testFolder.resolve(\"TempUserState.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     UserState original \u003d getTypicalUserState();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     JsonUserStateStorage jsonUserStateStorage \u003d new JsonUserStateStorage(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     jsonUserStateStorage.saveUserState(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     ReadOnlyUserState readBack \u003d jsonUserStateStorage.readUserState(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertEquals(original, new UserState(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //     original.add(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //     original.remove(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     jsonUserStateStorage.saveUserState(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     readBack \u003d jsonUserStateStorage.readUserState(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertEquals(original, new UserState(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //     original.add(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     jsonUserStateStorage.saveUserState(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     readBack \u003d jsonUserStateStorage.readUserState().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     assertEquals(original, new UserState(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void saveUserState_nullUserState_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserState(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Saves {@code bankAccount} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private void saveUserState(ReadOnlyUserState bankAccount, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "            new JsonUserStateStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": "                .saveUserState(bankAccount, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void saveUserState_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserState(new UserState(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 91,
      "dingyuchen": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        JsonUserStateStorage userStateStorage \u003d new JsonUserStateStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        storageManager \u003d new StorageManager(userStateStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * {@link JsonBankAccountStorage} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * More extensive testing of UserPref saving/reading is done in {@link JsonBankAccountStorageTest} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void bankAccountReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        BankAccount original \u003d getTypicalUserState();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        storageManager.saveAccount(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        ReadOnlyBankAccount retrieved \u003d storageManager.readAccount().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(original, new BankAccount(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void getBankAccountFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertNotNull(storageManager.getUserStateFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 11,
      "dingyuchen": 3,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BankOperationBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.transaction.InTransaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.OutTransaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": " * A utility class to help with building Transaction objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class BankOperationBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"100\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"10102019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"category\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"milk\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public BankOperationBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        amount \u003d new Amount(Double.parseDouble(DEFAULT_AMOUNT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        categories.add(new Category(DEFAULT_CATEGORY));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Initializes the BankOperationBuilder with the data of {@code transactionToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public BankOperationBuilder(BankAccountOperation transactionToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        amount \u003d transactionToCopy.getAmount();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        date \u003d transactionToCopy.getDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        description \u003d transactionToCopy.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e(transactionToCopy.getCategories());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Sets the {@code amount} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public BankOperationBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.amount \u003d new Amount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * and set it to the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public BankOperationBuilder withCategories(String... categories) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.categories \u003d SampleDataUtil.getCategorySet(categories);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Sets the {@code date} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public BankOperationBuilder withDate(String date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Sets the {@code description} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public BankOperationBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Builds BankOperation of InTransaction or OutTransaction"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public BankAccountOperation build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        if (amount.isNegative()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new OutTransaction(amount, date, description, categories);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return new InTransaction(amount, date, description, categories);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 67,
      "dingyuchen": 12,
      "wallacelim97": 2,
      "Berttwm": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BudgetBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * A utility class to help with building Budget objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class BudgetBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"10102019\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public BudgetBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        amount \u003d new Amount(Double.parseDouble(DEFAULT_AMOUNT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Initializes the BudgetBuilder with the data of {@code budgetToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public BudgetBuilder(Budget budgetToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        amount \u003d budgetToCopy.getBudget();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        date \u003d budgetToCopy.getDeadline();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e(budgetToCopy.getCategories());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Sets the {@code amount} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public BudgetBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.amount \u003d new Amount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * and set it to the {@code Budget} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public BudgetBuilder withCategories(String... categories) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.categories \u003d SampleDataUtil.getCategorySet(categories);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     * Sets the {@code Date} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public BudgetBuilder withDate(String date) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    // TODO: Change constructor"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public Budget build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "        return new Budget(amount, date, categories);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LedgerOperationBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LendMoney;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.ReceiveMoney;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Split;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Utility class to build {@code Split}, {@code LendMoney} and {@code ReceiveMoney} operations"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class LedgerOperationBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"100\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"10102019\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"kbbq dinner\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String DEFAULT_NAME1 \u003d \"Joel Loong\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String DEFAULT_NAME2 \u003d \"Diung YUchen\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final String DEFAULT_NAME3 \u003d \"Bertrand\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private UniquePersonList people;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperationBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        amount \u003d new Amount(Double.parseDouble(DEFAULT_AMOUNT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        person \u003d new Person(new Name(DEFAULT_NAME1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        people \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Initializes the LedgerOperationBuildre with the data of {@code toCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperationBuilder(LedgerOperation toCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        amount \u003d toCopy.getAmount();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        description \u003d toCopy.getDescription();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        date \u003d toCopy.getDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Sets the {@code amount} of the {@code LedgerOperation} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperationBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.amount \u003d new Amount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Sets the {@code date} of the {@code LedgerOperation} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperationBuilder withDate(String date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Sets the {@code description} of the {@code LedgerOperation} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperationBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Sets the {@code target} of the {@code LedgerOperation} that we are building"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * as a new Person with {@code name}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperationBuilder withPerson(String name) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.person \u003d new Person(new Name(name));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Sets the {@code target} of the {@code LedgerOperation} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperationBuilder withPerson(Person bob) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.person \u003d bob;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Adds a new {@code Person} with {@code name} into the {@code UniquePersonList}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * of the {@code LedgerOperation} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperationBuilder addPerson(String name) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        Person person \u003d new Person(new Name(name));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this.addPerson(person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Adds a {@code Person} into the {@code UniquePersonList} of the {@code LedgerOperation} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperationBuilder addPerson(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        people.add(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public UniquePersonList getPeople() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return people;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Builds Split Transaction"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperation asSplit(int... shares) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        List\u003cInteger\u003e shareList \u003d Arrays.stream(shares).boxed().collect(Collectors.toList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        assert shareList.size() \u003d\u003d people.size() : \"shares cannot be split equally among people\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return new Split(amount, date, description, shareList, people);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Builds LendMoney Transaction"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperation asLendMoney() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return new LendMoney(person, amount, date, description);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Builds ReceiveMoney Transaction"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public LedgerOperation asReceiveMoney() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return new ReceiveMoney(person, amount, date, description);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        amount \u003d Amount.zero();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        amount \u003d personToCopy.getBalance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e(personToCopy.getCategories());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Sets the {@code balance} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public PersonBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.amount \u003d new Amount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public PersonBuilder withCategories(String... categories) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.categories \u003d SampleDataUtil.getCategorySet(categories);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return new Person(name, phone, email, address, categories, amount);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 7,
      "dingyuchen": 11,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "//TODO: REMOVE OR FIX?"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        person.getCategories().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "            s -\u003e sb.append(PREFIX_CATEGORY + s.categoryName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     if (descriptor.getCategories().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //         Set\u003cCategory\u003e categories \u003d descriptor.getCategories().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //         if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //             sb.append(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //         } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //             categories.forEach(s -\u003e sb.append(PREFIX_CATEGORY).append(s.categoryName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //         }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "    //     return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 20,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns the middle index of the transaction in the {@code model}\u0027s transaction list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTransactionList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns the last index of the transaction in the {@code model}\u0027s transaction list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns the transaction in the {@code model}\u0027s transaction list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static BankAccountOperation getTransaction(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return model.getFilteredTransactionList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 6,
      "dingyuchen": 3,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TransactionBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.InTransaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.OutTransaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " * A helper class for building Transactions for purposes of testing"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "public class TransactionBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"100\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"10102019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"category\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"milk\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public TransactionBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        amount \u003d new Amount(Double.parseDouble(DEFAULT_AMOUNT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        categories.add(new Category(DEFAULT_CATEGORY));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Initializes the TransactionBuilder with the data of {@code transactionToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public TransactionBuilder(Transaction transactionToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        amount \u003d transactionToCopy.getAmount();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        date \u003d transactionToCopy.getDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        description \u003d transactionToCopy.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e(transactionToCopy.getCategories());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Sets the {@code amount} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public seedu.address.testutil.TransactionBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.amount \u003d new Amount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * and set it to the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public seedu.address.testutil.TransactionBuilder withCategories(String... categories) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.categories \u003d SampleDataUtil.getCategorySet(categories);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Sets the {@code date} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public seedu.address.testutil.TransactionBuilder withDate(String date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Sets the {@code description} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public seedu.address.testutil.TransactionBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     * Builds BankOperation of InTransaction or OutTransaction"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    public Transaction build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        if (amount.isNegative()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return new OutTransaction(amount, date, description, categories);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "            return new InTransaction(amount, date, description, categories);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wallacelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wallacelim97": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final Index INDEX_FIRST_TRANSACTION \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final Index INDEX_SECOND_TRANSACTION \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static final Index INDEX_THIRD_TRANSACTION \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withCategories(\"friends\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withCategories(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withCategories(\"friends\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withCategories(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withCategories(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 8,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTransactions.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.UserState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.LedgerOperation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": " * A utility class containing a list of {@code Transaction} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class TypicalTransactions {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final BankAccountOperation ALICE \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withAmount(\"100\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDate(\"10112019\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDescription(\"milk\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withCategories(\"food\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final BankAccountOperation BENSON \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withAmount(\"200\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDate(\"11112019\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDescription(\"honey\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withCategories(\"breakfast\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final BankAccountOperation CARL \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withAmount(\"300\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDate(\"12112019\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDescription(\"chicken\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withCategories(\"dinner\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final BankAccountOperation DANIEL \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withAmount(\"400\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDate(\"13112019\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDescription(\"oil\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withCategories(\"drink\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final BankAccountOperation ELLE \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withAmount(\"500\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDate(\"14112019\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDescription(\"eggs\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withCategories(\"lunch\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final BankAccountOperation FIONA \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withAmount(\"600\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDate(\"15112019\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDescription(\"onion\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withCategories(\"club\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final BankAccountOperation GEORGE \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withAmount(\"700\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDate(\"16112019\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDescription(\"garlic\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withCategories(\"grocery\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final BankAccountOperation HOON \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withAmount(\"800\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDate(\"17112019\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDescription(\"rice\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static final BankAccountOperation IDA \u003d new BankOperationBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withAmount(\"900\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDate(\"18112019\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        .withDescription(\"noodle\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private TypicalTransactions() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns a {@code BankAccount} with all the typical persons."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static UserState getTypicalUserState() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UserState ba \u003d new UserState();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (BankAccountOperation op : getTypicalTransactions()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            ba.add(op);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return ba;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Returns a {@code BankAccount} with all the typical persons in unsorted amount order."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static UserState getTypicalUnsortedUserState() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        UserState unsortedBa \u003d new UserState();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (BankAccountOperation op : getTypicalUnsortedTransactions()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "            unsortedBa.add(op);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return unsortedBa;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static List\u003cBankAccountOperation\u003e getTypicalTransactions() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static List\u003cBankAccountOperation\u003e getTypicalUnsortedTransactions() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GEORGE, FIONA, ELLE, DANIEL, CARL, BENSON, ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //TODO: implement:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static List\u003cLedgerOperation\u003e getTypicalLedgerOperations() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    //TODO: implement:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public static List\u003cBudget\u003e getTypicalBudget() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 75,
      "dingyuchen": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTypes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yewon0303"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " * A utility class containing a list of {@code Types} to be used in tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yewon0303"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "public class TypicalTypes {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String TYPE_TRANSACTION \u003d \"t\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "    public static final String TYPE_BUDGET \u003d \"b\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UpdateTransactionDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateTransactionDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "import seedu.address.model.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " * A utility class to help with building UpdateTransactionDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Berttwm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "public class UpdateTransactionDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    private UpdateTransactionDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public UpdateTransactionDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        descriptor \u003d new UpdateTransactionDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public UpdateTransactionDescriptorBuilder(UpdateTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        this.descriptor \u003d new UpdateTransactionDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Returns an {@code UpdateTransactionDescriptor} with fields containing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * {@code BankAccountOperation}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public UpdateTransactionDescriptorBuilder(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        descriptor \u003d new UpdateTransactionDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        descriptor.setAmount(transaction.getAmount());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        descriptor.setDate(transaction.getDate());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        descriptor.setCategories(transaction.getCategories());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Sets the {@code Amount} of the {@code UpdateTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public UpdateTransactionDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        descriptor.setAmount(new Amount(Double.parseDouble(amount)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Sets the {@code Date} of the {@code UpdateTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public UpdateTransactionDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code UpdateTransactionDescriptor}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public UpdateTransactionDescriptorBuilder withCategories(String... categories) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        Set\u003cCategory\u003e categorySet \u003d Stream.of(categories).map(Category::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        descriptor.setCategories(categorySet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    public UpdateTransactionDescriptor build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Berttwm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Berttwm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Berttwm": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UserStateBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.UserState;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "import seedu.address.model.transaction.BankAccountOperation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * A utility class to help with building BankAccount objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " *     {@code BankAccount ba \u003d new UserStateBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "public class UserStateBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    private UserState userState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public UserStateBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        userState \u003d new UserState();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public UserStateBuilder(UserState bankAccount) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        this.userState \u003d bankAccount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * Adds a new {@code BankAccountOperation} to the {@code BankAccount} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     * @param transaction An operation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public UserStateBuilder withTransaction(BankAccountOperation transaction) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        userState.add(transaction);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    public UserState build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "        return userState;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingyuchen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingyuchen": 35
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yewon0303"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "yewon0303": 1,
      "-": 3
    }
  }
]
