[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "# Milestone v1.3"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Free Time"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "- [ ] Show Free Time"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "- [ ] Popup"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "- [ ] NusMods + GMaps"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "- [ ] Suggestion Params"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "- [ ] Calender Invite"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "- [ ] Test case(60%)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "- [ ] UG + DG"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "\u003d TimeBook"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T10-4/main[image:https://travis-ci.org/AY1920S1-CS2103T-T10-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T10-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T10-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "https://www.codacy.com/manual/AY1920S1-CS2103T-T10-4/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY1920S1-CS2103T-T10-4/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/6efe8b569efb4c928ba846a370d681e7[Codacy Badge]]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "* AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 2,
      "klementtan": 15,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    compile group: \u0027com.googlecode.json-simple\u0027, name: \u0027json-simple\u0027, version: \u00271.1\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    testImplementation \u0027org.awaitility:awaitility:4.0.1\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "klementtan": 2,
      "Alvinnyk": 2,
      "YiJiee": 3,
      "-": 155
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "TimeBook was developed by the https://github.com/AY1920S1-CS2103T-T10-4/[NUS School of Computing, AY1920S1 T10-4] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "We are a team based in the https://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d Aidil F"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::aidilfbk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "{empty}[https://github.com/aidilfbk[github]] [\u003c\u003caidilfbk#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Responsibilities: Command Suggestions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d Alvin Ng"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::alvinnyk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "{empty}[https://github.com/Alvinnyk[github]] [\u003c\u003calvinnyk#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Role: Documentation, In charge of `Model` +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Responsibilities: Free time identification, NUSMods API usage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d Marcus Ong"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::marqueurs404.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "{empty}[https://github.com/marqueurs404[github]] [\u003c\u003cmarqueurs404#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Role: Integration, In charge of `Storage` +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Responsibilities: (De)serialization"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d Klement Tan"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::klementtan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "{empty}[https://github.com/klementtan[github]] [\u003c\u003cklementtan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Role: Team Lead, In charge of `Storage` +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Responsibilities: Free location suggestion, Google Maps API usage"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d Lim Yi Jie"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::yijiee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "{empty}[https://github.com/YiJiee[github]] [\u003c\u003cyijiee#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Responsibilities: Schedule display"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "aidilfbk": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T10-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* *Email us* : You can also reach us at `ay1920s1-cs2103t-t10-4@nusu.onmicrosoft.com`"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "\u003d\u003d\u003d [Proposed] Finding Free Timeslot feature"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "The finding free timeslot feature is implemented by `ScheduleGenerator`. It generates the current `WeekSchedule` of a group and the common free timeslot among its members and updates the `ScheduleView` to be displayed to the user. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* `ScheduleGenerator#getFreeTimeslot()` -- Generates a `weekSchedule` of a group and updates the `ScheduleView`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#getFreeTimeslot()`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "Firstly, the `getFreeTimeslot()` method takes in as input an ArrayList of `Person` and updates the ScheduleView of the TimeBook. When the method is executed, it checks the schedule of each `Person` in the TimeBook and generates a new combined `WeekSchedule` of the whole list of `Person`. Also, only `TimeSlots` that are within the week are checked and put into the \u0027WeekSchedule\u0027. The generated `WeekSchedule` will then contain the individual schedules of each `Person` in the list for the week."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "After the `WeekSchedule` has been generated, the method now generates a new schedule of the free timeslots within the `WeekSchedule`. It checks the `WeekSchedule` and generates a new `FreeTimeSchedule` with contains all the timeslots in which there are no clashes with the `weekSchedule`. It also only generates `FreeTimeslots` for the week."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "Additionally, the generated `FreeTimeSchedule` also contains the information of the last venue the `Person` has been. This information is then used to calculate the closest location for all `Person` to meet."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "Finally, after generating the `WeekSchedule` and `FreeTimeSchedule`, it now updates the `ScheduleView` of `TimeBook`. This \u0027ScheduleView\u0027 is then displayed to the user through the UI."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "The following sequence diagram shows how the generateFreeTimeslot operation works:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "image::FindFreeTimeslotSequenceDiagram.png[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the `WeekSchedule` is generated and stored"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* **Alternative 1 (current choice):** Generates the `WeekSchedule` only when the `ShowGroup` command is executed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "** Pros: Saves memory space, and does not need to compute the `WeekSchedule` of every group upon startup."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "** Cons: May have performance issues in runtime as there is no preprocessing as the `WeekSchedule` is only generated when required."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* **Alternative 2:** Upon startup, generate each Group\u0027s `WeekSchedule` and store them within the `Group` object."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "** Pros: Better runtime performance as the `WeekSchedule` is already generated."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "** Cons: Will have perfomance issues in terms of memory usage. Each Group\u0027s `WeekSchedule` will also have to be updated whenever a `Person` is added, edited or deleted."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "// tag::suggestions[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "[#command-suggestions]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d Command Suggestions feature"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "The command suggestions mechanism is facilitated by `SuggestionLogic`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Through user-interface events provided by `SuggestingCommandBox`, it parses the command that was entered to provide context-sensitive suggestions."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "It does this by identifying the `commandWord` (e.g. `findperson`, `addperson`, etc.) and `arguments` provided (e.g. `n/Alice`, `g/CS2103T`) and by using the caret position, provides command suggestions if the caret is located within the `commandWord` section or provides argument-specific suggestions by delegating to the ``Suggester`` registered for the specific `commandWord`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Given below is an example usage scenario and how the command suggestions mechanism behaves at each step."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Step 1. The user types in the command `findperson n/|` and the `CommandSuggestionBox` UI class passes the command text (i.e. `findperson n/`) and the caret position index (i.e. 13) to `SuggestionLogic`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "NOTE: The vertical line/pipe character (i.e. `|`) denotes the position of the caret and is not part of the entered command itself. +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "So for the above example, the command entered is `findperson n/` with the caret at the end of the command."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::command-suggestions/Step1.svg[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Step 2. The `SuggestionLogic` asks the `AddressBookParser` to tokenize the command text into its two parts: the `commandWord` and the `arguments`. This is needed so the `SuggestionLogic` knows which `Suggester` to use later."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::command-suggestions/Step2.svg[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "[#command-suggestions-caret-within-arguments]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Step 3. The `SuggestionLogic` then checks where the caret is currently positioned, either within the `commandWord` or within the `arguments` section. In this case, the caret is placed after the `n/` so it is within the `arguments` section. link:#command-suggestions-caret-within-commandWord[To read how the behaviour changes if the caret was placed within the `commandWord` section, click here.]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::command-suggestions/Step3.svg[width\u003d50%]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Step 4. The `SuggestionLogic` asks the static `Suggester` class which ``Prefix``es are supported by the current `commandWord` (i.e. `findperson`) for tokenizing the `arguments`. This list of supported ``Prefix``es, together with the command `arguments`, are passed to the static `ArgumentTokenizer` to parse it into an `ArgumentList` containing ``CommandArgument``s. Each `CommandArgument` contains the type of `Prefix` and the user-entered value."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::command-suggestions/Step4.svg[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Step 5. The `SuggestionLogic` then asks the static `Suggester` class to create the relevant `Suggester` object based on the `commandWord`. In this case, the static `Suggester` class returns a new `FindPersonSuggester` because the `commandWord` is `findperson`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::command-suggestions/Step5.svg[]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Step 6. The `SuggestionLogic` asks the `ArgumentList` object which `CommandArgument` is currently selected based on the user\u0027s caret position. In this case, it is the `CommandArgument` with the `Prefix` of `PERSON_NAME` and `value` of an empty string because the caret is positioned within the `n/` text and no value has been entered."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::command-suggestions/Step6.svg[]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Step 7. The `SuggestionLogic` asks for the suggestions from the `FindPersonSuggester` by providing three things to it. First, the current `Model` object, second the previously parsed `ArgumentList` object and finally, the `CommandArgument` to provide suggestions for. After obtaining the list of suggestions, the `SuggestionLogic` class returns it to the `CommandSuggestionBox` UI class for display."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::command-suggestions/Step7.svg[]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "The following sequence diagram condenses all the above diagrams into one, given the input `findperson n/|`:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image:command-suggestions/FindPersonSequenceDiagram.svg[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "[#command-suggestions-caret-within-commandWord]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "The `SuggestionLogic` behaves differently when the caret position is within the `commandWord` section. The sequence diagram below shows the behaviour for the case of `find|person n/`. link:#command-suggestions-caret-within-arguments[To read how the behaviour changes if the caret was placed within the `arguments` section, click here.]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image:command-suggestions/SuggestingCommands.svg[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "The following activity diagram summarizes what happens when a user interacts with the command input box:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "image::command-suggestions/ActivityDiagram.svg[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How command suggestions gets its suggestions"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* **Alternative 1 (current choice):** Ask ``Suggester``s for suggestions every time anything changes"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "** Cons: May have performance issues in terms of CPU and memory usage as ``Suggester``s are created and run every time the command changes or the caret is moved."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* **Alternative 2:** Cache suggestions based on entered command and caret position"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "** Pros: Will use less CPU, may use less memory."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "** Cons: Difficult to properly account for all the conditions that should cause a cache invalidation/recalculation of suggestions."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to pass around the command arguments"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* **Alternative 1 (current choice):** Create an `ArgumentList` to store the ordered sequence of arguments."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "** Pros: Provides ``Suggester``s with flexibility in providing suggestions since the relative ordering of arguments is preserved. For example, it is possible to suggest different values for each `class/` argument based on the left-closest `mod/` argument for the following command: `addmod n/Alice mod/CS2103T class/ mod/CS2101 class/`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "** Cons: Increased complexity in extracting command arguments for simpler ``Suggester``s."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* **Alternative 2:** Reuse `ArgumentMultimap`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "** Pros: We do not need to maintain a separate data structure due to reuse, and developers familiar with how `ArgumentTokenizer.tokenize()` works for writing a `Command` can transfer their knowledge when writing ``Suggester``s for their own commands."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "** Cons: ``Suggester``s are restricted in terms of the flexibility of their suggestions, as they lack info about the relative ordering of all the arguments."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "// end::suggestions[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d\u003d Visual Representation of individual\u0027s or group\u0027s schedule"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "A separate class `ScheduleView` will be created to facilitate the creation of the schedule view belonging to individuals and groups."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Depending on the constructor used in this class, different types of schedules will be shown. There are two types of constructors:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `ScheduleView(WeekSchedule weekSchedule)` This constructor is used to construct a schedule view of an individual."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `ScheduleView(List\u003cWeekSchedule\u003e weekSchedules, List\u003cString\u003e colors, WeekSchedule freeSchedule)` This constructor is used to construct a schedule view of a group"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "These methods are used in the MainWindow class, where MainWindow will display instances of ScheduleView when various commands"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "are performed."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Given below is an example of how the Nodes (containers) in MainWindow changes with respect to the show command."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Step 1. After the user launches the application, the MainWindow will consist of 4 main Nodes: `CommandBox`, `TabsPanel`, `ResultDisplay` and `DefaultDetailWindow`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "image::VisualRepresentationCD0.png[]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Step 2a. Suppose the user has a friend named Ben in the application. The user executes `show n/ Ben` in order to view Ben\u0027s details"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "and his schedule. The state of MainWindow will now have another set of 4 Nodes: `CommandBox`, `ResultDisplay`, `ScheduleView` and `PersonDetailCard`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "image::VisualRepresentationCD1.png[]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Step 2b. Alternatively, suppose the user has a group named CS2103T team project. The user executes `show g/ CS2103T team project` in"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "order to view the group\u0027s schedule and information. The state of MainWindow will now have a different set of 4 Nodes: `CommandBox`, `ScheduleView`,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "`ResultDisplay` and `GroupInformation`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "image::VisualRepresentationCD2.png[]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "If the user keys in a name or group that is not present in the application, a CommandException will be thrown to indicate"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "that such name or group is not found in the application."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "The following sequence diagram shows how the show command eventually lead to changes in the UI to show the visual representation"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "of an individual\u0027s or group\u0027s schedule."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "image::VisualRepresentationSD0.png[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "image::VisualRepresentationSD1.png[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: User experience of the schedule view."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* **Alternative 1 (current choice):** Use a separate container for headers and schedule contents (table cells \u0026 blocks)."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Pros: User can read the schedule in our application a lot more easier."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Cons: Duplicated codes in the ScheduleView class to generate the separate containers."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* **Alternative 2:** A single container to contain the schedule view."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Pros: Easier to implement, lesser lines of codes."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Cons: UX will decrease due to increase difficulty to read schedules in the application."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Amount of detail present in schedule view."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* **Alternative 1:** Enable users to see schedules up to 1 week in advance."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Cons: Users may experience difficulty to plan meetings 2 or more weeks in advance."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* **Alternative 2 (current choice):** Enable users to see schedules up to 4 weeks in advance."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Pros: Most users will be able to plan most of their meetings. (Up to 1 month in advance)."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Cons: Slightly more challenging to implement in order to make sure that the schedule view is not cluttered."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Color schemes for time slot blocks in schedule view."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* **Alternative 1 (current choice):** Select 10 good contrast colours to dark theme for schedules."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Pros: More aesthetically pleasing to the user."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Cons: Groups that have more than 10 members will have the same colours for their schedule."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* **Alternative 2:** Randomly generate colours depending on group size."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Pros: All members in a group will very likely have different colours to indicate their schedule."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "** Cons: Schedules with darker colours cannot be seen from a dark theme UI."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "klementtan"
        },
        "content": "[[Implementation-ClosestLocation]]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "klementtan"
        },
        "content": "\u003d\u003d\u003d Closest Common Location(Micro Service)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Closest common location utilises Google Maps Api to get the closest common location among a group of various location in NUS."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "klementtan"
        },
        "content": "\u003d\u003d\u003d\u003d Definition"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "klementtan"
        },
        "content": "* Due to connectivity constraints, we cannot support location outside of NUS. All locations have to follow the spelling and format in NUSMods."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "klementtan"
        },
        "content": "* The closest location is the location that has the least average travelling time by car from the various sources."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "klementtan"
        },
        "content": "* All invalid location are omitted during as the source location will not be considered."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "klementtan"
        },
        "content": "\u003d\u003d\u003d\u003d Algorithm"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". Create a complete graph where the vertices are the different locations in NUS and edges are the respective travelling time by car from location `u` to `v`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". Represent this graph in a v x v matrix where `i` represents the source location and `j` represent destination location and `distanceMatrix[i][j]` represent the time needed to travel from `i` to `j`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". To get the closest common location of S1 ... Sn:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "klementtan"
        },
        "content": ".. Get the rows i \u003d S1 ... Sn"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "klementtan"
        },
        "content": ".. Sum the values of the rows to a new row `totalDistance`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "klementtan"
        },
        "content": ".. The smallest value in the row is the closest common location"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "klementtan"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Overview of the implementation"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "klementtan"
        },
        "content": "image::gmaps/GmapsArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "klementtan"
        },
        "content": "There are 3 main aspects to the implementation"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". External API"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". Creating the matrix"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". Getting the closest location"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "klementtan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d External API"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "To support the limited internet connection, we preprocess the relevant data and save it into the resources directory (See \u003c\u003cExternal APIs, External APIs\u003e\u003e)."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "klementtan"
        },
        "content": "\u003d\u003d\u003d\u003d Creating matrix"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "klementtan"
        },
        "content": "This is the sequence diagram for the creation of the matrix."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "klementtan"
        },
        "content": "image::gmaps/MatrixCreationSequenceDiagram.png[]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "klementtan"
        },
        "content": "*Brief overview*"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "klementtan"
        },
        "content": "The initialising of the matrix is broken into 2 steps. The first step is to get the list of locations in NUSMods and"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "klementtan"
        },
        "content": "checking against google maps API if that location is identifiable by google. The second step is to use the identifiable"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "klementtan"
        },
        "content": "location to construct the matrix."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "klementtan"
        },
        "content": "*Steps*"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". Check if the name of the location in NUSMods is identifiable on google maps"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "klementtan"
        },
        "content": ".. Call NUSMods api with `Cache#loadVenues`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "klementtan"
        },
        "content": ".. Sanitize the location name given by NUSMods by appending `NUS_` to the front and removing any characters after `-`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "klementtan"
        },
        "content": "as the room in the building does not matter"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". Construct matrix."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "klementtan"
        },
        "content": ".. Get the list of sanitized locations and split into blocks of 10. This is because Google Maps API constraint to"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "klementtan"
        },
        "content": "at most 10 x 10 matrix. Construct the n x n matrix by calling google maps Distance Matrix API."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "klementtan"
        },
        "content": "\u003d\u003d\u003d\u003d Getting closest location"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "klementtan"
        },
        "content": "This is the sequence diagram for when the method `Model.getClosestLocationData` and `Model.getClosestLocationString`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "klementtan"
        },
        "content": "image::gmaps/ClosestLocationSequenceDiagram.png[]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "// tag::nusmods[]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d Add NUSMods To Schedule"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "This feature allows users to add their NUSMods timetable (using the `AddNusModsCommand`) to their TimeBook schedules."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "The `AddNusModsCommand` can be executed by the user through the CLI with the following syntax `addmods n/NAME l/NUSMODS_SHARE_LINK`. The share link contains semester number, module codes and lesson numbers, which are used for creating and adding events to the person\u0027s schedule."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//The following class diagrams shows the structure of `Module` and `Event`:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//TODO: class diagram for Module and Event"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "The following sequence diagram shows what happens when `AddNusModsCommand` is executed:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "image::nusmods/AddNusModsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ". User enters `addmods n/NAME l/https//nusmods.com/...`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ". The name string will be parsed into a `Name` object. The argument string for link will be parsed in `AddNusModsCommandParser` into a `NusModsShareLink`, containing the `SemesterNo`, `ModuleCodes` and `LessonNos`. Both the `Name` and `NusModsShareLink` objects will then be passed into the `AddNusModsCommand` constructor."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ". The `AddNusModsCommand#execute` is then called by the `LogicManager`."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ". In the `AddNusModsCommand#execute` method,"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ".. `model#findPerson` is called to find the `Person` with the provided name."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ".. Iterate through the `ModuleCodes`,"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "... Call `model#findModule` to get the `Module` with the given module code."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "... Pass the module and selected lesson numbers in the link into `ModuleEventMappingUtil#mapModuleToEvent` to generate an `Event` based on the module. The lesson numbers are used to generate the `Timeslots` for the event."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ".. Iterate through all the events to add,"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "... Call `person#addEvent` to add the event to the person\u0027s schedule."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ". Return command result and display feedback to user."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Ease of executing command as user."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* **Alternative 1 (current choice):** Entering NUSMods share link"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Pros: User can easily get the NUSMods share link of his/her existing NUSMods timetable and copy/paste the link into the command."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Cons: Less flexibility if user wants to add only some modules (has to adjust timetable on NUSMods or modify the link itself)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* **Alternative 2:** Entering modules individually"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Pros: More flexibility in specifying modules to add."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Cons: Tedious as user has to specify the semester, module codes and lesson numbers in the command."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* **Alternative 3:** Importing the downloaded iCalendar file from NUSMods"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Pros: Opens up the possibility of importing generic iCalendar files."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Cons: User is unlikely to be able to get the iCalendar files of his/her group members (due to tediousness and privacy reasons)."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "// end::nusmods[]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "// tag::websocket[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d External APIs"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "The application requires data from the https://api.nusmods.com/v2/[NUSMods API] for the \u003c\u003cAdd NUSMods To Schedule, Add NUSMods To Schedule\u003e\u003e feature and data from the https://developers.google.com/maps/documentation[Google Maps API] for the \u003c\u003cClosest Common Location(Micro Service), Closest Common Location\u003e\u003e feature. The following subsections describe the implementation of various aspects with regards to working with external APIs:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d\u003d APIs"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "We have implemented a `websocket` component to contain the logic of interfacing with external APIs."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "The `websocket.NusModsApi` class contains methods for querying different endpoints of the NUSMods API and parsing the query results into `JSONObject` or `JSONArray` objects."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "The `websocket.GmapsApi` class contains methods for querying different endpoints of the Google Maps API and parsing the query results into `JSONObject` or `JSONArray` objects."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//TODO: describe more and provide a class diagram of the internal classes in websocket"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d\u003d Caching API Results"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "To support limited connectivity in our application, the results of all API queries are preprocessed and saved into the resources directory. The following activity diagram shows how the caching feature works when external data is required for the execution of a certain command:"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "image::gmaps/ApiDiagram.png[]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d\u003d Preprocessing NUSMods API"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "The key information that we require for each NUS module is the timetable information. Unfortunately, there is no available endpoint which provides the timetable information of all modules at once - there is only an endpoint which provides the timetable information of one module per query. Thus, we developed a small program in `logic.internal.nusmods.ImportMods`, which can be run prior to the main application itself, to query the timetable info for every module and build a list of modules data containing the timetable information."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//TODO: insert diagram websocket - logic.internal.nusmods class diagram"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d\u003d Preprocessing Google Maps API"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//TODO: talk about your internal program to build the DistanceMatrix.json / Places.json"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Limited Connectivity Support"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "Current choice: we chose a combination of alternatives 1 and 2 to achieve robust limited connectivity support for our external API data."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* **Alternative 1:** Preprocessing API"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Pros: Can achieve complete offline support, also saves the issue of handling API keys."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Cons: Have to run preprocessing programs from time to time to update data files, e.g. for modules in new academic year or new locations else features will not work."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* **Alternative 2:** Caching Query Results"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Pros: Achieves limited connectivity support (call once and save result, then use saved result for future calls). Also, needs less work to support future data/API changes."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Cons: Not so useful in cases where a large number of queries is required to be preprocessed first, e.g. getting locations data from Google Maps API to generate `LocationGraph`."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* **Alternative 3:** Direct API queries"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Pros: Easy to implement, minimal work to support future data/API changes."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "** Cons: No limited connectivity support."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "// end::websocket[]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* has a need to coordinate meetings with many groups/projects"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "*Value proposition*: find a common time and venue amongst group members to schedule meetings faster"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |delete a person |remove contacts that I no longer need"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |add a new group |create a group for scheduling meetings"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |add person to group |"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |delete a group |remove groups that I no longer need"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |find a group by name |locate details of groups without having to go through the entire list"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |import my current schedule |do not have to manually add my calendar events"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |import my friends\u0027 schedule easily |do not have to manually add their calendar events"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |view my schedule |see what\u0027s on my schedule"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |find a common free time between multiple schedules |schedule a meeting between multiple people quickly"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |schedule meetings with different intervals (multiple times a week, every week, biweekly) | arrange more regular meetings"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |import my current schedule |do not have to manually add my calendar events"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |add ad-hoc events |can de-conflict"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |export/share scheduled meetings |share it with other members of the group/project"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* * *` |user |savable data |share it with other members of the group/project"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* *` |user |know the best meeting location |arrange the meeting at a convenient place for all members"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* *` |user |know which bus to take |get to the meeting location"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* *` |experienced user |only use the keyboard |get things done faster"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* *` |user |tab complete |type my commands faster"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* *` |forgetful user |have guidance when typing |complete my commands easily"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* *` |careless user who type wrong commands frequently|undo my commands |do not have to manually reverse my mistakes"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* *` |inexperienced user |group people’s timetables |complete my commands easily"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`* *` |user |generate email invite |notify other members of the group/project about the scheduled meeting"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|`*` |user |have a change log |view past changes"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "2.  TimeBook shows a list of persons"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "4.  TimeBook deletes the person"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d Use case: Schedule a meeting"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "Preconditions: meeting group is created."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "1. User requests to arrange a meeting for a group"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "2. TimeBook searches for common free timeslots between all group members\u0027 schedules"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "3. User chooses a free timeslot to schedule a meeting"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "4. TimeBook adds the scheduled meeting to all members\u0027 schedules"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ". The application should be user-friendly to novices who have not used a command line interface before."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ". The application should primarily cater to NUS students who already uses NUSMods to find free time."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ". The UI design of the application should be intuitive to users to navigate."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ". The application size should not be too big."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ". The application should save data real time and not require users to invoke save manually."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ". Our code should allow other developers to add new features in the application easily."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 157,
      "klementtan": 62,
      "Alvinnyk": 32,
      "YiJiee": 62,
      "-": 411,
      "aidilfbk": 78
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d TimeBook - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T10-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "By: `Team TimeBook`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Our team is still working on the User Guide. Keep a look out for more cool and exciting features coming soon!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Thank you for checking out TimeBook! TimeBook is a desktop application that is morphed from AddressBook Level 3 (AB3). TimeBook is a scheduler application that aims to help busy NUS undergraduates keep track of the schedules of the user and his or her friends. It also can find the common free time and venues among the user and his or her friends. TimeBook will have the following features:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ".  A graphical user interface (GUI) but most of the interactions with the application would happen using command line interface (CLI)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ".  Allows users to add the schedules of his or her friends and organise them into groups."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ".  Deconflict different schedules of different people and different groups to find the common free time among them."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ".  Integration with NUSmods API to allow users to enter their NUSmods timetable link to add it to their schedule."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ".  Integration with Google Maps API to allow the application to evaluate the best venue for the group to meet up during the free time in their schedules."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d Understanding this guide"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d\u003d Basic Information"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "This guide is a explains how you can use *TimeBook* to the fullest extent to assist you to plan for your group\u0027s meeting."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "You can find the steps needed to start scheduling group activities with your friends or loved ones in the quick start and general"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "*lifecycle* usage of our application. If you happen to stumble upon some difficulties, our *Frequently Asked Questions* (FAQ) is"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "here to address that. If you are an experienced *Command Line Interface (CLI)* user, you can hope right into using the application by"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "looking at our *Command Summary*. Otherwise, take a look at the *Unexperienced CLI user* section to obtain more information on how"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "to use our application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "We have used the following symbols to help you better understand our application usage. (For now we have not picked our symbols yet.)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"^3, ^10\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "| Symbol | What it means"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "| impt | Important information that you may want to note."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "| tips | Shortcuts or hacks that would improve your experience using this application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "| warn | Warning! Be careful if you encounter this symbol."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ".  Download the latest `timebook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your TimeBook."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "image::startupwindow.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* *`list`* : lists all information in TimeBook."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* *`addperson`* `n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the TimeBook."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *`deleteperson`* `n/John Doe` : deletes the person named `John Doe` from the TimeBook."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* *`addgroup`* `g/CS2103` : adds a new group called `CS2103` to the TimeBook."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* *`addtogroup`* `n/John Doe` `g/CS2103` : Adds a person `John Doe` into the group `CS2103`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d Unexperienced CLI user"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Unlike most applications, where you use your mouse to interact with the application such as scrolling and clicking, our application"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "mostly use the *Command Line Interface*. Most of the time, you would be interacting with the application through typing commands in the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "command box of the application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "You can play around with the commands in the *Command Summary* to get yourself warmed up."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `addperson n/NAME`, `NAME` is a parameter which can be used as `addperson n/John Doe`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "\u003d\u003d\u003d Adding a person: `addperson`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Adds a person to the TimeBook +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Format: `addperson n/NAME [p/PHONE] [em/EMAIL] [a/ADDRESS] [r/REMARK] [tag/TAG]... [c/NUS_MOD_LINK]`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `addperson n/Catherine em/catherineCanCook@imail.com`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `addperson n/John Doe em/JohnDoe@imail.com c/23F6B742CE`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "\u003d\u003d\u003d Adding a person: `addgroup`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Adds a group to the TimeBook +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Format: `addgroup g/GROUP_NAME [r/GROUP_REMARK]`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `addgroup g/CS2103 r/Project Group`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `addgroup g/Friends`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Shows a list of all persons in the TimeBook. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "\u003d\u003d\u003d Editing a person : `editperson`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Edits an existing person in the TimeBook. +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Format: `editperson ed/PERSON_NAME [n/NAME] [p/PHONE] [em/EMAIL] [a/ADDRESS] [r/REMARK] [tag/TAG]...`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* Edits the person specified by `PERSON_NAME`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* You can remove all the person\u0027s tags by typing `tag/` without specifying any tags after it."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `editperson ed/John Doe p/91234567 em/johndoe@example.com` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Edits the phone number and email address of the person with name \u0027John Doe\u0027 to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `edit ed/Betsy n/Betsy Crower tag/` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Edits the person \u0027Betsy\u0027 to a new name \u0027Betsy Crower\u0027 and clears all existing tags."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d Editing a group : `editgroup`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Edits an existing group in the TimeBook. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Format: `editgroup ed/GROUP_NAME [g/GROUP_NAME] [r/GROUP_REMARK]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "****"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* Edits the group specified by `GROUP_NAME`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* `editgroup ed/CS2103 g/CS3203 r/Project Discussion Group` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Edits the group specified by group name \u0027CS2103\u0027 with a new group name \u0027CS3203\u0027 and group remark `Project Discussion Group` respectively."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `findperson`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "Finds the person whose name contains the given keyword. +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Format: `findperson n/NAME`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* Shows the person in the tabs panel."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d Locating group by name: `findgroup`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "Finds the group whose name contains the given keyword. +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Format: `findgroup g/GROUP_NAME`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "****"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* Only the group name is searched."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* Only full words will be matched"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* Shows the group in the tabs panel."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `deleteperson`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Deletes the specified person from the TimeBook. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Format: `deleteperson n/NAME`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* Removes the person from all the groups they are in"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* Deletes the person specified by \u0027NAME\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `deleteperson n/Benedict` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Deletes the person named `Benedict` from the TimeBook."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003d\u003d\u003d Deleting a group : `deletegroup`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Deletes the specified group from the TimeBook. +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Format: `deletegroup g/GROUP_NAME`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "****"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "* Deletes the group specified by \u0027GROUP_NAME\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* The people who were in this group will not be deleted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "****"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `deletegroup g/CS2103` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Deletes the \u0027CS2103\u0027 group from the TimeBook."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d\u003d Show: `show`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d\u003d\u003d Show person:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Shows details of a person. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Format: `show n/NAME`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "****"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* Shows the full name, address, email, phone number and schedule of this person."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "****"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* Type `show n/Tim` in the command line as shown below: +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "image::showpersoncommand.png[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Hit the kbd:[Enter] key and you should see details of the person! You should see a window similar to the one below."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "image::showpersonresult.png[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d\u003d\u003d Show group:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Shows the details of a group. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Format: `show g/GROUP_NAME`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* Shows the description, members and aggregated schedules for this group."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* Type `show g/Team1` in the command line as shown below +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "image::showgroupcommand.png[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Hit the kbd:[Enter] key and you should see the details of this group in a similar window below."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "image::showgroupresult.png[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "*****"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "tip: You can use the command `n` to help you navigate through the schedule view without touching your mouse!"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "*****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d\u003d Switch tabs: `switch-tab`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "You can switch the tab of *Person* and *Group* using this command."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Format: `switch-tab`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Clears all entries from the time book. +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "TimeBook data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "klementtan"
        },
        "content": "\u003d\u003d Advanced Features"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "\u003d\u003d\u003d Add to Group: `addtogroup`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Adds a person specified by \u0027NAME\u0027 into a group specified by \u0027GROUP_NAME\u0027 in the TimeBook."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* `addtogroup n/NAME g/GROUP_NAME`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* `addtogroup n/John g/CS2103`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003d\u003d\u003d Add Schedule: `addevent`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "Adds an event into the schedule of a person in the TimeBook. Only schedules without clashes between time slots can be added to the TimeBook."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Can be used to mark a person as unavailable either on one-off dates or on a particular day every week +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `addevent n/NAME e/EVENT_NAME t/DATETIME` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `addevent n/NAME c/NUS_MOD_LINK`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `addevent n/John e/Math Lecture t/26092019:1300-26092019:1400-LT25`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `addevent n/John c/23F6B742CE`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d Add Module: `addmod`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "Adds an NUS module as an event to a person\u0027s schedule in TimeBook. It checks and ensures classes are available for the module in the academic year and semester before adding to the person\u0027s schedule. Default values for `ACADEMIC_YEAR` is 2019/2020 and `SEMESTER` is 1."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `addmod n/NAME m/MODULE_CODE class/CLASS_NUMBERS(comma-separated) [ay/ACADEMIC_YEAR] [s/SEMESTER]` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `addmod n/John m/CS2103T class/G01,T5`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `addmod n/John m/CS2103T class/G01,T5 ay/2018/2019`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `addmod n/John m/CS2103T class/G01,T5 ay/2019/2020 s/1`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d Add Modules via Link: `addmods`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "Adds NUS modules given the NUSMods share link, as events to a person\u0027s schedule in TimeBook."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `addmods n/NAME l/NUSMODS_SHARE_LINK` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `addmods n/John l/https://nusmods.com/timetable/sem-1/share?CS2101\u003d\u0026CS2103T\u003dLEC:G05\u0026CS3230\u003dLEC:1,TUT:08\u0026CS3243\u003dTUT:07,LEC:1\u0026GEQ1000\u003dTUT:D17`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `addmods n/Bob l/https://nusmods.com/timetable/sem-1/share?CS2101\u003d\u0026CS2103T\u003dLEC:G05\u0026CS3230\u003dLEC:1,TUT:08\u0026CS3243\u003dTUT:07,LEC:1\u0026GEQ1000\u003dTUT:D17`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d Show Module: `showmod`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "Shows the schedule of available classes for the module in the academic year and semester. Default values for `ACADEMIC_YEAR` is 2019/2020 and `SEMESTER` is 1."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `showmod m/MODULE_CODE [ay/ACADEMIC_YEAR] [s/SEMESTER]`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `showmod m/CS2103T`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `showmod m/GEQ1000 ay/2019/2020`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `showmod m/CS3230 ay/2019/2020 s/2`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\u003d\u003d\u003d Export VR(Virtual Representation): `export-vr`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "This feature is currently work in progress!"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "Exports a visualisation representation of the schedule (timetable) of a group or person(s) to a PNG file+"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `export-vr [n/NAME]` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `export-vr [g/GROUP_NAME]` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `export-vr g/CS2103T Team project`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* `export-vr n/John Doe`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//\u003d\u003d\u003d Export ICS: `export-ics`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//Output the free time for a certain group as an ics file. This ics file could be imported into google calendar. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//Format:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//* `export-ics OUTPUT_FILENAME` +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//Examples:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//* `Export-ics -n CS3230T`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//\u003d\u003d\u003d Import ICS: `import-ics`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//Import the ics file of an individual. +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//Format:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//* `import-ics NAME FILEPATH` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//Examples:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "//* `Import-ics -t individual -n Catherine -p /data/timetable.ics`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "klementtan"
        },
        "content": "\u003d\u003d\u003d Get Closest Location: `closestlocation`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "klementtan"
        },
        "content": "This command is used to get the closest common location among a list of locations you entered."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Boundaries of this command:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". We define closest common location as the location that requires the least average time to travel to from the"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "klementtan"
        },
        "content": "locations stated in the list."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". We only support locations that are from NUSMods. Any other location would be voided and not be taken into"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "klementtan"
        },
        "content": "consideration for the computation of the closest location."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `closestlocation l/LOCATIONA LOCATIONB ...` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "* `closestlocation l/LT16 LT15 AS5`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "klementtan"
        },
        "content": "\u003d\u003d\u003d Show Free Time slot `show-freetime`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "klementtan"
        },
        "content": "*Overview*"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "klementtan"
        },
        "content": "When the command is executed a popup will appear that shows the closest common location for a particular free time slot in a group."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "klementtan"
        },
        "content": "image::FreeTimePopup.png[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "klementtan"
        },
        "content": "_Description_"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "klementtan"
        },
        "content": "There are three main information that you will see when you execute the command."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". The Closest common location will be shown on the top right corner."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". The picture on google maps of the closest common location will be shown below the header."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "klementtan"
        },
        "content": ". The full details of will be shown on the left side of the popup."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "klementtan"
        },
        "content": ".. Second and third closest location will be shown"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "klementtan"
        },
        "content": ".. The average time to reach the location for the various choices"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "klementtan"
        },
        "content": ".. A list of voided location that TimeBook does not support"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* `show-freetime g/GROUP_NAME id/SLOT_NUMBER` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "klementtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "klementtan"
        },
        "content": "* `show-freetime g/CS2103T id/2`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous TimeBook folder."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *List/Show All Persons* : `list`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Add Person* `addperson n/NAME [p/PHONE] [em/EMAIL] [a/ADDRESS] [r/REMARK] [tag/TAG]... [c/NUS_MOD_LINK]` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "e.g. `addperson n/James Ho p/22224444 em/jamesho@example.com a/123, Clementi Rd, 1234665 r/Always helpful tag/friend tag/colleague`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Edit Person* : `editperson ed/PERSON_NAME [n/NAME] [p/PHONE] [em/EMAIL] [a/ADDRESS] [r/REMARK] [tag/TAG]...` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `editperson ed/James Lee em/jameslee@example.com`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Delete Person* : `delete n/NAME` +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `deleteperson n/Benedict`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Find Person* : `findperson n/NAME` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `findperson n/James Jake`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Add Event to Person\u0027s Schedule* : `addevent n/NAME e/EVENT_NAME t/DATETIME` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `addevent n/John e/Math Lecture t/26092019:1300-26092019:1400-LT25`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* *Add Module to Person\u0027s Schedule* : `addmod n/NAME m/MODULE_CODE class/CLASS_NUMBERS(comma-separated) [ay/ACADEMIC_YEAR] [s/SEMESTER]` +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "e.g. `addmod n/John m/CS2103T class/G01,T5 ay/2019/2020 s/1`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* *Add Modules to Person\u0027s Schedule via NUSMods Link* : `addmods n/NAME l/NUSMODS_SHARE_LINK` +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "e.g. `addmods n/John l/https://nusmods.com/timetable/sem-1/share?CS2101\u003d\u0026CS2103T\u003dLEC:G05\u0026CS3230\u003dLEC:1,TUT:08\u0026CS3243\u003dTUT:07,LEC:1\u0026GEQ1000\u003dTUT:D17`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "* *Show Module Classes Schedule* : `showmod m/MODULE_CODE [ay/ACADEMIC_YEAR] [s/SEMESTER]` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "e.g. `showmod m/CS3230 ay/2019/2020 s/2`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Show Person Details and Schedule* : `show n/NAME` +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `show n/James Lee`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Add Group* `addgroup g/GROUP_NAME [r/GROUP_REMARK]` +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `addgroup g/CS2103 r/Project Group`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Add Person to Group* : `addtogroup n/NAME g/GROUP_NAME` +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `addtogroup n/John g/CS2103`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Edit Group* `editgroup ed/GROUP_NAME [g/GROUP_NAME] [r/GROUP_REMARK]` +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `editgroup ed/CS2103 g/CS3203 r/Project Discussion Group`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Delete Group* : `deletegroup g/GROUP_NAME` +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `deletegroup g/CS2103`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Find Group* : `findgroup g/GROUP_NAME` +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `findgroup g/CS2103`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Show Group Details and Schedule* : `show g/GROUP_NAME` +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `show g/CS2030 T2`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Export Visual Representation* : `export-vr [n/NAME]… [g/GROUP_NAME]… o/SAVE_LOCATION` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `export-vr g/TimeBook o/timetable.jpg`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Closest Location* : `closestlocation l/LOCATIONA LOCATIONB ...` +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `closestlocation l/LT16 LT15 AS5`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Show Free Time Slot* : `show-freetime g/GROUP_NAME id/SLOT_NUMBER` +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "e.g. `show-freetime g/CS2103T id/2`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 55,
      "klementtan": 83,
      "Alvinnyk": 41,
      "YiJiee": 110,
      "-": 125,
      "aidilfbk": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.GmapsModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.NusModsData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.TimeBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadCalendar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Holidays;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleSummaryList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.storage.JsonTimeBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.storage.TimeBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.websocket.Cache;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        TimeBookStorage timeBookStorage \u003d new JsonTimeBookStorage(userPrefs.getTimeBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, timeBookStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // legacy code: to be deleted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Optional\u003cTimeBook\u003e timeBookOptional;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        TimeBook timeBook;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            timeBookOptional \u003d storage.readTimeBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (!timeBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty timebook\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            timeBook \u003d timeBookOptional.orElse(new TimeBook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            timeBook \u003d new TimeBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            logger.severe(\"Failed to load TimeBook, starting with a new instance\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        NusModsData nusModsData \u003d initNusModsData();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        GmapsModelManager gmapsModelManager \u003d new GmapsModelManager();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return new ModelManager(initialData, timeBook, nusModsData, userPrefs, gmapsModelManager);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns an {@code NusModsData} with the data from {@code Cache}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private NusModsData initNusModsData() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        NusModsData nusModsData \u003d new NusModsData();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cModuleSummaryList\u003e moduleSummaryListOptional \u003d Cache.loadModuleSummaryList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (moduleSummaryListOptional.isPresent()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            nusModsData.setModuleSummaryList(moduleSummaryListOptional.get());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            logger.info(\"Loaded module summary list\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cHolidays\u003e holidaysOptional \u003d Cache.loadHolidays();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (holidaysOptional.isPresent()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            nusModsData.setHolidays(holidaysOptional.get());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            logger.info(\"Loaded holidays\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cAcadCalendar\u003e acadCalendarOptional \u003d Cache.loadAcadCalendar();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (acadCalendarOptional.isPresent()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            nusModsData.setAcadCalendar(acadCalendarOptional.get());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            logger.info(\"Loaded academic calendar\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return nusModsData;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 33,
      "klementtan": 6,
      "Alvinnyk": 21,
      "-": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/AppSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadYear;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.SemesterNo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * A Serializable class that contains the App settings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class AppSettings implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    // Has to be updated from time to time!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final AcadYear DEFAULT_ACAD_YEAR \u003d new AcadYear(\"2019/2020\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final SemesterNo DEFAULT_SEMESTER_NO \u003d new SemesterNo(\"1\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String acadYear;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String semesterNo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AppSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        acadYear \u003d DEFAULT_ACAD_YEAR.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        semesterNo \u003d DEFAULT_SEMESTER_NO.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AppSettings(String acadYear, String semesterNo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.semesterNo \u003d semesterNo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AcadYear getAcadYear() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new AcadYear(acadYear);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public SemesterNo getSemesterNo() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new SemesterNo(semesterNo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setAcadYear(String acadYear) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setSemesterNo(String semesterNo) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.semesterNo \u003d semesterNo;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (!(other instanceof AppSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        AppSettings o \u003d (AppSettings) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return acadYear.equals(o.getAcadYear().toString())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                \u0026\u0026 semesterNo.equals(o.getSemesterNo().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Objects.hash(acadYear, semesterNo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        sb.append(\"Academic Year : \" + acadYear + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        sb.append(\"Academic Semester : \" + semesterNo + \"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        logger.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return logger;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 2,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/TimeBookInvalidLocation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * Signals that some given data does not location requirements"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class TimeBookInvalidLocation extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public TimeBookInvalidLocation(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/TimeBookInvalidState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * Signals that some given data does not fulfill the current state at which it is called at"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class TimeBookInvalidState extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public TimeBookInvalidState(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ArrayListUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * Utility function to manipulate arraylist"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class ArrayListUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * Method used to transferm an array list to string where each element separated by a ,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param arrayList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static String toStringCommaSpaced(ArrayList\u003cString\u003e arrayList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        for (int i \u003d 0; i \u003c arrayList.size(); i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            if (i !\u003d arrayList.size() - 1) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                result \u003d result + arrayList.get(i) + \", \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                result \u003d result + arrayList.get(i);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Throws {@link IllegalArgumentException} if any of the {@code collections} is empty."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @see Collection#isEmpty()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static void requireAllNotEmpty(Collection\u003c?\u003e... collections) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireNonNull(collections);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (Stream.of(collections).anyMatch(Collection::isEmpty)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "aidilfbk": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Writes given string to a file and appends newline to EOF."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Files.write(file, (content + System.lineSeparator()).getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/SimpleJsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import org.json.simple.JSONAware;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Read and write JSON file with simpleJson"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class SimpleJsonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SimpleJsonUtil.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Optional\u003cObject\u003e readJsonFile(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Object jsonFile;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            jsonFile \u003d parser.parse(FileUtil.readFromFile(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            logger.warning(\"Error reading from json file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static void saveJsonFile(JSONAware jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        FileUtil.writeToFile(filePath, jsonFile.toJSONString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Returns a string that is a substring of {@code s}. The returned substring begins at index 0 and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * extends to the first occurrence of the {@code delimiter} if present and if not, to the end of this string."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param s         The original string to operate on."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param delimiter The delimiter that denotes where the returned substring should end."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The substring up till the delimiter (if found) or else the original string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static String substringBefore(final String s, final String delimiter) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireAllNonNull(s, delimiter);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final int delimiterIndex \u003d s.indexOf(delimiter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (delimiterIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return s.substring(0, delimiterIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Checks if {@code s} is null or is an empty String."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param s string to check."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return true if {@code s} is null or is an empty String."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static boolean isNullOrEmpty(String s) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return s \u003d\u003d null || s.trim().length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 9,
      "-": 68,
      "aidilfbk": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/VenueUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.module.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * This class is for the utility functions for venues"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class VenueUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to convert ArrayList of venues to ArrayList of string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param venues"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static ArrayList\u003cString\u003e venueListToString(ArrayList\u003cVenue\u003e venues) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e stringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        while (!venues.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            stringList.add(venues.remove(0).toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return stringList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.TimeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.GroupDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.PersonDisplay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns the TimeBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    TimeBook getTimeBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UI Model \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns the current main window display model."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    DetailWindowDisplay getMainWindowDisplay();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns the current side panel display model."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    SidePanelDisplay getSidePanelDisplay();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Suggesters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns a list of Person\u0027s names that starts with prefix."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    ArrayList\u003cString\u003e personSuggester(String prefix);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns a list of Person\u0027s names that starts with prefix in a Group."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    ArrayList\u003cString\u003e personSuggester(String prefix, String groupName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns a list of Group\u0027s names that starts with prefix."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    ArrayList\u003cString\u003e groupSuggester(String prefix);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Legacy \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Returns an unmodifiable view of the list of groups."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    ObservableList\u003cGroup\u003e getGroupList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    ObservableList\u003cPersonDisplay\u003e getFilteredPersonDisplayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    ObservableList\u003cGroupDisplay\u003e getFilteredGroupDisplayList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 42,
      "YiJiee": 14,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.suggestions.SuggestionLogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.TimeBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.GroupDisplay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.PersonDisplay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.ui.SuggestingCommandBox.SuggestionLogic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class LogicManager implements Logic, SuggestionLogic {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final SuggestionLogic suggestionLogic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.suggestionLogic \u003d new SuggestionLogicManager(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            storage.saveTimeBook(model.getTimeBook());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            logger.info(\"Attempting to save timebook\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            logger.severe(\"Unable to save timebook\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public TimeBook getTimeBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return model.getTimeBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UI Model \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public DetailWindowDisplay getMainWindowDisplay() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return model.getDetailWindowDisplay();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public SidePanelDisplay getSidePanelDisplay() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return model.getSidePanelDisplay();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ObservableList\u003cPersonDisplay\u003e getFilteredPersonDisplayList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ObservableList\u003cPerson\u003e persons \u003d model.getObservablePersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return FXCollections.observableList(persons.stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .map(person -\u003e new PersonDisplay((Person) person))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ObservableList\u003cGroupDisplay\u003e getFilteredGroupDisplayList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ObservableList\u003cGroup\u003e persons \u003d model.getObservableGroupList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return FXCollections.observableList(persons.stream()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .map(group -\u003e new GroupDisplay(group)).collect(Collectors.toCollection(ArrayList::new)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Suggesters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cString\u003e personSuggester(String prefix) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return model.personSuggester(prefix);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cString\u003e personSuggester(String prefix, String groupName) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return model.personSuggester(prefix, groupName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cString\u003e groupSuggester(String prefix) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return model.groupSuggester(prefix);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Legacy \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return model.getObservablePersonList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //To Do."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return model.getObservableGroupList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public ObservableList\u003cString\u003e getSuggestions(final String commandText, final int caretPosition) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return suggestionLogic.getSuggestions(commandText, caretPosition);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public SelectionResult selectSuggestion("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final String commandText, final int caretPosition, final String selectedValue) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return suggestionLogic.selectSuggestion(commandText, caretPosition, selectedValue);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 43,
      "YiJiee": 27,
      "-": 77,
      "aidilfbk": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENTNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Adds an Event to the schedule of a person."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addevent\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to add event: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE_WRONG_TIMINGS \u003d \"Invalid timing arguments\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            + \"Time format: ddMMyyyy:HHmm\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE_UNABLE_TO_FIND_PERSON \u003d \"Unable to find person\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE_CLASH_IN_EVENTS \u003d \"Clash in events\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_NAME + \" NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            + PREFIX_EVENTNAME + \" EVENTNAME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            + PREFIX_TIMING + \" STARTTIME-ENDTIME-LOCATION\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            + \"Time format: ddMMyyyy:HHmm\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final Name name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public AddEventCommand(Name name, Event event) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (event \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE + MESSAGE_FAILURE_WRONG_TIMINGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (model.findPerson(name) \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE + MESSAGE_FAILURE_UNABLE_TO_FIND_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (model.isEventClash(name, event)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE + MESSAGE_FAILURE_CLASH_IN_EVENTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (model.addEvent(name, event)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // updates main window"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            model.updateDetailWindowDisplay(name, LocalDateTime.now(), DetailWindowDisplayType.PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // updates side panel"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            model.updateSidePanelDisplay(SidePanelDisplayType.PERSONS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + event.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE + MESSAGE_FAILURE_UNABLE_TO_FIND_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!(command instanceof AddEventCommand)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (((AddEventCommand) command).event.equals(this.event)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 ((AddEventCommand) command).name.equals(this.name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 81,
      "YiJiee": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddGroupCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Add a group."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class AddGroupCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addgroup\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New group added: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to add group: Group already exist\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_GROUPNAME + \" GROUPNAME\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final GroupDescriptor groupDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public AddGroupCommand(GroupDescriptor groupDescriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(groupDescriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescriptor \u003d groupDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (model.findGroup(groupDescriptor.getGroupName()) !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d model.addGroup(groupDescriptor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (group !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // updates main window"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            model.updateDetailWindowDisplay(group.getGroupName(), LocalDateTime.now(), DetailWindowDisplayType.GROUP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // updates side panel"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            model.updateSidePanelDisplay(SidePanelDisplayType.GROUPS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + group.details());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!(command instanceof AddGroupCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (((AddGroupCommand) command).groupDescriptor.equals(this.groupDescriptor)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 65,
      "YiJiee": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddNusModCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACAD_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_NOS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.exceptions.ModuleToEventMappingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadYear;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.LessonNo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.SemesterNo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Gets details about a module from NusMods"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class AddNusModCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmod\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_NAME + \"PERSON_NAME \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"[\" + PREFIX_LESSON_NOS + \"CLASS_NUMBERS (comma-separated)] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"[\" + PREFIX_ACAD_YEAR + \"ACADEMIC_YEAR] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"[\" + PREFIX_SEMESTER + \"SEMESTER]\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added module to person\u0027s schedule: \\n\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"Unable to find person\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Unable to find module\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final List\u003cLessonNo\u003e lessonNoList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final AddNusModCommandOptions options;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AddNusModCommand(Name name, ModuleCode moduleCode,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                            List\u003cLessonNo\u003e lessonNos, AddNusModCommandOptions options) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.lessonNoList \u003d lessonNos;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.options \u003d options;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        AcadYear acadYear \u003d options.getAcadYear().orElse(model.getDefaultAcadYear());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        SemesterNo semesterNo \u003d options.getSemesterNo().orElse(model.getDefaultSemesterNo());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        // find person with name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ObservableList\u003cPerson\u003e personList \u003d model.getObservablePersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Person person \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (Person p : personList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (p.getName().equals(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                person \u003d p;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (person \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return new CommandResult(MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String startAcadSemDateString \u003d model.getAcadSemStartDateString(acadYear, semesterNo);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        List\u003cString\u003e holidayDateStrings \u003d model.getHolidayDateStrings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Module module;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ModuleId moduleId \u003d new ModuleId(acadYear, moduleCode);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            module \u003d model.findModule(moduleId);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            event \u003d AddNusModsCommand.createEvent(module, startAcadSemDateString, semesterNo,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    this.lessonNoList, holidayDateStrings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (ModuleToEventMappingException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return new CommandResult(e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        person.addEvent(event);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + person.getSchedule());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (!(command instanceof AddNusModCommand)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (((AddNusModCommand) command).moduleCode.equals(this.moduleCode)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                \u0026\u0026 ((AddNusModCommand) command).options.equals(this.options)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Contains optional arguments for executing the ShowNusModCommand."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static class AddNusModCommandOptions {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        private AcadYear acadYear;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        private SemesterNo semesterNo;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public AddNusModCommandOptions() {}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public Optional\u003cAcadYear\u003e getAcadYear() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.ofNullable(acadYear);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public void setAcadYear(AcadYear acadYear) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public Optional\u003cSemesterNo\u003e getSemesterNo() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.ofNullable(semesterNo);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public void setSemesterNo(SemesterNo semesterNo) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            this.semesterNo \u003d semesterNo;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (!(other instanceof AddNusModCommandOptions)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            AddNusModCommandOptions o \u003d (AddNusModCommandOptions) other;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return getAcadYear().equals(o.getAcadYear())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    \u0026\u0026 getSemesterNo().equals(o.getSemesterNo());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 156,
      "Alvinnyk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddNusModsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.exceptions.ModuleToEventMappingException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadYear;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.LessonNo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.NusModsShareLink;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.SemesterNo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Weeks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.person.schedule.Timeslot;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.person.schedule.Venue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Add an an NUSMods timetable to a person\u0027s schedule."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class AddNusModsCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmods\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_NAME + \"PERSON_NAME \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + PREFIX_LINK + \"NUSMODS_SHARE_LINK\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"Example Link: \" + NusModsShareLink.EXAMPLE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added NUS modules to person\u0027s schedule: \\n\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"Unable to find person\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Unable to get all module details\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-M-d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final DateTimeFormatter DT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-M-d HHmm\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final int WEEK_LENGTH \u003d 7;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final NusModsShareLink link;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AddNusModsCommand(Name name, NusModsShareLink link) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(link);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.link \u003d link;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        AcadYear acadYear \u003d model.getDefaultAcadYear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        // find person with name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ObservableList\u003cPerson\u003e personList \u003d model.getObservablePersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Person person \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (Person p : personList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (p.getName().equals(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                person \u003d p;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (person \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return new CommandResult(MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String startAcadSemDateString \u003d model.getAcadSemStartDateString(acadYear, link.semesterNo);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        List\u003cString\u003e holidayDateStrings \u003d model.getHolidayDateStrings();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        // translate module to event"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (Map.Entry\u003cModuleCode, List\u003cLessonNo\u003e\u003e entry : link.moduleLessonsMap.entrySet()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            ModuleCode moduleCode \u003d entry.getKey();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            ModuleId moduleId \u003d new ModuleId(acadYear, moduleCode);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                Module module \u003d model.findModule(moduleId);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                Event e \u003d createEvent(module, startAcadSemDateString, link.semesterNo,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        entry.getValue(), holidayDateStrings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                eventsToAdd.add(e);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            } catch (ModuleToEventMappingException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                return new CommandResult(e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (Event event : eventsToAdd) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            person.addEvent(event);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + person.getSchedule());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Converts a {@code Module} to an {@code Event}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return an Event based on an NUS module"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Event createEvent(Module module, String startAcadSemDateString, SemesterNo semesterNo,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                     List\u003cLessonNo\u003e lessonNos, List\u003cString\u003e holidayDateStrings) throws ModuleToEventMappingException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (LessonNo lessonNo : lessonNos) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            List\u003cLesson\u003e lessonsFound \u003d module.getSemester(semesterNo).findLessons(lessonNo);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (lessonsFound.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                throw new ModuleToEventMappingException(\"Lesson number not found!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            lessons.addAll(lessonsFound);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ArrayList\u003cTimeslot\u003e timeslots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            timeslots.addAll(generateTimeslots(lesson, startAcadSemDateString, holidayDateStrings));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new Event(module.getModuleCode().toString(), timeslots);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Generate all timeslots for the lesson, taking into account of holidays."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static List\u003cTimeslot\u003e generateTimeslots(Lesson lesson, String startAcadSemDateString,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                                            List\u003cString\u003e holidayDateStrings) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        // TODO: do week type parsing in NusModsParser.parseWeeks"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        List\u003cTimeslot\u003e timeslots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Venue venue \u003d new Venue(lesson.getVenue().toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        List\u003cLocalDate\u003e holidayDates \u003d holidayDateStrings.stream()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                .map(s -\u003e LocalDate.parse(s, DATE_FORMATTER))"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Weeks weeks \u003d lesson.getWeeks();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (weeks.getType() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String semStartDateStartTimeString \u003d startAcadSemDateString + \" \" + lesson.getStartTime().toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String semStartDateEndTimeString \u003d startAcadSemDateString + \" \" + lesson.getEndTime().toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            LocalDateTime semStartDateStartTime \u003d LocalDateTime.parse("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    semStartDateStartTimeString, DT_FORMATTER);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            LocalDateTime semStartDateEndTime \u003d LocalDateTime.parse("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    semStartDateEndTimeString, DT_FORMATTER);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            for (int weekNo : weeks.getWeekNumbers()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                LocalDateTime timeslotStart \u003d semStartDateStartTime.plusDays(WEEK_LENGTH * (weekNo - 1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                LocalDateTime timeslotEnd \u003d semStartDateEndTime.plusDays(WEEK_LENGTH * (weekNo - 1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                boolean isHoliday \u003d holidayDates.stream().anyMatch(d -\u003e timeslotStart.toLocalDate().isEqual(d));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                if (isHoliday) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                Timeslot ts \u003d new Timeslot(timeslotStart, timeslotEnd, venue);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                timeslots.add(ts);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (weeks.getType() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String lessonStartDateStartTimeString \u003d weeks.getStartDateString() + \" \" + lesson.getStartTime().toString();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String lessonStartDateEndTimeString \u003d weeks.getStartDateString() + \" \" + lesson.getEndTime().toString();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            LocalDateTime lessonStartDateStartTime \u003d LocalDateTime.parse("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    lessonStartDateStartTimeString, DT_FORMATTER);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            LocalDateTime lessonStartDateEndTime \u003d LocalDateTime.parse("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    lessonStartDateEndTimeString, DT_FORMATTER);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            for (int weekNo : weeks.getWeekNumbers()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                LocalDateTime timeslotStart \u003d lessonStartDateStartTime.plusDays(WEEK_LENGTH * (weekNo - 1));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                LocalDateTime timeslotEnd \u003d lessonStartDateEndTime.plusDays(WEEK_LENGTH * (weekNo - 1));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                boolean isHoliday \u003d holidayDates.stream().anyMatch(d -\u003e timeslotStart.toLocalDate().isEqual(d));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                if (isHoliday) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                Timeslot ts \u003d new Timeslot(timeslotStart, timeslotEnd, venue);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                timeslots.add(ts);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            assert true : weeks.getType() \u003d\u003d 3;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            LocalDate lessonStartDate \u003d LocalDate.parse(weeks.getStartDateString(), DATE_FORMATTER);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            LocalDate lessonEndDate \u003d LocalDate.parse(weeks.getEndDateString(), DATE_FORMATTER);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            LocalDate tempDate \u003d lessonStartDate;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int weekInterval \u003d weeks.getWeekInterval();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            while (tempDate.isBefore(lessonEndDate) || tempDate.isEqual(lessonEndDate)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                LocalTime lessonStartTime \u003d LocalTime.parse(lesson.getStartTime().toString(), TIME_FORMATTER);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                LocalTime lessonEndTime \u003d LocalTime.parse(lesson.getEndTime().toString(), TIME_FORMATTER);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                LocalDateTime timeslotStart \u003d LocalDateTime.of(tempDate, lessonStartTime);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                LocalDateTime timeslotEnd \u003d LocalDateTime.of(tempDate, lessonEndTime);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                tempDate \u003d tempDate.plusDays(WEEK_LENGTH * weekInterval);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                boolean isHoliday \u003d holidayDates.stream().anyMatch(d -\u003e timeslotStart.toLocalDate().isEqual(d));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                if (isHoliday) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                Timeslot ts \u003d new Timeslot(timeslotStart, timeslotEnd, venue);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                timeslots.add(ts);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 225,
      "Alvinnyk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddPersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Adds a person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class AddPersonCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addperson\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_NAME + \" NAME\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to add person: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final PersonDescriptor personDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public AddPersonCommand(PersonDescriptor personDescriptor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(personDescriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personDescriptor \u003d personDescriptor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Name name \u003d personDescriptor.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (model.findPerson(name) !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE + MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Person person \u003d model.addPerson(personDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (person !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                // update main window"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                model.updateDetailWindowDisplay(person.getName(), LocalDateTime.now(), DetailWindowDisplayType.PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                // update side panel"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                model.updateSidePanelDisplay(SidePanelDisplayType.PERSONS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + person.details());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return new CommandResult(MESSAGE_FAILURE + MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return command \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || (command instanceof AddPersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 personDescriptor.equals(((AddPersonCommand) command).personDescriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 39,
      "YiJiee": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddToGroupCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMapping;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.Role;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Adds a person into a group."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class AddToGroupCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtogroup\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_NAME + \" NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            + PREFIX_GROUPNAME + \" GROUPNAME\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Add to group success: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to find person or group\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"Duplicate Mapping\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final GroupName groupName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final Role role;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public AddToGroupCommand(Name name, GroupName groupName, Role role) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (name \u003d\u003d null || groupName \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Person person \u003d model.findPerson(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Group group \u003d model.findGroup(groupName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            PersonToGroupMapping mapping \u003d new PersonToGroupMapping(person.getPersonId(), group.getGroupId(), role);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (model.addPersonToGroupMapping(mapping)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                // updates main window"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                model.updateDetailWindowDisplay(group.getGroupName(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                        LocalDateTime.now(), DetailWindowDisplayType.GROUP);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                // updates side panel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                model.updateSidePanelDisplay(SidePanelDisplayType.GROUPS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + mapping.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return new CommandResult(MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!(command instanceof AddToGroupCommand)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (((AddToGroupCommand) command).name.equals(this.name)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 ((AddToGroupCommand) command).groupName.equals(this.groupName)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 79,
      "YiJiee": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClosestLocationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * This is the class for the command to find the closest location"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class ClosestLocationCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"closestlocation\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_LOCATIONS + \" LIST OF LOCATIONS \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Closest location found: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Cannot find closest location.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ArrayList\u003cString\u003e locationNameList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ClosestLocationCommand(ArrayList\u003cString\u003e locationNameList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.locationNameList \u003d locationNameList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        for (int i \u003d 0; i \u003c locationNameList.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            userInput \u003d userInput + locationNameList.get(i) + \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    + model.getClosestLocationDataString(locationNameList) + \" location you entered: \" + userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return new CommandResult(MESSAGE_FAILURE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"\\nlocation you entered: \" + userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return command \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                || (command instanceof ClosestLocationCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public abstract boolean equals(Command command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.lang.ref.WeakReference;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Stores the user\u0027s command history and allows for bidirectional navigation of the history."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class CommandHistory extends ArrayList\u003cString\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private List\u003cWeakReference\u003cCustomListIterator\u003e\u003e customListIterators \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private ListIterator\u003cString\u003e listIterator \u003d listIterator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public String getPreviousCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return listIterator.hasNext() ? listIterator.next() : null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return listIterator.hasPrevious() ? listIterator.previous() : null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void resetHistoryPointer() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        listIterator \u003d listIterator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public ListIterator\u003cString\u003e listIterator() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CustomListIterator listIterator \u003d new CustomListIterator(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         A WeakReference is used so that the lifetime of the created CustomListIterator is determined by this method\u0027s"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         consumer rather than this instance forever preventing all CustomListIterator from being garbage collected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        customListIterators.add(new WeakReference\u003c\u003e(listIterator));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return listIterator;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void add(final int index, final String newElement) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (index !\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new UnsupportedOperationException(\"Index must be 0\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (!isEmpty() \u0026\u0026 get(0).equals(newElement)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            // the command being added is exactly the same as the most recent command, so we\u0027ll skip it"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super.add(index, newElement);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         Since a new element is added to the list, we need to increment the index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         of all ListIterators so that they still point to the correct previous/next elements"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Iterator\u003cWeakReference\u003cCustomListIterator\u003e\u003e customListIteratorsIterator \u003d customListIterators.iterator();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        while (customListIteratorsIterator.hasNext()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final WeakReference\u003cCustomListIterator\u003e customListIteratorReference \u003d customListIteratorsIterator.next();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final CustomListIterator customListIterator \u003d customListIteratorReference.get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (customListIterator \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                // The CustomListIterator has been garbage collected, so we\u0027ll remove the WeakReference container."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                customListIteratorsIterator.remove();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                customListIterator.incrementIndex();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * A custom ListIterator class that allows for very basic concurrent modification of the the underlying list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    static class CustomListIterator implements ListIterator\u003cString\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        private final ArrayList\u003cString\u003e backingStore;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        private int index \u003d -1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        CustomListIterator(final ArrayList\u003cString\u003e backingStore) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            this.backingStore \u003d backingStore;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        private boolean isWithinBounds(final int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return 0 \u003c\u003d index \u0026\u0026 index \u003c backingStore.size();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        private void incrementIndex() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public boolean hasNext() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public String next() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            index \u003d index + 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return backingStore.get(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public boolean hasPrevious() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public String previous() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            index \u003d index - 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return backingStore.get(index);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public int nextIndex() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (isWithinBounds(nextIndex)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return nextIndex;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return backingStore.size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public int previousIndex() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (isWithinBounds(previousIndex)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return previousIndex;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public void remove() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public void set(String s) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public void add(String s) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * The application should export a file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private final boolean export;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * The application should scroll down."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private final boolean scroll;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * The application should have a popup."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private final boolean popUp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.export \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.scroll \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.popUp \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Constructs an alternative CommandResult that would affect the UI."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean export) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.export \u003d export;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.scroll \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.popUp \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Constructs an alternative CommandResult that would affect the UI."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean export, boolean scroll) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.export \u003d export;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.scroll \u003d scroll;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.popUp \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Constructs an alternative CommandResult that would affect the UI."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public CommandResult(String feedbackToUser,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                         boolean showHelp, boolean exit, boolean export, boolean scroll, boolean popUp) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.export \u003d export;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.scroll \u003d scroll;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.popUp \u003d popUp;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean isExport() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return export;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean isScroll() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return scroll;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean isPopUp() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return popUp;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u0026\u0026 export \u003d\u003d otherCommandResult.export;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, export);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 6,
      "YiJiee": 71,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Deletes a group."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class DeleteGroupCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletegroup\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Delete group success\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to delete group\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_GROUPNAME + \" GROUPNAME\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final GroupName groupName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public DeleteGroupCommand(GroupName groupName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group toDelete \u003d model.findGroup(groupName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (toDelete !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (model.deleteGroup(toDelete.getGroupId())) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                // update main window display"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                model.updateDetailWindowDisplay(new DetailWindowDisplay());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                // update side panel display"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                model.updateSidePanelDisplay(SidePanelDisplayType.GROUPS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!(command instanceof DeleteGroupCommand)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (((DeleteGroupCommand) command).groupName.equals(this.groupName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 58,
      "YiJiee": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeletePersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Deletes a person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class DeletePersonCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteperson\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Delete person success\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to delete person\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_NAME + \" NAME\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public DeletePersonCommand(Name name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person toDelete \u003d model.findPerson(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (toDelete !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (model.deletePerson(toDelete.getPersonId())) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                // update main window display"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                model.updateDetailWindowDisplay(new DetailWindowDisplay());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                // update side panel display"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                model.updateSidePanelDisplay(SidePanelDisplayType.PERSONS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!(command instanceof DeletePersonCommand)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (((DeletePersonCommand) command).name.equals(this.name)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 58,
      "YiJiee": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditGroupCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EDIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Edits a group details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class EditGroupCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editgroup\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_EDIT + \" GROUP_NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \" REMARK]\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Edited Group: \\n\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to edit Group\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final GroupName groupName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final GroupDescriptor groupDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public EditGroupCommand(GroupName groupName, GroupDescriptor groupDescriptor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(groupDescriptor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescriptor \u003d groupDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!groupDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (model.findGroup(groupName) \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d model.editGroup(groupName, groupDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (group \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // update main window display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            model.updateDetailWindowDisplay(group.getGroupName(), LocalDateTime.now(), DetailWindowDisplayType.GROUP);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // update side panel display"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            model.updateSidePanelDisplay(SidePanelDisplayType.GROUPS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + group.details());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!(command instanceof EditGroupCommand)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (((EditGroupCommand) command).groupName.equals(this.groupName)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 ((EditGroupCommand) command).groupDescriptor.equals(this.groupDescriptor)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 82,
      "YiJiee": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditPersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EDIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class EditPersonCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editperson\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_EDIT + \" PERSON_NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Edited Person: \\n\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to edit person\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final PersonDescriptor personDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public EditPersonCommand(Name name, PersonDescriptor personDescriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(personDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personDescriptor \u003d personDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!personDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (model.findPerson(name) \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d model.editPerson(name, personDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (person \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // update main window display"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            model.updateDetailWindowDisplay(person.getName(), LocalDateTime.now(), DetailWindowDisplayType.PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // update side panel display"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            model.updateSidePanelDisplay(SidePanelDisplayType.PERSONS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + person.details());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!(command instanceof EditPersonCommand)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (((EditPersonCommand) command).name.equals(this.name)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 ((EditPersonCommand) command).personDescriptor.equals(this.personDescriptor)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 55,
      "YiJiee": 2,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (command instanceof ExitCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 9,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/** Command to export visual representations */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ExportCommand\u003cT\u003e extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export-vr\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exporting %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Failed to export...\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"This person does not exists in the address book!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_GROUP_NOT_FOUND \u003d \"This group does not exists in the address book!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Export command takes in a person\u0027s or group\u0027s name as argument!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private T name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ExportCommand(T name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Does nothing to the model."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (name instanceof Name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            ObservableList\u003cPerson\u003e personList \u003d model.getObservablePersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Optional\u003cPerson\u003e person \u003d Optional.empty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            for (Person p : personList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                if (p.getName().equals(name)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    person \u003d Optional.of(p);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (person.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                throw new CommandException(MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            model.updateDetailWindowDisplay((Name) name, LocalDateTime.now(), DetailWindowDisplayType.PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, person.get()), false,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    false, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ObservableList\u003cGroup\u003e groupList \u003d model.getObservableGroupList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Optional\u003cGroup\u003e group \u003d Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            for (Group g : groupList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                if (g.getGroupName().equals((GroupName) name)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    group \u003d Optional.of(g);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (group.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                throw new CommandException(MESSAGE_GROUP_NOT_FOUND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            model.updateDetailWindowDisplay((GroupName) name, LocalDateTime.now(), DetailWindowDisplayType.GROUP);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, group.get()), false, false,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else if (o instanceof ExportCommand) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return ((ExportCommand) o).name.equals(this.name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean equals(Command o) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else if (o instanceof ExportCommand) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return ((ExportCommand) o).name.equals(this.name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 1,
      "YiJiee": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindGroupCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Find a group."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class FindGroupCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findgroup\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Found group: \\n\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to find group\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_GROUPNAME + \" GROUPNAME\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final GroupName groupName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public FindGroupCommand(GroupName groupName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d model.findGroup(groupName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (group !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            ArrayList\u003cPersonId\u003e persons \u003d model.findPersonsOfGroup(group.getGroupId());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String s \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PERSONS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \\n\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (persons.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                s +\u003d \"NO PERSONS AVAILABLE\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            for (i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                Person currentPerson \u003d model.findPerson(persons.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                s +\u003d currentPerson.toString() + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                s +\u003d currentPerson.getSchedule().toString() + \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // update main window"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            model.updateDetailWindowDisplay(group.getGroupName(), LocalDateTime.now(), DetailWindowDisplayType.GROUP);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            //update side panel display"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            model.updateSidePanelDisplay(SidePanelDisplayType.GROUPS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + group.details() + s);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!(command instanceof FindGroupCommand)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (((FindGroupCommand) command).groupName.equals(this.groupName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 73,
      "YiJiee": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindPersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Find a person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class FindPersonCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findperson\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Found person: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to find person\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_NAME + \" NAME\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public FindPersonCommand(Name name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d model.findPerson(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (person !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            ArrayList\u003cGroupId\u003e groups \u003d model.findGroupsOfPerson(person.getPersonId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String s \u003d \"\u003d\u003d\u003d\u003d\u003d GROUPS \u003d\u003d\u003d\u003d\u003d \\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (groups.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                s +\u003d \"NO GROUPS AVAILABLE\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            for (i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                s +\u003d \"    \" + model.findGroup(groups.get(i)).toString() + \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // update main window"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            model.updateDetailWindowDisplay(person.getName(), LocalDateTime.now(), DetailWindowDisplayType.PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // update side panel display"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            model.updateSidePanelDisplay(SidePanelDisplayType.PERSONS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + person.details() + s);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!(command instanceof FindPersonCommand)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (((FindPersonCommand) command).name.equals(this.name)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 70,
      "YiJiee": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        //model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new CommandResult(model.list());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 7,
      "YiJiee": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PopupCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Command to show popup of the locations suggested."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class PopupCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"popup\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing locations\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public PopupCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Do nothing to model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        model.updateDetailWindowDisplay(new DetailWindowDisplay(DetailWindowDisplayType.NONE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false , false , false, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return (command instanceof PopupCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.WeekSchedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Gives the schedule for the week of a group."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Schedule found: \\n\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to generate schedule\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_GROUPNAME + \" GROUPNAME\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final GroupName groupName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ScheduleCommand(GroupName groupName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d model.findGroup(groupName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (group \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // update main window"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        model.updateDetailWindowDisplay(group.getGroupName(), LocalDateTime.now(), DetailWindowDisplayType.NONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // update side panel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model.updateSidePanelDisplay(SidePanelDisplayType.GROUPS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cWeekSchedule\u003e schedules \u003d model.getDetailWindowDisplay().getWeekSchedules();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (WeekSchedule s : schedules) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            output +\u003d s.toString() + \"\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + output);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!(command instanceof ScheduleCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (((ScheduleCommand) command).groupName.equals(this.groupName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 56,
      "YiJiee": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScrollCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Command to handle scrolling events using CLI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ScrollCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing next view of schedule\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ScrollCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        model.updateDetailWindowDisplay(new DetailWindowDisplay(DetailWindowDisplayType.NONE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return (command instanceof ScrollCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Command to show the details of a person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ShowCommand\u003cT\u003e extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"This person does not exists in the address book!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_GROUP_NOT_FOUND \u003d \"This group does not exists in the address book!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Show command takes in a person\u0027s or group\u0027s name as argument!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private final T name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ShowCommand(T name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (name instanceof Name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            ObservableList\u003cPerson\u003e personList \u003d model.getObservablePersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Optional\u003cPerson\u003e person \u003d Optional.empty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            for (Person p : personList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                if (p.getName().equals((Name) name)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    person \u003d Optional.of(p);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (person.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                throw new CommandException(MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            model.updateDetailWindowDisplay((Name) name, LocalDateTime.now(), DetailWindowDisplayType.PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, person.get()), false,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ObservableList\u003cGroup\u003e groupList \u003d model.getObservableGroupList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Optional\u003cGroup\u003e group \u003d Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            for (Group g : groupList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                if (g.getGroupName().equals((GroupName) name)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    group \u003d Optional.of(g);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (group.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                throw new CommandException(MESSAGE_GROUP_NOT_FOUND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            model.updateDetailWindowDisplay((GroupName) name, LocalDateTime.now(), DetailWindowDisplayType.GROUP);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, group.get()), false,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return this \u003d\u003d command //short circuit if same command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                || (command instanceof ShowCommand)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u0026\u0026 (name.equals(((ShowCommand) command).name));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                || (other instanceof ShowCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u0026\u0026 name.equals(((ShowCommand) other).name));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 1,
      "YiJiee": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowNusModCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACAD_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadYear;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.SemesterNo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Gets details about a module from NusMods"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class ShowNusModCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showmod\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_MODULE_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"[\" + PREFIX_ACAD_YEAR + \"ACADEMIC_YEAR] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"[\" + PREFIX_SEMESTER + \"SEMESTER]\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Unable to find module\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final ShowNusModCommandOptions options;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ShowNusModCommand(ModuleCode moduleCode, ShowNusModCommandOptions options) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.options \u003d options;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        AcadYear acadYear \u003d options.getAcadYear().orElse(model.getDefaultAcadYear());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        SemesterNo semesterNo \u003d options.getSemesterNo().orElse(model.getDefaultSemesterNo());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ModuleId moduleId \u003d new ModuleId(acadYear, moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Module module \u003d model.findModule(moduleId);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String result \u003d module.toString() + \"\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            result +\u003d module.getDescription().toString() + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            result +\u003d module.getSemester(semesterNo).toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return new CommandResult(result);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (!(command instanceof ShowNusModCommand)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (((ShowNusModCommand) command).moduleCode.equals(this.moduleCode)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                \u0026\u0026 ((ShowNusModCommand) command).options.equals(this.options)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Contains optional arguments for executing the ShowNusModCommand."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static class ShowNusModCommandOptions {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        private AcadYear acadYear;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        private SemesterNo semesterNo;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public ShowNusModCommandOptions() {}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public Optional\u003cAcadYear\u003e getAcadYear() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.ofNullable(acadYear);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public void setAcadYear(AcadYear acadYear) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public Optional\u003cSemesterNo\u003e getSemesterNo() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.ofNullable(semesterNo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public void setSemesterNo(SemesterNo semesterNo) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            this.semesterNo \u003d semesterNo;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (!(other instanceof ShowNusModCommandOptions)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            ShowNusModCommandOptions o \u003d (ShowNusModCommandOptions) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return getAcadYear().equals(o.getAcadYear())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    \u0026\u0026 getSemesterNo().equals(o.getSemesterNo());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchTabCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Command to handle tab switches."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class SwitchTabCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch-tab\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tabs switched!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Switch tab command does not take in any other arguments!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public SwitchTabCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        DetailWindowDisplay nextDetailDisplay \u003d new DetailWindowDisplay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (model.getSidePanelDisplay() \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            model.updateSidePanelDisplay(SidePanelDisplayType.PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        SidePanelDisplayType previousDisplay \u003d model.getSidePanelDisplay().getSidePanelDisplayType();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (previousDisplay.equals(SidePanelDisplayType.PERSONS)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            model.updateSidePanelDisplay(SidePanelDisplayType.GROUPS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            model.updateSidePanelDisplay(SidePanelDisplayType.PERSONS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        model.updateDetailWindowDisplay(nextDetailDisplay);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean equals(Command command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return (command instanceof SwitchTabCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/ModuleToEventMappingException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Signals that there is a problem in attempting to map a module to an event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class ModuleToEventMappingException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleToEventMappingException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleToEventMappingException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/AddEventCommandSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Provides suggestions for the {@link Prefix}es of the {@link seedu.address.logic.commands.AddEventCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class AddEventCommandSuggester extends Suggester {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_NAME,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_EVENTNAME,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_TIMING"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (prefix.equals(CliSyntax.PREFIX_NAME)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return getPersonNameSuggestions(model, commandArgument);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/AddGroupCommandSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.suggestions.stateless.NullSuggester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Provides suggestions for the {@link Prefix}es of the {@link seedu.address.logic.commands.AddGroupCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class AddGroupCommandSuggester extends NullSuggester {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_GROUPNAME"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/AddNusModsCommandSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Provides suggestions for the {@link Prefix}es of the {@link seedu.address.logic.commands.AddNusModsCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class AddNusModsCommandSuggester extends Suggester {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_NAME,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_LINK"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (prefix \u003d\u003d CliSyntax.PREFIX_NAME) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return getPersonNameSuggestions(model, commandArgument);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/AddPersonCommandSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.suggestions.stateless.NullSuggester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Provides suggestions for the {@link Prefix}es of the {@link seedu.address.logic.commands.AddPersonCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class AddPersonCommandSuggester extends NullSuggester {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_NAME"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/AddToGroupCommandSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Provides suggestions for the {@link Prefix}es of the {@link seedu.address.logic.commands.AddToGroupCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class AddToGroupCommandSuggester extends Suggester {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_NAME,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_GROUPNAME"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (prefix.equals(CliSyntax.PREFIX_NAME)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return getPersonNameSuggestions(model, commandArgument);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (prefix.equals(CliSyntax.PREFIX_GROUPNAME)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return getGroupNameSuggestions(model, commandArgument);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/DeleteGroupCommandSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Provides suggestions for the {@link Prefix}es of the {@link seedu.address.logic.commands.DeleteGroupCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class DeleteGroupCommandSuggester extends Suggester {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_GROUPNAME"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (!prefix.equals(CliSyntax.PREFIX_GROUPNAME)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cString\u003e groupNameSuggestions \u003d getGroupNameSuggestions(model, commandArgument);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cString\u003e excludedGroupNames \u003d arguments.filterByPrefix(CliSyntax.PREFIX_GROUPNAME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .filter(candidateCommandArgument -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    return !candidateCommandArgument.equals(commandArgument);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                })"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .map(CommandArgument::getValue)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .collect(Collectors.toUnmodifiableList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        groupNameSuggestions.removeAll(excludedGroupNames);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return groupNameSuggestions;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/DeletePersonCommandSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Provides suggestions for the {@link Prefix}es of the {@link seedu.address.logic.commands.DeletePersonCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class DeletePersonCommandSuggester extends Suggester {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_NAME"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (!prefix.equals(CliSyntax.PREFIX_NAME)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cString\u003e personNameSuggestions \u003d getPersonNameSuggestions(model, commandArgument);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cString\u003e excludedPersonNames \u003d arguments.filterByPrefix(CliSyntax.PREFIX_NAME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .filter(candidateCommandArgument -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    return !candidateCommandArgument.equals(commandArgument);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                })"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .map(CommandArgument::getValue)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .collect(Collectors.toUnmodifiableList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        personNameSuggestions.removeAll(excludedPersonNames);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return personNameSuggestions;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/EditGroupCommandSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Provides suggestions for the {@link Prefix}es of the {@link seedu.address.logic.commands.EditGroupCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class EditGroupCommandSuggester extends Suggester {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_EDIT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_REMARK"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static Optional\u003cGroup\u003e getSelectedGroup(final Model model, final ArgumentList arguments) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Optional\u003cString\u003e groupNameInput \u003d arguments.getFirstValueOfPrefix(CliSyntax.PREFIX_EDIT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (groupNameInput.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final GroupName groupName \u003d new GroupName(groupNameInput.get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Group group \u003d model.findGroup(groupName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return Optional.ofNullable(group);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String value \u003d commandArgument.getValue();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (prefix.equals(CliSyntax.PREFIX_EDIT)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return model.groupSuggester(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (prefix.equals(CliSyntax.PREFIX_REMARK)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Optional\u003cGroup\u003e optionalSelectedGroup \u003d getSelectedGroup(model, arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (optionalSelectedGroup.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                final Group selectedGroup \u003d optionalSelectedGroup.get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return List.of(selectedGroup.getGroupRemark().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/EditPersonCommandSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Provides suggestions for the {@link Prefix}es of the {@link seedu.address.logic.commands.EditPersonCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class EditPersonCommandSuggester extends Suggester {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_EDIT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_NAME,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_PHONE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_EMAIL,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_REMARK,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_TAG"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static Optional\u003cPerson\u003e getSelectedPerson(final Model model, final ArgumentList arguments) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Optional\u003cString\u003e personNameInput \u003d arguments.getFirstValueOfPrefix(CliSyntax.PREFIX_EDIT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (personNameInput.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Name personName \u003d new Name(personNameInput.get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Person person \u003d model.findPerson(personName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return Optional.ofNullable(person);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String value \u003d commandArgument.getValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (prefix.equals(CliSyntax.PREFIX_EDIT)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return model.personSuggester(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (SUPPORTED_PREFIXES.contains(prefix)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Optional\u003cPerson\u003e optionalSelectedPerson \u003d getSelectedPerson(model, arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (optionalSelectedPerson.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Person selectedPerson \u003d optionalSelectedPerson.get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (prefix.equals(CliSyntax.PREFIX_NAME)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return List.of(selectedPerson.getName().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else if (prefix.equals(CliSyntax.PREFIX_PHONE)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return List.of(selectedPerson.getPhone().toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else if (prefix.equals(CliSyntax.PREFIX_EMAIL)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return List.of(selectedPerson.getEmail().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else if (prefix.equals(CliSyntax.PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return List.of(selectedPerson.getAddress().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else if (prefix.equals(CliSyntax.PREFIX_REMARK)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return List.of(selectedPerson.getRemark().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else if (prefix.equals(CliSyntax.PREFIX_TAG)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return selectedPerson"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        .getTags()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        .map(Tag::toString)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        .collect(Collectors.toUnmodifiableList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/FindPersonCommandSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Provides suggestions for the {@link Prefix}es of the {@link seedu.address.logic.commands.FindPersonCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class FindPersonCommandSuggester extends Suggester {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_NAME"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (prefix.equals(CliSyntax.PREFIX_NAME)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return getPersonNameSuggestions(model, commandArgument);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/NusModSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.module.SemesterNo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Abstract Suggester class that simplifies the handling and supplying of suggestions from NUSMods module data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "abstract class NusModSuggester extends Suggester {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static final ModuleSuggestionMapper MODULE_CODE_MAPPER \u003d (module -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return Stream.of(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static final ModuleSuggestionMapper ACAD_YEAR_MAPPER \u003d (module -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return Stream.of(module.getAcadYear().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static final ModuleSuggestionMapper SEMESTER_MAPPER \u003d (module -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return module"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .getSemesterData()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .map(Semester::getSemesterNo)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .map(SemesterNo::toString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Finds a specific {@link Module} by its {@link seedu.address.model.module.ModuleCode}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param model      The {@link Model} containing the {@link Module}s that will be searched through."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param moduleCode The exact {@link String} representation of the {@link seedu.address.model.module.ModuleCode}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Returns a {@link Module} if there is one that matches the {@code moduleCode}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static Optional\u003cModule\u003e findModuleByCode(final Model model, final String moduleCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .getModuleList()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .filter(module -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    return module.getModuleCode().toString().equals(moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                }).findFirst();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Gets the specific {@link Module} that was specified by the user through the {@link CliSyntax#PREFIX_MODULE_CODE}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param model     The {@link Model} containing the {@link Module}s that will be searched through."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param arguments The {@link ArgumentList} possibly containing a {@link CliSyntax#PREFIX_MODULE_CODE} and some"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *                  user-defined value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Returns a {@link Module} if the user specified a valid module code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static Optional\u003cModule\u003e getSelectedModule(final Model model, final ArgumentList arguments) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return arguments.getFirstValueOfPrefix(CliSyntax.PREFIX_MODULE_CODE).flatMap(moduleCode -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return findModuleByCode(model, moduleCode);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Creates a {@link Predicate} that checks whether the {@link Module}\u0027s module code contains the {@code searchTerm}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param searchTerm The user-defined module code substring to search for."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A {@link Predicate} that checks whether the {@link Module}\u0027s module code contains the {@code searchTerm}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static Predicate\u003cModule\u003e createPredicateModuleCodeContains(final String searchTerm) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return (module) -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return module.getModuleCode().toString().contains(searchTerm);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        };"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Creates a {@link Predicate} that checks whether the {@link Module}\u0027s academic years contains the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * {@code searchTerm}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param searchTerm The user-defined academic year substring to search for."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A {@link Predicate} that checks whether the {@link Module}\u0027s academic years contains the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * {@code searchTerm}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static Predicate\u003cModule\u003e createPredicateModuleAcadYearContains(final String searchTerm) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return (module) -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return module.getAcadYear().toString().contains(searchTerm);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Creates a {@link Predicate} that checks whether the {@link Module}\u0027s semester numbers contains the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * {@code searchTerm}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param searchTerm The user-defined semester number to search for."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A {@link Predicate} that checks whether the {@link Module}\u0027s semester numbers contains the"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * {@code searchTerm}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static Predicate\u003cModule\u003e createPredicateModuleSemesterNoContains(final String searchTerm) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return (module) -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return module.getSemesterData().stream().anyMatch(semester -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return semester.getSemesterNo().getSemesterNo().contains(searchTerm);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        };"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * A mapper function that takes in a {@link Module} and returns one or more {@link String} suggestions using a"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * {@link Stream}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected interface ModuleSuggestionMapper extends Function\u003cModule, Stream\u003cString\u003e\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/ShowNusModCommandSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Provides suggestions for the {@link Prefix}es of the {@link seedu.address.logic.commands.ShowNusModCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class ShowNusModCommandSuggester extends NusModSuggester {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_MODULE_CODE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_ACAD_YEAR,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_SEMESTER"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String value \u003d commandArgument.getValue();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cPredicate\u003cModule\u003e\u003e predicates \u003d new ArrayList\u003c\u003e(3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ModuleSuggestionMapper mapper \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (prefix.equals(CliSyntax.PREFIX_MODULE_CODE)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final String moduleCodeValue \u003d value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (!moduleCodeValue.isBlank()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                predicates.add(createPredicateModuleCodeContains(moduleCodeValue));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            arguments.getFirstValueOfPrefix(CliSyntax.PREFIX_ACAD_YEAR)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    .map(NusModSuggester::createPredicateModuleAcadYearContains)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    .ifPresent(predicates::add);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            arguments.getFirstValueOfPrefix(CliSyntax.PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    .map(NusModSuggester::createPredicateModuleSemesterNoContains)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    .ifPresent(predicates::add);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            mapper \u003d MODULE_CODE_MAPPER;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (prefix.equals(CliSyntax.PREFIX_ACAD_YEAR)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            getSelectedModule(model, arguments).ifPresent(matchedModule -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                predicates.add(matchedModule::equals);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            arguments.getFirstValueOfPrefix(CliSyntax.PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    .map(NusModSuggester::createPredicateModuleSemesterNoContains)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    .ifPresent(predicates::add);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            mapper \u003d ACAD_YEAR_MAPPER;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (prefix.equals(CliSyntax.PREFIX_SEMESTER)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            getSelectedModule(model, arguments).ifPresent(matchedModule -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                predicates.add(matchedModule::equals);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            arguments.getFirstValueOfPrefix(CliSyntax.PREFIX_ACAD_YEAR)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    .map(NusModSuggester::createPredicateModuleAcadYearContains)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    .ifPresent(predicates::add);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            mapper \u003d SEMESTER_MAPPER;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (mapper \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            assert predicates.isEmpty() : \"Some predicates exist but a mapper has not been set\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cModule\u003e mergedPredicate \u003d predicates.stream().reduce(module -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .getModuleList()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .filter(mergedPredicate)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .flatMap(mapper)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .distinct()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .collect(Collectors.toUnmodifiableList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/Suggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.AddNusModsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.AddToGroupCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.FindGroupCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.FindPersonCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.ShowNusModCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.suggestions.stateless.GroupNameSuggester;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Represents a source of suggestions with hidden internal logic."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public abstract class Suggester {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static final ObservableList\u003cString\u003e NO_SUGGESTIONS \u003d FXCollections.emptyObservableList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    static final Map\u003cString, Class\u003c? extends Suggester\u003e\u003e SUGGESTER_MAP \u003d Map.ofEntries("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(AddEventCommand.COMMAND_WORD, AddEventCommandSuggester.class),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(AddGroupCommand.COMMAND_WORD, AddGroupCommandSuggester.class),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(AddNusModsCommand.COMMAND_WORD, AddNusModsCommandSuggester.class),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(AddPersonCommand.COMMAND_WORD, AddPersonCommandSuggester.class),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(AddToGroupCommand.COMMAND_WORD, AddToGroupCommandSuggester.class),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(DeleteGroupCommand.COMMAND_WORD, DeleteGroupCommandSuggester.class),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(DeletePersonCommand.COMMAND_WORD, DeletePersonCommandSuggester.class),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(EditGroupCommand.COMMAND_WORD, EditGroupCommandSuggester.class),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(EditPersonCommand.COMMAND_WORD, EditPersonCommandSuggester.class),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(FindGroupCommand.COMMAND_WORD, GroupNameSuggester.class),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(FindPersonCommand.COMMAND_WORD, FindPersonCommandSuggester.class),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(ScheduleCommand.COMMAND_WORD, GroupNameSuggester.class),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Map.entry(ShowNusModCommand.COMMAND_WORD, ShowNusModCommandSuggester.class)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected static \u003cT\u003e ObservableList\u003cT\u003e createUnmodifiableObservableList(final List\u003cT\u003e list) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return FXCollections.unmodifiableObservableList(FXCollections.observableList(list));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Creates a {@link Suggester} based on the given {@code commandWord}. (e.g. {@link AddToGroupCommand#COMMAND_WORD})"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param commandWord The command keyword entered by the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A new {@link Suggester}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static Suggester createSuggester(final String commandWord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Objects.requireNonNull(commandWord);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Class\u003c? extends Suggester\u003e suggesterClass \u003d SUGGESTER_MAP.get(commandWord);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (suggesterClass \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return suggesterClass.getConstructor().newInstance();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (ReflectiveOperationException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Throwable cause \u003d e.getCause();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (cause instanceof RuntimeException) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                throw (RuntimeException) cause;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Gets the supported {@link Prefix}es for a given {@code commandWord} (e.g. {@link AddToGroupCommand#COMMAND_WORD}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * supports {@link AddToGroupCommandSuggester#SUPPORTED_PREFIXES})."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param commandWord The command keyword entered by the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The list of supported {@link Prefix}es for the given {@code commandWord}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static List\u003cPrefix\u003e getCommandPrefixes(final String commandWord) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Objects.requireNonNull(commandWord);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Class\u003c? extends Suggester\u003e suggesterClass \u003d SUGGESTER_MAP.get(commandWord);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (suggesterClass \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return (List\u003cPrefix\u003e) suggesterClass.getField(\"SUPPORTED_PREFIXES\").get(null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (ReflectiveOperationException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Throwable cause \u003d e.getCause();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (cause instanceof RuntimeException) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                throw (RuntimeException) cause;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Gets a list of person names contained within the {@link Model} that match the {@link CommandArgument#getValue()}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Requires the {@code commandArgument} to be of type {@link CliSyntax#PREFIX_NAME}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param model           The {@link Model} containing the {@link seedu.address.model.person.Person}s to look"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *                        through."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param commandArgument The {@link CommandArgument} of type {@link CliSyntax#PREFIX_NAME} containing the name to"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *                        search for."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A list of person names that match the search string (from {@link CommandArgument#getValue()})."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    static List\u003cString\u003e getPersonNameSuggestions(final Model model, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, commandArgument);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assert prefix.equals(CliSyntax.PREFIX_NAME);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String personNameInput \u003d commandArgument.getValue();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return model.personSuggester(personNameInput);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Gets a list of group names contained within the {@link Model} that match the {@link CommandArgument#getValue()}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Requires the {@code commandArgument} to be of type {@link CliSyntax#PREFIX_GROUPNAME}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param model           The {@link Model} containing the {@link seedu.address.model.group.Group}s to look through."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param commandArgument The {@link CommandArgument} of type {@link CliSyntax#PREFIX_GROUPNAME} containing the name"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *                        to search for."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A list of group names that match the search string (from {@link CommandArgument#getValue()})."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    static List\u003cString\u003e getGroupNameSuggestions(final Model model, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, commandArgument);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assert prefix.equals(CliSyntax.PREFIX_GROUPNAME);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String groupNameInput \u003d commandArgument.getValue();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return model.groupSuggester(groupNameInput);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Gets suggestions for a specific {@link CommandArgument} within the {@link ArgumentList}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param model           The {@link Model} containing data that {@link Suggester}s might look through to provide"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *                        suggestions."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param arguments       The {@link ArgumentList} representing all the arguments/{@link Prefix}es and their values."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param commandArgument The specific {@link CommandArgument} to get suggestions for."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A list of String suggestions for the given {@code commandArgument}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public final ObservableList\u003cString\u003e getSuggestions("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, arguments, commandArgument);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assert arguments.contains(commandArgument) : \"provided commandArgument is not in arguments\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cString\u003e suggestions \u003d provideSuggestions(model, arguments, commandArgument);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (suggestions \u003d\u003d null || suggestions.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return NO_SUGGESTIONS;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (suggestions instanceof ObservableList) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return (ObservableList\u003cString\u003e) suggestions;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return createUnmodifiableObservableList(suggestions);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Gets suggestions for a specific {@link CommandArgument} within the {@link ArgumentList}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Implementing classes can return null to signal there are no suggestions at the point of query."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Implementing classes can decide to only return values when certain {@link Prefix}es are present with valid"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param model           The {@link Model} containing data that {@link Suggester}s might look through to provide"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *                        suggestions."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param arguments       The {@link ArgumentList} representing all the arguments/{@link Prefix}es and their values."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param commandArgument The specific {@link CommandArgument} to get suggestions for."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A list of String suggestions for the given {@code commandArgument}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected abstract List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 185
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/SuggestionLogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser.CommandTokens;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.SuggestingCommandUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.ui.SuggestingCommandBox.SuggestionLogic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Handles the logic between the {@link seedu.address.ui.SuggestingCommandBox}, {@link Suggester} and {@link Model}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class SuggestionLogicManager implements SuggestionLogic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final ObservableList\u003cString\u003e EMPTY_LIST \u003d FXCollections.emptyObservableList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final FilteredList\u003cString\u003e commandSuggestions \u003d new FilteredList\u003c\u003e(SuggestingCommandUtil.getCommandWords());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public SuggestionLogicManager(final Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.model \u003d Objects.requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static boolean isCaretWithinCommandWordSection(final CommandTokens commandTokens, final int caretPosition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return caretPosition \u003c\u003d commandTokens.getCommandWordLength();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public ObservableList\u003cString\u003e getSuggestions(final String commandText, final int caretPosition) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        CollectionUtil.requireAllNonNull(commandText, caretPosition);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CommandTokens commandTokens;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            commandTokens \u003d AddressBookParser.tokenizeCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return EMPTY_LIST;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (commandTokens.arguments.isBlank() || isCaretWithinCommandWordSection(commandTokens, caretPosition)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Predicate\u003cString\u003e fuzzyMatcher \u003d SuggestingCommandUtil.createFuzzyMatcher(commandTokens.commandWord);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            commandSuggestions.setPredicate(fuzzyMatcher);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return commandSuggestions;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cPrefix\u003e prefixList \u003d Suggester.getCommandPrefixes(commandTokens.commandWord);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (prefixList \u003d\u003d null || prefixList.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return EMPTY_LIST;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final ArgumentList argumentList \u003d ArgumentTokenizer.orderedTokenize(commandTokens.arguments, prefixList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Suggester suggester \u003d Suggester.createSuggester(commandTokens.commandWord);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (suggester \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return EMPTY_LIST;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final int argRelativePosition \u003d caretPosition - commandTokens.getCommandWordLength();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CommandArgument commandArgument \u003d argumentList.getClosestCommandArgumentAtPosition(argRelativePosition);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return suggester.getSuggestions(model, argumentList, commandArgument);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public SelectionResult selectSuggestion("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final String commandText, final int caretPosition, final String selectedValue) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        CollectionUtil.requireAllNonNull(commandText, caretPosition, selectedValue);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CommandTokens commandTokens;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            commandTokens \u003d AddressBookParser.tokenizeCommand(commandText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return SelectionResult.of(commandText, caretPosition);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (isCaretWithinCommandWordSection(commandTokens, caretPosition)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            String newCommand \u003d selectedValue;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final int newCaretPosition \u003d selectedValue.length() + 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (commandTokens.arguments.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                newCommand +\u003d \" \";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                newCommand +\u003d commandTokens.arguments;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return SelectionResult.of(newCommand, newCaretPosition);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cPrefix\u003e prefixList \u003d Suggester.getCommandPrefixes(commandTokens.commandWord);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (prefixList \u003d\u003d null || prefixList.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return SelectionResult.of(selectedValue + \" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final ArgumentList originalArgumentList \u003d ArgumentTokenizer.orderedTokenize("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                commandTokens.arguments, prefixList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final ArgumentList modifiedArgumentList \u003d (ArgumentList) originalArgumentList.clone();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final int argumentRelativeCaret \u003d caretPosition - commandTokens.getCommandWordLength();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final int commandArgumentIndex \u003d originalArgumentList.getClosestIndexAtPosition(argumentRelativeCaret);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CommandArgument oldCommandArgument \u003d originalArgumentList.get(commandArgumentIndex);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CommandArgument newCommandArgument \u003d oldCommandArgument.copyWithNewValue(selectedValue);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assert !oldCommandArgument.equals(newCommandArgument) \u0026\u0026 newCommandArgument.getValue().equals(selectedValue);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        modifiedArgumentList.set(commandArgumentIndex, newCommandArgument);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assert modifiedArgumentList.contains(newCommandArgument) \u0026\u0026 !modifiedArgumentList.contains(oldCommandArgument);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String newCommand \u003d commandTokens.commandWord + modifiedArgumentList.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        int newCaretPosition \u003d commandTokens.commandWord.length();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        newCaretPosition +\u003d modifiedArgumentList.calculateCaretPositionAfterIndex(commandArgumentIndex);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return SelectionResult.of(newCommand, newCaretPosition);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/stateless/GroupNameSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions.stateless;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.suggestions.Suggester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Simple {@link Suggester} that can only suggest group names."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Meant to be extended/aliased for {@link seedu.address.logic.commands.Command}s that only take in a group name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class GroupNameSuggester extends Suggester {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final List\u003cPrefix\u003e SUPPORTED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CliSyntax.PREFIX_GROUPNAME"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected final List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix prefix \u003d commandArgument.getPrefix();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (prefix.equals(CliSyntax.PREFIX_GROUPNAME)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final String enteredGroupName \u003d commandArgument.getValue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return model.groupSuggester(enteredGroupName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/suggestions/stateless/NullSuggester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.commands.suggestions.stateless;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.suggestions.Suggester;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.CommandArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Simple {@link Suggester} that doesn\u0027t suggest anything."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class NullSuggester extends Suggester {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected final List\u003cString\u003e provideSuggestions("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Model model, final ArgumentList arguments, final CommandArgument commandArgument) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/export/VisualExporter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static javafx.embed.swing.SwingFXUtils.fromFXImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.awt.image.RenderedImage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Interface class to export visual representations of schedules."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public interface VisualExporter {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Captures a snapshot of the node view and save it as fileformat in filepath."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param view The node that will be captured."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param fileformat The file format that will exported. Examples: PNG, JPG, ETC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param filepath The file path where the export will be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static void exportTo(Node view, String fileformat, String filepath) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Image image \u003d view.snapshot(null, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        RenderedImage renderedImage \u003d fromFXImage(image, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ImageIO.write(renderedImage, fileformat, new File(filepath));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YiJiee": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/internal/gmaps/ClosestLocation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.TimeBookInvalidLocation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.util.ArrayListUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.LocationGraph;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * Class is used to get the closest location"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class ClosestLocation {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private LocationGraph locationGraph;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ClosestLocation(LocationGraph locationGraph) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.locationGraph \u003d locationGraph;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This is a wrapper function to use internally to get closest location from an ArrayList of venues"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationNameList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public String closestLocationDataString(ArrayList\u003cString\u003e locationNameList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Hashtable\u003cString, Object\u003e data \u003d closestLocationData(locationNameList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        result \u003d result + \"First closest location: \" + data.get(ClosestLocationSyntax.FIRST_CLOSEST)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \" | Average travelling time \" + data.get(ClosestLocationSyntax.FIRST_CLOSEST_AVG_TIME) + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        result \u003d result + \"Second closest location: \" + data.get(ClosestLocationSyntax.SECOND_CLOSEST)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \" | Average travelling time \" + data.get(ClosestLocationSyntax.SECOND_CLOSEST_AVG_TIME) + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        result \u003d result + \"Third closest location: \" + data.get(ClosestLocationSyntax.THIRD_CLOSEST)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \" | Average travelling time \" + data.get(ClosestLocationSyntax.THIRD_CLOSEST_AVG_TIME) + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (!((ArrayList\u003cString\u003e) data.get(ClosestLocationSyntax.INVALID_LOCATION)).isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            result \u003d result + \"Could not recognise these locations:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    + ArrayListUtil"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    .toStringCommaSpaced((ArrayList\u003cString\u003e) data.get(ClosestLocationSyntax.INVALID_LOCATION)) + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to find the closes location from the location graph"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public Hashtable\u003cString, Object\u003e closestLocationData(ArrayList\u003cString\u003e locationNameList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String firstClosest \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String secondClosest \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String thirdClosest \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e invalidLocation \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        int groupSize \u003d locationNameList.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Hashtable\u003cString, Object\u003e data \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            if (locationNameList.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                throw new TimeBookInvalidLocation(\"No location entered\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            ArrayList\u003cArrayList\u003cLong\u003e\u003e currMatrix \u003d new ArrayList\u003cArrayList\u003cLong\u003e\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            ArrayList\u003cString\u003e validLocationList \u003d locationGraph.getValidLocationList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            ArrayList\u003cLocation\u003e locations \u003d locationGraph.getLocations();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            for (int i \u003d 0; i \u003c locationNameList.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                int indexLocation \u003d LocationArrayListUtils.getIndex(locations, locationNameList.get(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                String validLocation \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                if (indexLocation \u003e\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    Location currLocation \u003d locations.get(indexLocation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    validLocation \u003d currLocation.getValidLocation();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    if (validLocationList.contains(\"NUS_\" + locationNameList.get(i))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                        validLocation \u003d locationNameList.get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                if (validLocation !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    int indexGmapsRecognisedLocation \u003d validLocationList.indexOf(validLocation);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    if (indexGmapsRecognisedLocation \u003d\u003d -1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                        indexGmapsRecognisedLocation \u003d validLocationList.indexOf(\"NUS_\" + validLocation);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    System.out.println(\"Index of \" + validLocation + \" is \" + indexGmapsRecognisedLocation);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    ArrayList\u003cLong\u003e currRow \u003d locationGraph.getLocationRow(indexGmapsRecognisedLocation);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    currMatrix.add(currRow);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    invalidLocation.add(locationNameList.get(i));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    locationNameList.remove(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            ArrayList\u003cLong\u003e totalDistance \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            for (int j \u003d 0; j \u003c currMatrix.get(0).size(); j++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                totalDistance.add((long) 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                boolean isAllNull \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                for (int i \u003d 0; i \u003c locationNameList.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    Long currDistance \u003d (long) 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    if (currMatrix.get(i).get(j) !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                        isAllNull \u003d false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                        currDistance \u003d currMatrix.get(i).get(j);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    Long newDistance \u003d totalDistance.get(j) + currDistance;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    totalDistance.set(j, newDistance);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                if (totalDistance.get(j) \u003d\u003d 0 \u0026\u0026 isAllNull) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    totalDistance.set(j, Long.MAX_VALUE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            int firstClosestIndex \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            int secondClosestIndex \u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            int thirdClosestIndex \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            Long firstClosestTime \u003d Long.MAX_VALUE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            Long secondClosestTime \u003d Long.MAX_VALUE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            Long thirdClosestTime \u003d Long.MAX_VALUE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            for (int i \u003d 0; i \u003c totalDistance.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                if (totalDistance.get(i) \u003c firstClosestTime) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    firstClosestIndex \u003d i;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    firstClosestTime \u003d totalDistance.get(i);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                } else if (totalDistance.get(i) \u003c secondClosestTime) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    secondClosestIndex \u003d i;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    secondClosestTime \u003d totalDistance.get(i);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                } else if (totalDistance.get(i) \u003c thirdClosestTime) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    secondClosestIndex \u003d i;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    thirdClosestTime \u003d totalDistance.get(i);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            firstClosest \u003d removeNusPrefix(validLocationList.get(firstClosestIndex));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            secondClosest \u003d removeNusPrefix(validLocationList.get(secondClosestIndex));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            thirdClosest \u003d removeNusPrefix(validLocationList.get(thirdClosestIndex));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            long firstClosestAvgTime \u003d firstClosestTime / groupSize;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            long secondClosestAvgTime \u003d secondClosestTime / groupSize;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            long thirdClosestAvgTime \u003d thirdClosestTime / groupSize;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            data.put(ClosestLocationSyntax.FIRST_CLOSEST, firstClosest);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            data.put(ClosestLocationSyntax.SECOND_CLOSEST, secondClosest);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            data.put(ClosestLocationSyntax.THIRD_CLOSEST, thirdClosest);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            data.put(ClosestLocationSyntax.FIRST_CLOSEST_AVG_TIME, firstClosestAvgTime);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            data.put(ClosestLocationSyntax.SECOND_CLOSEST_AVG_TIME, secondClosestAvgTime);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            data.put(ClosestLocationSyntax.THIRD_CLOSEST_AVG_TIME, thirdClosestAvgTime);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            data.put(ClosestLocationSyntax.INVALID_LOCATION, invalidLocation);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (IllegalValueException | TimeBookInvalidLocation e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to remove the Nus Prefix in the validLocationName"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationName"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private static String removeNusPrefix(String locationName) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (locationName.contains(\"NUS_\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            return locationName.split(\"NUS_\")[1];"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            System.out.println(\"Weird result \" + locationName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            return locationName;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 159
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/internal/gmaps/ClosestLocationSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * Stores mapping of closest loaction and the syntax"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class ClosestLocationSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    //Syntac for the key of Closest Location Sata"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final String FIRST_CLOSEST \u003d \"firstClosest\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final String SECOND_CLOSEST \u003d \"secondClosest\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final String THIRD_CLOSEST \u003d \"thirdClosest\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final String FIRST_CLOSEST_AVG_TIME \u003d \"firstClosestAvgTime\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final String SECOND_CLOSEST_AVG_TIME \u003d \"secondClosestAvgTime\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final String THIRD_CLOSEST_AVG_TIME \u003d \"thirdClosestAvgTime\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static final String INVALID_LOCATION \u003d \"invalidLocation\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/internal/gmaps/GmapsJsonUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * This class conatains static method for the processing of Gmaps API repsonse"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class GmapsJsonUtils {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to get the arraylist of arraylist of value for the calculation of the matrix"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param apiResponse"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cLong\u003e\u003e getArrayListMatrix(JSONObject apiResponse) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cArrayList\u003cLong\u003e\u003e distanceMatrixArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        JSONArray rows \u003d (JSONArray) apiResponse.get(\"rows\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        for (int i \u003d 0; i \u003c rows.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            ArrayList\u003cLong\u003e currVertex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            JSONObject currRow \u003d (JSONObject) rows.get(i);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            JSONArray elements \u003d (JSONArray) currRow.get(\"elements\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            for (int j \u003d 0; j \u003c elements.size(); j++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                Long value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                JSONObject currElement \u003d (JSONObject) elements.get(j);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                if (((String) currElement.get(\"status\")).equals(\"OK\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    JSONObject duration \u003d (JSONObject) currElement.get(\"duration\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    value \u003d (Long) duration.get(\"value\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    value \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                currVertex.add(value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            distanceMatrixArrayList.add(currVertex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return distanceMatrixArrayList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to get the status of the api response"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param apiResponse"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static String getStatus(JSONObject apiResponse) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String status \u003d (String) apiResponse.get(\"status\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/internal/gmaps/LocationArrayListUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.Location;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * This class is used for process location object arraylist"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class LocationArrayListUtils {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to get the index of the location with the same name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param arrayList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationName"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static int getIndex(ArrayList\u003cLocation\u003e arrayList, String locationName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        for (int i \u003d 0; i \u003c arrayList.size(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            if (arrayList.get(i).getLocationName().equals(locationName)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/internal/gmaps/ProcessLocationGraph.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.TimeBookInvalidState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.LocationGraph;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.websocket.Cache;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.websocket.GmapsApi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * This method is used to initialise the location graph method"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class ProcessLocationGraph {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private GmapsApi gmapsApi \u003d new GmapsApi();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private LocationGraph locationGraph;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ProcessLocationGraph(LocationGraph locationGraph) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.locationGraph \u003d locationGraph;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private void setMatrixRows(ArrayList\u003cArrayList\u003cLong\u003e\u003e distanceMatrix, int start, int end)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            throws ConnectException, TimeBookInvalidState {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (distanceMatrix.size() !\u003d end - start + 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            System.out.println((distanceMatrix.size() + \"|\" + start + \"|\" + end));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            System.out.println(distanceMatrix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            throw new InvalidParameterException(\"distanceMatrix size must equal to start - end + 1\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            for (int i \u003d 0; i \u003c distanceMatrix.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                ArrayList\u003cLong\u003e currRow \u003d distanceMatrix.get(i);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                locationGraph.setMatrixRow(i + start, currRow);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to populate the distance matrix."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @throws ConnectException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public void process() throws ConnectException, TimeBookInvalidState {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ProcessLocationGraph processLocationGraph \u003d this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        System.out.println(\"Start populating\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e gmapsRecognisedLocationList \u003d locationGraph.getValidLocationList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d gmapsRecognisedLocationList.size() / 10; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            ArrayList\u003cString\u003e locationRowString \u003d new ArrayList\u003cString\u003e(gmapsRecognisedLocationList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    .subList(i * 10 , Math.min((i + 1) * 10, gmapsRecognisedLocationList.size())));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            for (int j \u003d 0; j \u003c gmapsRecognisedLocationList.size() / 10; j++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                System.out.println(\"Processing row\" + i + \"/\" + ((gmapsRecognisedLocationList.size() / 10) + 1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                System.out.println(\"Processing cloumn\" + j + \"/\" + ((gmapsRecognisedLocationList.size() / 10) + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                ArrayList\u003cString\u003e locationColumnString \u003d new ArrayList\u003cString\u003e(gmapsRecognisedLocationList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                        .subList(j * 10 , Math.min((j + 1) * 10, gmapsRecognisedLocationList.size())));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                JSONObject apiResponse \u003d Cache.loadDistanceMatrix(locationRowString, locationColumnString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                ArrayList\u003cArrayList\u003cLong\u003e\u003e currMatrix \u003d GmapsJsonUtils.getArrayListMatrix(apiResponse);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                setMatrixRows(currMatrix, i * 10, Math.min(i * 10 + 9, gmapsRecognisedLocationList.size() - 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        System.out.println(\"Finish populating\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/internal/gmaps/ProcessVenues.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.TimeBookInvalidLocation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.TimeBookInvalidState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.websocket.Cache;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.websocket.GmapsApi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * This class is used to get nus venues"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class ProcessVenues {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private JSONArray venuesNusMods;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ArrayList\u003cLocation\u003e venues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private transient GmapsApi gmapsApi \u003d new GmapsApi();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private SanitizeLocation sanitizeLocation \u003d new SanitizeLocation();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ProcessVenues(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ProcessVenues(JSONArray venuesNusMods, ArrayList\u003cLocation\u003e venues, SanitizeLocation sanitizeLocation) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.venues \u003d venues;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.sanitizeLocation \u003d sanitizeLocation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.venuesNusMods \u003d venuesNusMods;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ArrayList\u003cLocation\u003e getLocations() throws TimeBookInvalidState {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (venuesNusMods \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            throw new TimeBookInvalidState(\"Cannot call getLocation before getVenuesJsonArray\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return this.venues;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to process the venues with the latest information from NUSmods and Google Maps"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @throws ConnectException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ProcessVenues process() throws ConnectException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ProcessVenues processVenuesWNusMods \u003d getVenuesJsonArray();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ProcessVenues processVenuesWVenues \u003d processVenuesWNusMods.populateVenues();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return processVenuesWVenues;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ArrayList\u003cString\u003e getValidLocationList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return sanitizeLocation.getValidLocationList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to process the nus mods venues api."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @throws ConnectException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ProcessVenues populateVenues() throws ConnectException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (venuesNusMods \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            throw new IllegalStateException(\"Cannot call getLocation before calling get\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    + \"getVenuesJsonArray\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            for (int i \u003d 0; i \u003c venuesNusMods.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                System.out.println(\"Processing \" + venuesNusMods.get(i) + \" \" + i + \"/\" + venuesNusMods.size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                Location currLocation \u003d getLocation(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                venues.add(currLocation);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return new ProcessVenues(venuesNusMods, venues, sanitizeLocation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private ProcessVenues getVenuesJsonArray() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        JSONArray currVenuesNusMod \u003d Cache.loadVenues();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return new ProcessVenues(currVenuesNusMod, venues, sanitizeLocation);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private Location getLocation(int i) throws ConnectException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (venuesNusMods \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            throw new IllegalStateException(\"Cannot call getLocation before calling get\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                   + \"getVenuesJsonArray\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            String locationName \u003d (String) venuesNusMods.get(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            Location currLocation \u003d new Location(locationName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                String validLocation \u003d sanitizeLocation.sanitize(locationName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                currLocation.setValidLocation(validLocation);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                System.out.println(locationName + \" identified as \" + validLocation);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            } catch (TimeBookInvalidLocation e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            return currLocation;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 1,
      "klementtan": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/internal/gmaps/SanitizeLocation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.TimeBookInvalidLocation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.websocket.Cache;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * This call is used to find the valid location name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class SanitizeLocation {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ArrayList\u003cString\u003e validLocationList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * Takes in gmapsApi so that it could be replaced by a gmapsApi stub"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public SanitizeLocation() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to get the list of sanitized location"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ArrayList\u003cString\u003e getValidLocationList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return this.validLocationList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to santize the location name on nus mods to a google maps identifiable location"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationName"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @throws ConnectException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public String sanitize(String locationName) throws TimeBookInvalidLocation {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String validLocation \u003d \"NUS_\" + locationName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        validLocation \u003d validLocation.split(\"-\")[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (!validLocationList.contains(validLocation)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            JSONObject apiResponse \u003d Cache.loadPlaces(validLocation);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            String status \u003d GmapsJsonUtils.getStatus(apiResponse);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            if (status.equals(\"OK\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                validLocationList.add(validLocation);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                validLocation \u003d \"NUS_\" + validLocation.split(\"_\")[1];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                if (!validLocationList.contains(validLocation)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    apiResponse \u003d Cache.loadPlaces(validLocation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    status \u003d GmapsJsonUtils.getStatus(apiResponse);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    if (status.equals(\"OK\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                        validLocationList.add(validLocation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                        throw new TimeBookInvalidLocation(\"Cannot identify \" + validLocation);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return validLocation;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/internal/nusmods/ImportMods.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.logic.internal.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.core.AppSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleSummary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleSummaryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.websocket.Cache;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.websocket.NusModsApi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.websocket.NusModsParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Internal class to be executed as a standalone program to import all NUSMods detailed module data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class ImportMods {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Cache.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Main driver."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        importMods();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Method to import detailed data of all nus modules for the default academic year."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static void importMods() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        NusModsApi api \u003d new NusModsApi(AppSettings.DEFAULT_ACAD_YEAR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cJSONArray\u003e moduleSummaryJsonOptional \u003d api.getModuleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (!moduleSummaryJsonOptional.isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            logger.severe(\"No module summaries, can\u0027t scrape all detailed modules.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ModuleSummaryList moduleSummaries \u003d NusModsParser.parseModuleSummaryList("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                moduleSummaryJsonOptional.get(), api.getAcadYear());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        // loop through every mod in moduleSummaries, attempt to load from Cache, which will call api and save to file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        // if module is missing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        int total \u003d moduleSummaries.getModuleSummaries().size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        int found \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        int failed \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        int curr \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (ModuleSummary modSummary : moduleSummaries.getModuleSummaries()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            curr +\u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Optional\u003cModule\u003e moduleOptional \u003d Cache.loadModule(modSummary.getModuleId());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (!moduleOptional.isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                failed +\u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                logger.severe(\"[\" + curr + \"/\" + total + \"] Hmm could not get detailed data for this module: \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        + modSummary);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                found +\u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                logger.info(\"[\" + curr + \"/\" + total + \"] Found this module: \" + modSummary);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        logger.info(\"Modules found/failed/total: [\" + found + \"/\" + failed + \"/\" + total + \"]\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENTNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Timeslot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_EVENTNAME, PREFIX_TIMING);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_EVENTNAME, PREFIX_TIMING)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Name name \u003d new Name(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String eventName \u003d argMultimap.getValue(PREFIX_EVENTNAME).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        List\u003cString\u003e timings \u003d argMultimap.getAllValues(PREFIX_TIMING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event \u003d new Event(eventName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            for (i \u003d 0; i \u003c timings.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                Timeslot timeslot \u003d ParserUtil.parseTimeslot(timings.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (timeslot !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    event.addTimeslot(timeslot);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    return new AddEventCommand(name, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new AddEventCommand(name, null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new AddEventCommand(name, event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddGroupCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupRemark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Parses input arguments and creates a new AddGroupCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class AddGroupCommandParser implements Parser\u003cAddGroupCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public AddGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GROUPNAME, PREFIX_REMARK, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GROUPNAME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupDescriptor groupDescriptor \u003d new GroupDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupDescriptor.setGroupName(new GroupName(argMultimap.getValue(PREFIX_GROUPNAME).get()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            groupDescriptor.setGroupRemark(new GroupRemark(argMultimap.getValue(PREFIX_REMARK).get().trim()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            groupDescriptor.setGroupDescription(new GroupDescription("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get().trim()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new AddGroupCommand(groupDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddNusModCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACAD_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_NOS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.AddNusModCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.AddNusModCommand.AddNusModCommandOptions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.LessonNo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Parses input arguments and creates a new AddNusModsCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class AddNusModCommandParser implements Parser\u003cAddNusModCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddNusModsCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * and returns an AddNusModsCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AddNusModCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MODULE_CODE, PREFIX_LESSON_NOS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        PREFIX_ACAD_YEAR, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MODULE_CODE, PREFIX_LESSON_NOS)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNusModCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        List\u003cLessonNo\u003e lessonNos \u003d ParserUtil.parseLessonNos(argMultimap.getValue(PREFIX_LESSON_NOS).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        AddNusModCommandOptions options \u003d new AddNusModCommandOptions();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACAD_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            options.setAcadYear(ParserUtil.parseAcadYear(argMultimap.getValue(PREFIX_ACAD_YEAR).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEMESTER).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            options.setSemesterNo(ParserUtil.parseSemesterNo(argMultimap.getValue(PREFIX_SEMESTER).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new AddNusModCommand(name, moduleCode, lessonNos, options);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddNusModsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.AddNusModsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.NusModsShareLink;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Parses input arguments and creates a new AddNusModsCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class AddNusModsCommandParser implements Parser\u003cAddNusModsCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddNusModsCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * and returns an AddNusModsCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AddNusModsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_LINK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LINK) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNusModsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        NusModsShareLink link \u003d ParserUtil.parseNusModsLink(argMultimap.getValue(PREFIX_LINK).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new AddNusModsCommand(name, link);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddPersonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class AddPersonCommandParser implements Parser\u003cAddPersonCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public AddPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_REMARK, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonDescriptor personDescriptor \u003d new PersonDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            personDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            personDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            personDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            personDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personDescriptor.setTags(tagList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new AddPersonCommand(personDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 44,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddToGroupCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.AddToGroupCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Parses input arguments and creates a new AddToGroupCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class AddToGroupCommandParser implements Parser\u003cAddToGroupCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public AddToGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GROUPNAME, PREFIX_REMARK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GROUPNAME)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Name name \u003d new Name(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupName groupName \u003d new GroupName(argMultimap.getValue(PREFIX_GROUPNAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Role role \u003d Role.emptyRole();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_REMARK).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new AddToGroupCommand(name, groupName, role);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.AddNusModCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.AddNusModsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.AddToGroupCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.ClosestLocationCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.FindGroupCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.FindPersonCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.PopupCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.ScrollCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.ShowNusModCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.SwitchTabCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Represents the two parts of a command: its {@code commandWord} and {@code arguments}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static class CommandTokens {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public final String commandWord;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public final String arguments;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public CommandTokens(String commandWord, String arguments) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public int getCommandWordLength() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return commandWord.length();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public boolean equals(Object o) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CommandTokens that \u003d (CommandTokens) o;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return commandWord.equals(that.commandWord)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    \u0026\u0026 arguments.equals(that.arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return Objects.hash(commandWord, arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CommandTokens commandTokens \u003d tokenizeCommand(userInput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String commandWord \u003d commandTokens.commandWord;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String arguments \u003d commandTokens.arguments;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        case AddPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new AddPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        case EditPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new EditPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        case ShowNusModCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return new ShowNusModCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        case AddNusModCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return new AddNusModCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        case AddNusModsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return new AddNusModsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        case AddGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new AddGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        case AddToGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new AddToGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        case DeletePersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new DeletePersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        case DeleteGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new DeleteGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        case FindPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new FindPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        case FindGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new FindGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        case EditGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new EditGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new ShowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        case ClosestLocationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            return new ClosestLocationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        case SwitchTabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new SwitchTabCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        case ScrollCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new ScrollCommand();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        case PopupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new PopupCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Tokenize user input into two parts: {@code commandWord} and {@code arguments}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param userInput Full user input string."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The {@code userInput} split into the two {@code commandWord} and {@code arguments} parts."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static CommandTokens tokenizeCommand(final String userInput) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new CommandTokens("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                matcher.group(\"commandWord\"),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                matcher.group(\"arguments\")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 8,
      "klementtan": 3,
      "Alvinnyk": 32,
      "YiJiee": 35,
      "-": 51,
      "aidilfbk": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer.PrefixPosition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Holds an ordered sequence of {@link CommandArgument}s."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class ArgumentList extends ArrayList\u003cCommandArgument\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final ArgumentList EMPTY_LIST \u003d new ArgumentList(List.of());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public ArgumentList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private ArgumentList(final List\u003cCommandArgument\u003e list) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(Objects.requireNonNull(list));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Returns an unmodifiable {@link ArgumentList} containing zero {@link CommandArgument}s."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return An empty {@link ArgumentList}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static ArgumentList emptyList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return EMPTY_LIST;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Returns a user-friendly representation of this {@link ArgumentList}.  The string representation consists of a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * list of the {@link CommandArgument}s in the order they are returned by its iterator. Adjacent elements are"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * separated by the space character.  Elements are converted to strings by {@link String#valueOf(Object)}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A user-friendly representation of this collection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final StringJoiner outputString \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        for (final CommandArgument commandArgument : this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            outputString.add(commandArgument.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return outputString.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Sorts the {@link CommandArgument}s based on {@link PrefixPosition#getStartPosition()}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        sort(Comparator.comparingInt(PrefixPosition::getStartPosition));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    boolean add(final PrefixPosition prefixPosition, final String value) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        CollectionUtil.requireAllNonNull(prefixPosition, value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return add(new CommandArgument(prefixPosition, value));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Finds the index of the {@link CommandArgument} that the {@code caretPosition} would be positioned within."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param caretPosition The position of a caret."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The index of the {@link CommandArgument} that the {@code caretPosition} would be positioned within."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public int getClosestIndexAtPosition(final int caretPosition) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assert caretPosition \u003e\u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cInteger\u003e startPositions \u003d this.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .map(PrefixPosition::getStartPosition)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .collect(Collectors.toUnmodifiableList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        int idx \u003d Collections.binarySearch(startPositions, caretPosition);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (idx \u003c -1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            // cursor is not exactly on a prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            idx \u003d (idx * -1) - 2;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return idx;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Finds the index of the {@link CommandArgument} that the {@code caretPosition} would be positioned within."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param caretPosition The position of a caret."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The index of the {@link CommandArgument} that the {@code caretPosition} would be positioned within."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public CommandArgument getClosestCommandArgumentAtPosition(final int caretPosition) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assert caretPosition \u003e\u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final int idx \u003d getClosestIndexAtPosition(caretPosition);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (idx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return get(idx);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Calculates the position of a caret after {@link CommandArgument} of the given {@code index}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param index The index of the {@link CommandArgument}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The position of a caret after {@link CommandArgument} of the given {@code index}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @throws IndexOutOfBoundsException if the {@code index} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public int calculateCaretPositionAfterIndex(final int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Objects.checkIndex(index, size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final int numSpacesBetween \u003d index;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return this.stream().limit(index + 1).mapToInt(commandArgument -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return commandArgument.toString().length();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }).sum() + numSpacesBetween;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Returns a {@link Stream} containing only the {@link CommandArgument}s that match the given {@code prefix}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param prefix The desired prefix to match."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A {@link Stream} containing only the {@link CommandArgument}s that match the given {@code prefix}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Stream\u003cCommandArgument\u003e filterByPrefix(final Prefix prefix) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Objects.requireNonNull(prefix);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return this.stream().filter(commandArgument -\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return commandArgument.getPrefix().equals(prefix);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Returns the first {@link CommandArgument} that matches the given {@code prefix} if it exists."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param prefix The desired prefix to match."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The first {@link CommandArgument} that matches the given {@code prefix} if it exists."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Optional\u003cCommandArgument\u003e getFirstOfPrefix(final Prefix prefix) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Objects.requireNonNull(prefix);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return filterByPrefix(prefix).findFirst();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Returns the value of the first {@link CommandArgument} that matches the given {@code prefix} if it exists."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param prefix The desired prefix to match."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The value of the first {@link CommandArgument} that matches the given {@code prefix} if it exists."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Optional\u003cString\u003e getFirstValueOfPrefix(final Prefix prefix) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Objects.requireNonNull(prefix);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return getFirstOfPrefix(prefix).map(CommandArgument::getValue);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.function.BiConsumer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        extractArguments(argsString, prefixPositions, (prefixPosition, argValue) -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Prefix argPrefix \u003d prefixPosition.getPrefix();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static void extractArguments("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final String argsString, final List\u003cPrefixPosition\u003e prefixPositions,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final BiConsumer\u003cPrefixPosition, String\u003e consumer) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // Provide consumer with prefixes and their argument values (if any)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            consumer.accept(prefixPositions.get(i), argValue);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Tokenizes an arguments string and returns an {@link ArgumentList} object that provides an ordered sequence of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * prefixes with their respective argument values. Only the given prefixes will be recognized in the arguments"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * string."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return ArgumentList object that provides an ordered sequence of prefixes together with their arguments"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static ArgumentList orderedTokenize(final String argsString, final Prefix... prefixes) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        CollectionUtil.requireAllNonNull(argsString, prefixes);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final ArgumentList argumentList \u003d new ArgumentList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        extractArguments(argsString, positions, argumentList::add);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        argumentList.sort();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return argumentList;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Tokenizes an arguments string and returns an {@link ArgumentList} object that provides an ordered sequence of"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * prefixes with their respective argument values. Only the given prefixes will be recognized in the arguments"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * string."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return ArgumentList object that provides an ordered sequence of prefixes together with their arguments"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static ArgumentList orderedTokenize(final String argsString, final List\u003cPrefix\u003e prefixes) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        CollectionUtil.requireAllNonNull(argsString, prefixes);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Prefix[] prefixArr \u003d prefixes.toArray(new Prefix[0]);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return orderedTokenize(argsString, prefixArr);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    static class PrefixPosition {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        private final int startPosition;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public Prefix getPrefix() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public boolean equals(Object o) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            PrefixPosition that \u003d (PrefixPosition) o;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return startPosition \u003d\u003d that.startPosition"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    \u0026\u0026 prefix.equals(that.prefix);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return Objects.hash(prefix, startPosition);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 1,
      "-": 136,
      "aidilfbk": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"em/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_LINK \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_SEMESTER \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_ACAD_YEAR \u003d new Prefix(\"ay/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_LESSON_NOS \u003d new Prefix(\"class/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_EVENTNAME \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_GROUPNAME \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_TIMING \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_EDIT \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static final Prefix PREFIX_LOCATIONS \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 14,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClosestLocationCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.commands.ClosestLocationCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * This class is used to parse closest location command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class ClosestLocationCommandParser implements Parser\u003cClosestLocationCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to check the presence of the right prefixes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param argumentMultimap"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param prefixes"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ClosestLocationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LOCATIONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_LOCATIONS)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    ClosestLocationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e locations \u003d ParserUtil.parseLocations(argMultimap.getValue(PREFIX_LOCATIONS).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return new ClosestLocationCommand(locations);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommandArgument.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer.PrefixPosition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Represents an argument to a user command (e.g. {@code \u003cprefix\u003evalue})"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class CommandArgument extends PrefixPosition {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public CommandArgument(final Prefix prefix, final int startPosition, final String value) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(Objects.requireNonNull(prefix), Objects.requireNonNull(startPosition));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.value \u003d Objects.requireNonNull(value);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected CommandArgument(final PrefixPosition prefixPosition, final String value) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this(prefixPosition.getPrefix(), prefixPosition.getStartPosition(), value);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Creates a copy of this object with the new object containing the new {@code value}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param value The value for the new {@link CommandArgument}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A copy of this object with the new object containing the new {@code value}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public CommandArgument copyWithNewValue(final String value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new CommandArgument(getPrefix(), getStartPosition(), value);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        CommandArgument that \u003d (CommandArgument) o;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return super.equals(o) \u0026\u0026 value.equals(that.value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return Objects.hash(super.hashCode(), value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return String.format(\"%s%s\", getPrefix().toString(), getValue());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteGroupCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Parses input arguments and creates a new DeleteGroupCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public DeleteGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GROUPNAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GROUPNAME)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupName groupName \u003d new GroupName(argMultimap.getValue(PREFIX_GROUPNAME).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new DeleteGroupCommand(groupName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeletePersonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Parses input arguments and creates a new DeletePersonCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class DeletePersonCommandParser implements Parser\u003cDeletePersonCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public DeletePersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Name name \u003d new Name(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new DeletePersonCommand(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditGroupCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EDIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Parses input arguments and creates a new EditGroupCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class EditGroupCommandParser implements Parser\u003cEditGroupCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public EditGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EDIT, PREFIX_GROUPNAME, PREFIX_REMARK, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EDIT)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupName groupName \u003d new GroupName(argMultimap.getValue(PREFIX_EDIT).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupDescriptor groupDescriptor \u003d new GroupDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GROUPNAME).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            groupDescriptor.setGroupName(ParserUtil.parseGroupName("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    argMultimap.getValue(PREFIX_GROUPNAME).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            groupDescriptor.setGroupRemark(ParserUtil.parseGroupRemark("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            groupDescriptor.setGroupDescription(ParserUtil.parseGroupDescription("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new EditGroupCommand(groupName, groupDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditPersonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EDIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class EditPersonCommandParser implements Parser\u003cEditPersonCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public EditPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EDIT, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_REMARK, PREFIX_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EDIT)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_EDIT).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonDescriptor personDescriptor \u003d new PersonDescriptor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            personDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            personDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            personDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            personDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            personDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            personDescriptor.setTags(tagList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new EditPersonCommand(name, personDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 41,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Parser for export commands. Export commands take in a prefix \u0027n\u0027 for name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GROUPNAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (!hasOnlyOneParam(argMultimap) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new ExportCommand\u003cName\u003e(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            //Group name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            GroupName groupName \u003d ParserUtil.parseGroupName(argMultimap.getValue(PREFIX_GROUPNAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new ExportCommand\u003cGroupName\u003e(groupName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to check and ensure that input has either prefix name or prefix groupname but not both."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param argumentMultimap Argument map to check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return true only when input has only one parameter."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private boolean hasOnlyOneParam(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (arePrefixesPresent(argumentMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u0026\u0026 arePrefixesPresent(argumentMultimap, PREFIX_GROUPNAME)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else if (!arePrefixesPresent(argumentMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argumentMultimap, PREFIX_GROUPNAME)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindGroupCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.FindGroupCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Parses input arguments and creates a new FindGroupCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class FindGroupCommandParser implements Parser\u003cFindGroupCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public FindGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GROUPNAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GROUPNAME)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupName groupName \u003d new GroupName(argMultimap.getValue(PREFIX_GROUPNAME).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new FindGroupCommand(groupName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindPersonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.FindPersonCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Parses input arguments and creates a new FindPersonCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class FindPersonCommandParser implements Parser\u003cFindPersonCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public FindPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Name name \u003d new Name(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new FindPersonCommand(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupRemark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.Role;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadYear;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.LessonNo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.NusModsShareLink;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.SemesterNo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Timeslot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Venue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"ddMMyyyy:HHmm\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses a {@code String name} into a {@code GroupName}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static GroupName parseGroupName(String name) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new GroupName(trimmedName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parses a String moduleCode, and trims the String."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param moduleCode String to be trimmed"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Trimmed String"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws ParseException null"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new ModuleCode(trimmedModuleCode);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parses a String lesson numbers."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param lessonNos String to be parsed"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return Trimmed String"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @throws ParseException null"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static List\u003cLessonNo\u003e parseLessonNos(String lessonNos) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(lessonNos);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        List\u003cLessonNo\u003e lessonNosList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String[] tokens \u003d lessonNos.split(\",\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (String t : tokens) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            lessonNosList.add(new LessonNo(t.trim()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return lessonNosList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parses a String semesterNo, and trims the String."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param acadYear String to be trimmed"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return Trimmed String"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @throws ParseException null"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static AcadYear parseAcadYear(String acadYear) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(acadYear);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String trimmedAcadYear \u003d acadYear.trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new AcadYear(trimmedAcadYear);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parses a String semesterNo, and trims the String."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param semesterNo String to be trimmed"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return Trimmed String"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @throws ParseException null"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static SemesterNo parseSemesterNo(String semesterNo) throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(semesterNo);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String trimmedSemesterNo \u003d semesterNo.trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        SemesterNo semNo \u003d new SemesterNo(trimmedSemesterNo);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return semNo;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parses a String nusModsLink to an {@code NusModsShareLink}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param nusModsLink String to be parsed"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return NusModsShareLink"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @throws ParseException null"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static NusModsShareLink parseNusModsLink(String nusModsLink) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(nusModsLink);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String trimmedNusModsLink \u003d nusModsLink.trim();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (!NusModsShareLink.isValidUrl(trimmedNusModsLink)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new ParseException(NusModsShareLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new NusModsShareLink(nusModsLink);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parse a String remark, and trims the String."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param remark String to be trimmed"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Trimmed String"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws ParseException null"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parse a String role, and trims the String."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param role String to be trimmed"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Trimmed String"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws ParseException null"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static Role parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String trimmedRole \u003d role.trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new Role(trimmedRole);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parse a String remark, and trims the String."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param remark String to be trimmed"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Trimmed String"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws ParseException null"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static GroupRemark parseGroupRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new GroupRemark(trimmedRemark);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parse a String description, and trims the String."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param description String to be trimmed"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Trimmed String"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws ParseException null"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static GroupDescription parseGroupDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new GroupDescription(trimmedDescription);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses a String into a Timeslot object."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param timeslot to be parsed"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Timeslot object"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static Timeslot parseTimeslot(String timeslot) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String[] tokens \u003d timeslot.split(\"-\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            LocalDateTime startTime \u003d LocalDateTime.parse(tokens[0], DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            LocalDateTime endTime \u003d LocalDateTime.parse(tokens[1], DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Venue venue \u003d new Venue(tokens[2].trim());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new Timeslot(startTime, endTime, venue);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * Parses a String into a ArrayList of locations."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationsString to be parsed"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return ArrayList of locations"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static ArrayList\u003cString\u003e parseLocations(String locationsString) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String[] locationsArr \u003d locationsString.split(\" \");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e locations \u003d new ArrayList\u003c\u003e(Arrays.asList(locationsArr));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return locations;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 75,
      "klementtan": 14,
      "Alvinnyk": 103,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Parses inputs and creates a new ScheduleCommand Object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GROUPNAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GROUPNAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupName groupName \u003d new GroupName(argMultimap.getValue(PREFIX_GROUPNAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new ScheduleCommand(groupName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to parse show commands from user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ShowCommandParser implements Parser\u003cShowCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ShowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GROUPNAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (!hasOnlyOneParam(argMultimap) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new ShowCommand\u003cName\u003e(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            //Group name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            GroupName groupName \u003d ParserUtil.parseGroupName(argMultimap.getValue(PREFIX_GROUPNAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return new ShowCommand\u003cGroupName\u003e(groupName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to check and ensure that input has either prefix name or prefix groupname but not both."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param argumentMultimap Argument map to check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return true only when input has only one parameter."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private boolean hasOnlyOneParam(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (arePrefixesPresent(argumentMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u0026\u0026 arePrefixesPresent(argumentMultimap, PREFIX_GROUPNAME)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else if (!arePrefixesPresent(argumentMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u0026\u0026 !arePrefixesPresent(argumentMultimap, PREFIX_GROUPNAME)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowNusModCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACAD_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.ShowNusModCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.ShowNusModCommand.ShowNusModCommandOptions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Parses input arguments and creates a new ShowNusModCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class ShowNusModCommandParser implements Parser\u003cShowNusModCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ShowNusModCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_ACAD_YEAR, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowNusModCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ShowNusModCommandOptions options \u003d new ShowNusModCommandOptions();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACAD_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            options.setAcadYear(ParserUtil.parseAcadYear(argMultimap.getValue(PREFIX_ACAD_YEAR).get()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEMESTER).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            options.setSemesterNo(ParserUtil.parseSemesterNo(argMultimap.getValue(PREFIX_SEMESTER).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new ShowNusModCommand(moduleCode, options);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SuggestingCommandUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.AddNusModCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.AddNusModsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.AddToGroupCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.commands.ClosestLocationCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.FindGroupCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.FindPersonCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.commands.ShowNusModCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Contains utility methods used for suggesting user commands in the *SuggestingCommandBox classes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class SuggestingCommandUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static ObservableList\u003cString\u003e commandWords \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            AddEventCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            AddGroupCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            AddPersonCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            AddToGroupCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            DeleteGroupCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            DeletePersonCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            EditGroupCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            EditPersonCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            FindGroupCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            FindPersonCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            ScheduleCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            ShowNusModCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            AddNusModCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            AddNusModsCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ShowCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            ClosestLocationCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static ObservableList\u003cString\u003e readOnlyCommandWords \u003d FXCollections.unmodifiableObservableList(commandWords);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static ObservableList\u003cString\u003e getCommandWords() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return readOnlyCommandWords;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Creates a {@link Predicate} that checks if the candidate string contains the {@code input} characters"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * in the same order while allowing for any printable characters in between and after."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * For example, calling {@code createOrderedMatcher(\"mdm\")} creates a {@link Predicate} where strings such as"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * \"mdm\", \"modem\", \"madam\", \"medium\", \"madame\", \"madman\" will pass. Note how within the first four examples,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * any number of characters can appear between each character in the original string \"mdm\". The last two examples"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * show that any characters can also appear after the \"mdm\" match."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param characterSequence A sequence of characters."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A {@link Predicate} that checks if the candidate string contains the {@code input} characters"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * in the same order."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static Predicate\u003cString\u003e createFuzzyMatcher(final String characterSequence) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireNonNull(characterSequence);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String anyPrintableCharacter \u003d \"\\\\w*\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final StringJoiner patternBuilder \u003d new StringJoiner(anyPrintableCharacter, emptyString, anyPrintableCharacter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        characterSequence"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .codePoints()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .mapToObj(Character::toChars)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .map(String::valueOf)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .map(Pattern::quote)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                .forEach(patternBuilder::add);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return Pattern.compile(patternBuilder.toString(), Pattern.UNICODE_CHARACTER_CLASS).asMatchPredicate();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 6,
      "klementtan": 3,
      "YiJiee": 2,
      "aidilfbk": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private final UniqueGroupList groups;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groups \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    //// Group methods."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return groups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void addGroup(Group g) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groups.add(g);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 17,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/GmapsModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.TimeBookInvalidState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.internal.gmaps.ClosestLocation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.internal.gmaps.ProcessLocationGraph;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.internal.gmaps.ProcessVenues;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.LocationGraph;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * Represent the in memory of Gmaps related model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class GmapsModelManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ArrayList\u003cLocation\u003e locations;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ArrayList\u003cString\u003e validLocationList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private LocationGraph locationGraph;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public GmapsModelManager() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            initProcessVenues();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            initLocationGraph();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (TimeBookInvalidState | ConnectException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public Hashtable\u003cString, Object\u003e closestLocationData(ArrayList\u003cString\u003e locationNameList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return new ClosestLocation(locationGraph).closestLocationData(locationNameList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public String closestLocationDataString(ArrayList\u003cString\u003e locationNameList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return new ClosestLocation(locationGraph).closestLocationDataString(locationNameList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * Method used to initProcess venues and get location list and validLocationList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private void initProcessVenues() throws TimeBookInvalidState, ConnectException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ProcessVenues processVenues;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        processVenues \u003d new ProcessVenues().process();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        locations \u003d processVenues.getLocations();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        validLocationList \u003d processVenues.getValidLocationList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * Method used to initialise the full location graph"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @throws TimeBookInvalidState"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @throws ConnectException"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private void initLocationGraph() throws TimeBookInvalidState, ConnectException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        locationGraph \u003d new LocationGraph(locations, validLocationList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        new ProcessLocationGraph(locationGraph).process();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.core.AppSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMapping;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMappingList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.Role;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadYear;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.SemesterNo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns the user prefs\u0027 App settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AppSettings getAppSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Sets the user prefs\u0027 App settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setAppSettings(AppSettings appSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns the App setting\u0027s acadYear."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AcadYear getDefaultAcadYear();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns the App setting\u0027s semesterNo."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public SemesterNo getDefaultSemesterNo();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    ObservableList\u003cPerson\u003e getObservablePersonList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns the list of Persons."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    PersonList getPersonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Adds a person with personDescriptor to the list of Persons."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Person addPerson(PersonDescriptor personDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Finds a person with a given Name."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Person findPerson(Name name);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Finds a person with a given PersonId."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Person findPerson(PersonId personId);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Adds an Event to the schedule of a Person with the given Name."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    boolean addEvent(Name name, Event event);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Edits the person with given Name with given PersonDescriptor."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Person editPerson(Name name, PersonDescriptor personDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Deletes a person with given PersonId."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    boolean deletePerson(PersonId personId);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns the list of GroupIds which person with PersonId is in."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    ArrayList\u003cGroupId\u003e findGroupsOfPerson(PersonId personId);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if current event of Person clashes with other events in the schedule."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    boolean isEventClash(Name name, Event event);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Group Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns the list of Groups."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    GroupList getGroupList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Returns an observable list of groups."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    ObservableList\u003cGroup\u003e getObservableGroupList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Adds a Group with groupDescriptor into the list of Groups."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Group addGroup(GroupDescriptor groupDescriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Edits the person with given Name with given PersonDescriptor."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Group editGroup(GroupName groupName, GroupDescriptor groupDescriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Finds a Group with given GroupName."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Group findGroup(GroupName groupName);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Finds a Group with given GroupId."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Group findGroup(GroupId groupId);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Deletes a Group with given GroupId."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    boolean deleteGroup(GroupId groupId);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns a list of PersonId that is in a Group with given GroupId."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    ArrayList\u003cPersonId\u003e findPersonsOfGroup(GroupId groupId);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Mapping Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns the list of PersonToGroupMappings."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    PersonToGroupMappingList getPersonToGroupMappingList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Adds a person to group mapping to the list of mappings."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    boolean addPersonToGroupMapping(PersonToGroupMapping mapping);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns a mapping with given PersonId and GroupId."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    PersonToGroupMapping findPersonToGroupMapping(PersonId personId, GroupId groupId);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Deletes a mapping with given PersonId and GroupId."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    boolean deletePersonToGroupMapping(PersonToGroupMapping mapping);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Deletes all mappings with PersonId."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deletePersonFromMapping(PersonId personId);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Deletes all mappings with GroupId."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deleteGroupFromMapping(GroupId groupId);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Finds the role of the specified mapping."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Role findRole(PersonId personId, GroupId groupId);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UI Model \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns the current main window display model."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    DetailWindowDisplay getDetailWindowDisplay();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns the current side panel display model."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    SidePanelDisplay getSidePanelDisplay();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Updates the current main window display."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    void updateDetailWindowDisplay(DetailWindowDisplay detailWindowDisplay);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Updates the current main window display with a Person\u0027s schedule."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    void updateDetailWindowDisplay(Name name, LocalDateTime time, DetailWindowDisplayType type);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Updates the current main window display with a Group\u0027s schedule."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    void updateDetailWindowDisplay(GroupName groupName, LocalDateTime time, DetailWindowDisplayType type);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Updates the current side panel display."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void updateSidePanelDisplay(SidePanelDisplay sidePanelDisplay);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Updates the current side panel display of a type."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void updateSidePanelDisplay(SidePanelDisplayType type);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Suggesters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns a list of Person\u0027s names that starts with prefix."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    ArrayList\u003cString\u003e personSuggester(String prefix);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns a list of Person\u0027s names that starts with prefix in a Group."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    ArrayList\u003cString\u003e personSuggester(String prefix, String groupName);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns a list of Group\u0027s names that starts with prefix."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    ArrayList\u003cString\u003e groupSuggester(String prefix);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NusModsData \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    NusModsData getNusModsData();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns a module for the given ModuleId (academic year and module code)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Tries to find the module from the 3 sources in order:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *      1. Model.NusModsData.ModuleList (in-memory)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *      2. Cache Folder"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *      3. NusModsApi"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    Module findModule(ModuleId id);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    String getAcadSemStartDateString(AcadYear acadYear, SemesterNo semesterNo);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    List\u003cString\u003e getHolidayDateStrings();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    ModuleList getModuleList();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GoogleMaps \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * Returns the common closest location."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationNameList ArrayList of venues object"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    Hashtable\u003cString, Object\u003e getClosestLocationData(ArrayList\u003cString\u003e locationNameList);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * Returns the common closest location."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationNameList ArrayList of string object"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    String getClosestLocationDataString(ArrayList\u003cString\u003e locationNameList);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Others \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns a summary of all Persons, Groups, and Mappings."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    String list();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    TimeBook getTimeBook();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 45,
      "klementtan": 16,
      "Alvinnyk": 205,
      "YiJiee": 11,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.core.AppSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.WeekSchedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.GroupDisplay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.PersonDisplay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMapping;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMappingList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.Role;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadYear;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.SemesterNo;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.PersonList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Schedule;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.websocket.Cache;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    //To Do."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    //private final FilteredList\u003cGroup\u003e groupFilteredList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private TimeBook timeBook \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private PersonList personList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private PersonToGroupMappingList personToGroupMappingList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private NusModsData nusModsData;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private GmapsModelManager gmapsModelManager;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    // UI display"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private DetailWindowDisplay detailWindowDisplay;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private SidePanelDisplay sidePanelDisplay;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        PersonList personList,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        GroupList groupList,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        PersonToGroupMappingList personToGroupMappingList,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personList \u003d personList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personToGroupMappingList \u003d personToGroupMappingList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, TimeBook timeBook,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                        NusModsData nusModsData, ReadOnlyUserPrefs userPrefs, GmapsModelManager gmapsModelManager) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.timeBook \u003d timeBook;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personList \u003d timeBook.getPersonList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupList \u003d timeBook.getGroupList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personToGroupMappingList \u003d timeBook.getPersonToGroupMappingList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.gmapsModelManager \u003d gmapsModelManager;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.nusModsData \u003d nusModsData;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int personCounter \u003d -1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c personList.getPersons().size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (personList.getPersons().get(i).getPersonId().getIdentifier() \u003e personCounter) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                personCounter \u003d personList.getPersons().get(i).getPersonId().getIdentifier();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int groupCounter \u003d -1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c groupList.getGroups().size(); i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (groupList.getGroups().get(i).getGroupId().getIdentifier() \u003e groupCounter) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                groupCounter \u003d groupList.getGroups().get(i).getGroupId().getIdentifier();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // sets the appropriate counter for person and group constructor"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person.setCounter(personCounter + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group.setCounter(groupCounter + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this(addressBook, new PersonList(), new GroupList(), new PersonToGroupMappingList(), userPrefs);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ModelManager(PersonList personList, GroupList groupList, PersonToGroupMappingList personToGroupMappingList) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this(new AddressBook(), personList, groupList, personToGroupMappingList, new UserPrefs());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //this.addressBook.setPersons(personList.getPersons());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.timeBook \u003d new TimeBook(personList, groupList, personToGroupMappingList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ModelManager(TimeBook timeBook) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this(new AddressBook(), timeBook, new NusModsData(), new UserPrefs(), new GmapsModelManager());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this(new AddressBook(), new PersonList(), new GroupList(), new PersonToGroupMappingList(), new UserPrefs());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AppSettings getAppSettings() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return userPrefs.getAppSettings();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setAppSettings(AppSettings appSettings) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(appSettings);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        userPrefs.setAppSettings(appSettings);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AcadYear getDefaultAcadYear() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return userPrefs.getAcadYear();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public SemesterNo getDefaultSemesterNo() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return userPrefs.getSemesterNo();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonList getPersonList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personList;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ObservableList\u003cPerson\u003e getObservablePersonList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return timeBook.getUnmodifiablePersonList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Person addPerson(PersonDescriptor personDescriptor) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person isAdded \u003d this.personList.addPerson(personDescriptor);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return isAdded;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Person findPerson(Name name) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d personList.findPerson(name);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (person !\u003d null) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return person;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Person findPerson(PersonId personId) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d personList.findPerson(personId);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (person !\u003d null) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return person;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean addEvent(Name name, Event event) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person p \u003d personList.findPerson(name);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (p !\u003d null) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            p.addEvent(event);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Person editPerson(Name name, PersonDescriptor personDescriptor) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personList.editPerson(name, personDescriptor);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean deletePerson(PersonId personId) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        deletePersonFromMapping(personId);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personList.deletePerson(personId);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cGroupId\u003e findGroupsOfPerson(PersonId personId) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personToGroupMappingList.findGroupsOfPerson(personId);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isEventClash(Name name, Event event) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d findPerson(name);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Schedule schedule \u003d person.getSchedule();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (schedule.isClash(event)) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Group Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupList getGroupList() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupList;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ObservableList\u003cGroup\u003e getObservableGroupList() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return timeBook.getUnmodifiableGroupList();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Group addGroup(GroupDescriptor groupDescriptor) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group isAdded \u003d this.groupList.addGroup(groupDescriptor);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return isAdded;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Group editGroup(GroupName groupName, GroupDescriptor groupDescriptor) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupList.editGroup(groupName, groupDescriptor);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Group findGroup(GroupName groupName) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d groupList.findGroup(groupName);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (group !\u003d null) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return group;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Group findGroup(GroupId groupId) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d groupList.findGroup(groupId);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (group !\u003d null) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return group;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean deleteGroup(GroupId groupId) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        deleteGroupFromMapping(groupId);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupList.deleteGroup(groupId);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cPersonId\u003e findPersonsOfGroup(GroupId groupId) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personToGroupMappingList.findPersonsOfGroup(groupId);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Mapping Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonToGroupMappingList getPersonToGroupMappingList() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personToGroupMappingList;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean addPersonToGroupMapping(PersonToGroupMapping mapping) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personToGroupMappingList.addPersonToGroupMapping(mapping);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonToGroupMapping findPersonToGroupMapping(PersonId personId, GroupId groupId) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personToGroupMappingList.findPersonToGroupMapping(personId, groupId);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean deletePersonToGroupMapping(PersonToGroupMapping mapping) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personToGroupMappingList.deletePersonToGroupMapping(mapping);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void deletePersonFromMapping(PersonId personId) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personToGroupMappingList.deletePersonFromMapping(personId);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void deleteGroupFromMapping(GroupId groupId) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personToGroupMappingList.deleteGroupFromMapping(groupId);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Role findRole(PersonId personId, GroupId groupId) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personToGroupMappingList.findRole(personId, groupId);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UI Model \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public DetailWindowDisplay getDetailWindowDisplay() {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return detailWindowDisplay;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public SidePanelDisplay getSidePanelDisplay() {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return sidePanelDisplay;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void updateDetailWindowDisplay(DetailWindowDisplay detailWindowDisplay) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.detailWindowDisplay \u003d detailWindowDisplay;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void updateDetailWindowDisplay(Name name, LocalDateTime time, DetailWindowDisplayType type) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cWeekSchedule\u003e weekSchedules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        WeekSchedule weekSchedule \u003d new WeekSchedule(name.toString(), time, findPerson(name), Role.emptyRole());"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        weekSchedules.add(weekSchedule);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        DetailWindowDisplay detailWindowDisplay \u003d new DetailWindowDisplay(weekSchedules, type);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        updateDetailWindowDisplay(detailWindowDisplay);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void updateDetailWindowDisplay(GroupName groupName, LocalDateTime time, DetailWindowDisplayType type) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d groupList.findGroup(groupName);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupId groupId \u003d group.getGroupId();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        GroupDisplay groupDisplay \u003d new GroupDisplay(group);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cPersonId\u003e personIds \u003d findPersonsOfGroup(group.getGroupId());"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cWeekSchedule\u003e weekSchedules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c personIds.size(); i++) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Person person \u003d findPerson(personIds.get(i));"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Role role \u003d findRole(personIds.get(i), groupId);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                role \u003d Role.emptyRole();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            WeekSchedule weekSchedule \u003d new WeekSchedule(groupName.toString(), time, person, role);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            weekSchedules.add(weekSchedule);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        DetailWindowDisplay detailWindowDisplay \u003d new DetailWindowDisplay(weekSchedules, type, groupDisplay);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        updateDetailWindowDisplay(detailWindowDisplay);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void updateSidePanelDisplay(SidePanelDisplay sidePanelDisplay) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.sidePanelDisplay \u003d sidePanelDisplay;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void updateSidePanelDisplay(SidePanelDisplayType type) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        SidePanelDisplay sidePanelDisplay;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cPersonDisplay\u003e displayPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cGroupDisplay\u003e displayGroups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cPerson\u003e persons \u003d timeBook.getPersonList().getPersons();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cGroup\u003e groups \u003d timeBook.getGroupList().getGroups();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            displayPersons.add(new PersonDisplay(persons.get(i)));"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            displayGroups.add(new GroupDisplay(groups.get(i)));"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        sidePanelDisplay \u003d new SidePanelDisplay(displayPersons, displayGroups, type);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        updateSidePanelDisplay(sidePanelDisplay);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Suggesters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cString\u003e personSuggester(String prefix) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cString\u003e suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cPerson\u003e persons \u003d timeBook.getPersonList().getPersons();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String name \u003d persons.get(i).getName().toString();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (name.startsWith(prefix)) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                suggestions.add(name);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cString\u003e personSuggester(String prefix, String groupName) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cString\u003e suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d findGroup(new GroupName(groupName));"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (group \u003d\u003d null) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return suggestions;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cPersonId\u003e personIds \u003d findPersonsOfGroup(group.getGroupId());"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c personIds.size(); i++) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String name \u003d findPerson(personIds.get(i)).getName().toString();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (name.startsWith(prefix)) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                suggestions.add(name);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cString\u003e groupSuggester(String prefix) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cString\u003e suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cGroup\u003e groups \u003d timeBook.getGroupList().getGroups();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String name \u003d groups.get(i).getGroupName().toString();"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (name.startsWith(prefix)) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                suggestions.add(name);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NusModsData \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public NusModsData getNusModsData() {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return nusModsData;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Module findModule(ModuleId moduleId) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Module module;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            module \u003d nusModsData.getModuleList().findModule(moduleId);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (ModuleNotFoundException ex1) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Optional\u003cModule\u003e moduleOptional \u003d Cache.loadModule(moduleId);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (moduleOptional.isEmpty()) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            module \u003d moduleOptional.get();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleList getModuleList() {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return nusModsData.getModuleList();"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        nusModsData.addModule(module);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String getAcadSemStartDateString(AcadYear acadYear, SemesterNo semesterNo) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return nusModsData.getAcadCalendar().getStartDateString(acadYear, semesterNo);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    };"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public List\u003cString\u003e getHolidayDateStrings() {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return nusModsData.getHolidays().getHolidayDates();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Gmaps \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public Hashtable\u003cString, Object\u003e getClosestLocationData(ArrayList\u003cString\u003e locationNameList) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return gmapsModelManager.closestLocationData(locationNameList);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public String getClosestLocationDataString(ArrayList\u003cString\u003e locationNameList) {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return gmapsModelManager.closestLocationDataString(locationNameList);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Others \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String list() {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"PERSONS:\\n\";"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d personList.toString();"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"--------------------------------------------\\n\";"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"GROUPS:\\n\";"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d groupList.toString();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"--------------------------------------------\\n\";"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"MAPPINGS: \\n\";"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d personToGroupMappingList.toString();"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public TimeBook getTimeBook() {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.timeBook;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 71,
      "klementtan": 18,
      "Alvinnyk": 349,
      "YiJiee": 37,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/NusModsData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadCalendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Holidays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleSummaryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Contains all the information the app needs from NUSMods such as modules, academic calendar, holidays, etc."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class NusModsData {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private ModuleSummaryList moduleSummaryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private ModuleList moduleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private AcadCalendar acadCalendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private Holidays holidays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public NusModsData() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleList \u003d new ModuleList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public NusModsData(ModuleList moduleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleSummaryList getModuleSummaryList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return moduleSummaryList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setModuleSummaryList(ModuleSummaryList moduleSummaryList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleSummaryList \u003d moduleSummaryList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleList getModuleList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setModuleList(ModuleList moduleList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AcadCalendar getAcadCalendar() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return acadCalendar;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        moduleList.addModule(module);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setAcadCalendar(AcadCalendar acadCalendar) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.acadCalendar \u003d acadCalendar;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Holidays getHolidays() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return holidays;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setHolidays(Holidays holidays) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.holidays \u003d holidays;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Returns an unmodifiable view of the groups list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * This list will not contain any duplicate groups."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    ObservableList\u003cGroup\u003e getGroupList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.core.AppSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    AppSettings getAppSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    Path getTimeBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TimeBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMapping;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMappingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Contains all the information about the TimeBook."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TimeBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private PersonList personList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private PersonToGroupMappingList personToGroupMappingList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public TimeBook() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personList \u003d new PersonList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personToGroupMappingList \u003d new PersonToGroupMappingList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public TimeBook(PersonList personList,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    GroupList groupList,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    PersonToGroupMappingList personToGroupMappingList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personList \u003d personList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personToGroupMappingList \u003d personToGroupMappingList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personList.addPerson(person);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupList.addGroup(group);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void addMapping(PersonToGroupMapping map) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personToGroupMappingList.addPersonToGroupMapping(map);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonList getPersonList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.personList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ObservableList\u003cPerson\u003e getUnmodifiablePersonList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupList getGroupList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.groupList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ObservableList\u003cGroup\u003e getUnmodifiableGroupList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonToGroupMappingList getPersonToGroupMappingList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.personToGroupMappingList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ObservableList\u003cPersonToGroupMapping\u003e getUnmodifiableMappingList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personToGroupMappingList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.core.AppSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadYear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.SemesterNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private AppSettings appSettings \u003d new AppSettings();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Path timeBookFilePath \u003d Paths.get(\"data\", \"timebook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        setAppSettings(newUserPrefs.getAppSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AppSettings getAppSettings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return appSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setAppSettings(AppSettings appSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.appSettings \u003d appSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AcadYear getAcadYear() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return appSettings.getAcadYear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public SemesterNo getSemesterNo() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return appSettings.getSemesterNo();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Path getTimeBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return timeBookFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setTimeBookFilePath(Path timeBookFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(timeBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.timeBookFilePath \u003d timeBookFilePath;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return appSettings.equals(o.appSettings)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                \u0026\u0026 guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                \u0026\u0026 timeBookFilePath.equals(o.timeBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Objects.hash(appSettings, guiSettings, addressBookFilePath, timeBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        sb.append(\"App Settings : \" + appSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        sb.append(\"\\nGui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        sb.append(\"\\nAddressBook file location: \" + addressBookFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        sb.append(\"\\nTimeBook file location : \" + timeBookFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 30,
      "Alvinnyk": 12,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/detailwindow/DaySchedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.model.display.detailwindow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * A schedule of Timeslots of a day."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class DaySchedule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private LocalDate day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ArrayList\u003cDayTimeslot\u003e timeslots;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public DaySchedule(LocalDate day) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.timeslots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void addTimeslot(DayTimeslot timeslot) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        timeslots.add(timeslot);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public LocalDate getDay() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setDay(LocalDate day) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cDayTimeslot\u003e getTimeslots() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setTimeslots(ArrayList\u003cDayTimeslot\u003e timeslots) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.timeslots \u003d timeslots;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d day.toString() + \":\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c timeslots.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d timeslots.get(i).toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 50,
      "YiJiee": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/detailwindow/DayTimeslot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.model.display.detailwindow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * A timeslot of a day."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class DayTimeslot {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public DayTimeslot(String eventName, LocalTime startTime, LocalTime endTime, Venue venue) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Venue getVenue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if there is a clash between the timeslot and given time."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param time to check for clash"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isClash(LocalTime time) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (time.isBefore(startTime) || time.isAfter(endTime)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        output +\u003d eventName + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + startTime.toString() + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + endTime.toString() + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + venue.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 64,
      "YiJiee": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/detailwindow/DetailWindowDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.model.display.detailwindow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.GroupDisplay;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Main window display model."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class DetailWindowDisplay {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ArrayList\u003cWeekSchedule\u003e weekSchedules;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private DetailWindowDisplayType detailWindowDisplayType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private GroupDisplay groupDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private FreeSchedule freeSchedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public DetailWindowDisplay(ArrayList\u003cWeekSchedule\u003e weekSchedules, DetailWindowDisplayType detailWindowDisplayType,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                               GroupDisplay groupDisplay) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.detailWindowDisplayType \u003d detailWindowDisplayType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.weekSchedules \u003d weekSchedules;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.groupDisplay \u003d groupDisplay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.freeSchedule \u003d new FreeSchedule(this.weekSchedules);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public DetailWindowDisplay(ArrayList\u003cWeekSchedule\u003e weekSchedules, DetailWindowDisplayType detailWindowDisplayType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.detailWindowDisplayType \u003d detailWindowDisplayType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.weekSchedules \u003d weekSchedules;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.groupDisplay \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.freeSchedule \u003d new FreeSchedule(this.weekSchedules);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public DetailWindowDisplay() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.weekSchedules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.detailWindowDisplayType \u003d DetailWindowDisplayType.DEFAULT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.groupDisplay \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.freeSchedule \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public DetailWindowDisplay(DetailWindowDisplayType type) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.weekSchedules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.detailWindowDisplayType \u003d type;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.groupDisplay \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.freeSchedule \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public DetailWindowDisplayType getDetailWindowDisplayType() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return detailWindowDisplayType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ArrayList\u003cWeekSchedule\u003e getWeekSchedules() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return weekSchedules;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GroupDisplay getGroupDisplay() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return groupDisplay;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public FreeSchedule getFreeSchedule() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return freeSchedule;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 9,
      "YiJiee": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/detailwindow/DetailWindowDisplayType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.model.display.detailwindow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Main window display type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public enum DetailWindowDisplayType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    GROUP,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    PERSON,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    DEFAULT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    NONE"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/detailwindow/FreeSchedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.display.detailwindow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Venue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * A FreeSchedule class that represents the free timeslot among the Persons for the week."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class FreeSchedule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final int DAYS_OF_THE_WEEK \u003d 7;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final LocalTime STARTTIME \u003d LocalTime.of(00, 00);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final LocalTime ENDTIME \u003d LocalTime.of(23, 59);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private HashMap\u003cDayOfWeek, ArrayList\u003cFreeTimeslot\u003e\u003e freeSchedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public FreeSchedule(ArrayList\u003cWeekSchedule\u003e weekSchedules) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        freeSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d DAYS_OF_THE_WEEK; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            freeSchedule.put(DayOfWeek.of(i), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            LocalTime currentTime \u003d STARTTIME;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            ArrayList\u003cVenue\u003e lastVenues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            // initialize last venues to null for each person"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            for (int j \u003d 0; j \u003c weekSchedules.size(); j++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                lastVenues.add(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            boolean isClash;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            LocalTime newFreeStartTime \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                isClash \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                // loop through each person"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                for (int j \u003d 0; j \u003c weekSchedules.size(); j++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    ArrayList\u003cDayTimeslot\u003e timeslots \u003d weekSchedules.get(j).getWeekSchedule().get(DayOfWeek.of(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    // loop through each timeslot"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    for (int k \u003d 0; k \u003c timeslots.size(); k++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        // record the latest venue for each clash"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        if (timeslots.get(k).isClash(currentTime)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            isClash \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            lastVenues.set(j, timeslots.get(k).getVenue());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (!isClash) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    if (newFreeStartTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        newFreeStartTime \u003d currentTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    if (newFreeStartTime !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        freeSchedule.get(DayOfWeek.of(i))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                                .add(new FreeTimeslot(new ArrayList\u003c\u003e(lastVenues), newFreeStartTime, currentTime));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        newFreeStartTime \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (currentTime.equals(ENDTIME)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    if (!isClash) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        freeSchedule.get(DayOfWeek.of(i))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                                .add(new FreeTimeslot(new ArrayList\u003c\u003e(lastVenues), newFreeStartTime, currentTime));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                currentTime \u003d currentTime.plusMinutes(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public HashMap\u003cDayOfWeek, ArrayList\u003cFreeTimeslot\u003e\u003e getFreeSchedule() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return freeSchedule;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 86,
      "YiJiee": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/detailwindow/FreeTimeslot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.display.detailwindow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Venue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * A Free Timeslot class that represents the free time of the group schedule and the previous locations of the members."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class FreeTimeslot {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ArrayList\u003cVenue\u003e venues;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public FreeTimeslot(ArrayList\u003cVenue\u003e venues, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.venues \u003d venues;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c this.venues.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (this.venues.get(i) \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                this.venues.remove(i);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                i--;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cVenue\u003e getVenues() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return venues;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setVenues(ArrayList\u003cVenue\u003e venues) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.venues \u003d venues;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setStartTime(LocalTime startTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setEndTime(LocalTime endTime) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/detailwindow/WeekSchedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.model.display.detailwindow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.PersonDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.Role;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.schedule.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.schedule.Timeslot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.schedule.Venue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Schedule of timeslots for the week."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class WeekSchedule {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final int DAYS_OF_THE_WEEK \u003d 7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final LocalTime STARTTIME \u003d LocalTime.of(00, 00);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final LocalTime ENDTIME \u003d LocalTime.of(23, 59);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private String weekScheduleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private PersonDisplay personDisplay;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private HashMap\u003cDayOfWeek, ArrayList\u003cDayTimeslot\u003e\u003e weekSchedule;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public WeekSchedule(String weekScheduleName, LocalDateTime now, Person person, Role role) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.weekScheduleName \u003d weekScheduleName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        LocalDate currentDate \u003d now.toLocalDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        weekSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.personDisplay \u003d new PersonDisplay(person);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Schedule personSchedule \u003d person.getSchedule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d personSchedule.getEvents();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d DAYS_OF_THE_WEEK; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            weekSchedule.put(DayOfWeek.of(i), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int e \u003d 0; e \u003c events.size(); e++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Event currentEvent \u003d events.get(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            String eventName \u003d currentEvent.getEventName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ArrayList\u003cTimeslot\u003e timeslots \u003d currentEvent.getTimeslots();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            for (int t \u003d 0; t \u003c timeslots.size(); t++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                Timeslot currentTimeslot \u003d timeslots.get(t);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                LocalDateTime currentStartTime \u003d currentTimeslot.getStartTime();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                LocalDateTime currentEndTime \u003d currentTimeslot.getEndTime();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                Venue currentVenue \u003d currentTimeslot.getVenue();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                if (now.toLocalDate().plusDays(7).isAfter(currentStartTime.toLocalDate())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                        \u0026\u0026 now.toLocalDate().minusDays(1).isBefore(currentStartTime.toLocalDate())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    //Checks to see if the currentStartTime is within the upcoming 7 days."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    DayTimeslot timeslot \u003d new DayTimeslot("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                            eventName,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                            currentStartTime.toLocalTime(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                            currentEndTime.toLocalTime(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                            currentVenue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    weekSchedule.get(currentStartTime.getDayOfWeek()).add(timeslot);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    weekSchedule.get(currentStartTime.getDayOfWeek()).sort("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            Comparator.comparing(DayTimeslot::getStartTime)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public PersonDisplay getPersonDisplay() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return this.personDisplay;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.role;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public String getWeekScheduleName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return weekScheduleName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public HashMap\u003cDayOfWeek, ArrayList\u003cDayTimeslot\u003e\u003e getWeekSchedule() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return weekSchedule;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    // for debugging purposes only"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        output +\u003d \"\u003d\u003d\u003d\u003d\u003d\" + weekScheduleName + \" for \" + personDisplay.getName().toString() + \"\u003d\u003d\u003d\u003d\u003d\" + \"\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ArrayList\u003cDayTimeslot\u003e dayTimeslots \u003d weekSchedule.get(DayOfWeek.of(i));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            output +\u003d DayOfWeek.of(i) + \":\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            for (DayTimeslot d : dayTimeslots) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                String timeSlotDetails \u003d d.getStartTime().toString() + \"---\" + d.getEndTime().toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                output +\u003d timeSlotDetails + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 13,
      "YiJiee": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/sidepanel/Display.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.display.sidepanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * An abstract display object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public abstract class Display {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/sidepanel/GroupDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.display.sidepanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescription;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupRemark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Group display model"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class GroupDisplay extends Display {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final GroupName groupName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final GroupDescription groupDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final GroupRemark groupRemark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupDisplay(GroupName groupName, GroupRemark groupRemark, GroupDescription groupDescription) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescription \u003d groupDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupRemark \u003d groupRemark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupDisplay(Group group) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d group.getGroupName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescription \u003d group.getGroupDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupRemark \u003d group.getGroupRemark();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupName getGroupName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupRemark getGroupRemark() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupRemark;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupDescription getGroupDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupDescription;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/sidepanel/PersonDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.display.sidepanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Person display model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class PersonDisplay extends Display {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDisplay(Name name, Phone phone, Email email, Address address, Remark remark, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDisplay(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d person.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.phone \u003d person.getPhone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.email \u003d person.getEmail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.address \u003d person.getAddress();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.remark \u003d person.getRemark();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.tags \u003d person.getTags();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Checks if the other PersonDisplay object is equivalent to this PersonDisplay object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param person The other PersonDisplay that is being compared."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return True if it the other PersonDisplay is equivalent to this PersonDisplay."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean isSamePerson(PersonDisplay person) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (person \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else if (person instanceof PersonDisplay) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            PersonDisplay p \u003d (PersonDisplay) person;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return this.name.equals(p.name)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u0026\u0026 this.phone.equals(p.phone)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u0026\u0026 this.email.equals(p.email)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u0026\u0026 this.address.equals(p.address)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u0026\u0026 this.remark.equals(p.remark)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u0026\u0026 this.tags.equals(p.tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 67,
      "YiJiee": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/sidepanel/SidePanelDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.display.sidepanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Side Panel display model."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class SidePanelDisplay {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ArrayList\u003cPersonDisplay\u003e personDisplays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ArrayList\u003cGroupDisplay\u003e groupDisplays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private SidePanelDisplayType sidePanelDisplayType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public SidePanelDisplay(ArrayList\u003cPersonDisplay\u003e personDisplays, ArrayList\u003cGroupDisplay\u003e groupDisplays,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                            SidePanelDisplayType sidePanelDisplayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.personDisplays \u003d personDisplays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.groupDisplays \u003d groupDisplays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.sidePanelDisplayType \u003d sidePanelDisplayType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ArrayList\u003cPersonDisplay\u003e getPersonDisplay() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return personDisplays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ArrayList\u003cGroupDisplay\u003e getGroupDisplay() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return groupDisplays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public SidePanelDisplayType getSidePanelDisplayType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return sidePanelDisplayType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 22,
      "YiJiee": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/display/sidepanel/SidePanelDisplayType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.display.sidepanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Side Panel display type."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public enum SidePanelDisplayType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    GROUPS,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    PERSONS"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/gmaps/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.model.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * Represent a location object for the various venues in NUS"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class Location implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private static final long serialVersionUID \u003d 6529685098267757691L;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private final String locationName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private String validLocation \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public Location(String locationName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        requireNonNull(locationName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.locationName \u003d locationName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public void setValidLocation(String googleRecognisedLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.validLocation \u003d googleRecognisedLocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public String getLocationName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return locationName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public String getValidLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return validLocation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return other \u003d\u003d this || other instanceof Location"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                \u0026\u0026 ((Location) other).getLocationName().equals(locationName)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                \u0026\u0026 ((Location) other).getValidLocation().equals(validLocation);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return \"Location: \" + locationName + \", Google recognised location: \" + validLocation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/gmaps/LocationGraph.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.model.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.internal.gmaps.LocationArrayListUtils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * This is the graph object that contains the information for location vertex"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class LocationGraph {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ArrayList\u003cLocation\u003e locations;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ArrayList\u003cString\u003e validLocationList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ArrayList\u003cArrayList\u003cLong\u003e\u003e distanceMatrix \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public LocationGraph(ArrayList\u003cLocation\u003e locations, ArrayList\u003cString\u003e validLocationList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.locations \u003d locations;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.validLocationList \u003d validLocationList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        int validLocationListSize \u003d validLocationList.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        for (int i \u003d 0; i \u003c validLocationListSize; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            distanceMatrix.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private LocationGraph(ArrayList\u003cLocation\u003e locations, ArrayList\u003cString\u003e validLocationList,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "             ArrayList\u003cArrayList\u003cLong\u003e\u003e distanceMatrix) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.locations \u003d locations;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.validLocationList \u003d validLocationList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.distanceMatrix \u003d distanceMatrix;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ArrayList\u003cString\u003e getValidLocationList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return validLocationList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ArrayList\u003cLocation\u003e getLocations() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return locations;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public int getLocationIndex(String locationName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return LocationArrayListUtils.getIndex(locations, locationName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ArrayList\u003cLong\u003e getLocationRow(int index) throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (distanceMatrix.size() \u003c\u003d index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            throw new IllegalValueException(\"Index \" + index + \"exceeds the size of the matrix\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            System.out.println(distanceMatrix.size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            return distanceMatrix.get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ArrayList\u003cArrayList\u003cLong\u003e\u003e getDistanceMatrix() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return distanceMatrix;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    //TODO refactor out the return statement"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public LocationGraph setMatrixRow(int rowNum, ArrayList\u003cLong\u003e row) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        distanceMatrix.get(rowNum).addAll(row);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return new LocationGraph(locations, validLocationList, distanceMatrix);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Group.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * A group."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static Integer counter \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final GroupId groupId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupName groupName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupDescription groupDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupRemark groupRemark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Group(GroupDescriptor groupDescriptor) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupDescriptor.getGroupName();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupRemark \u003d groupDescriptor.getGroupRemark();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescription \u003d groupDescriptor.getGroupDescription();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupId \u003d new GroupId(counter);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        counter +\u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Group(GroupId groupId,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                 GroupName groupName,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                 GroupDescription groupDescription,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                 GroupRemark groupRemark) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupId \u003d groupId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescription \u003d groupDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupRemark \u003d groupRemark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static void setCounter(int i) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        counter \u003d i;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Reset counter for testing purposes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static void counterReset() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        counter \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts to String."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"(\" + groupId.toString() + \") \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d groupName.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Prints out all details of the group."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String details() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String notAvailable \u003d \"NOT AVAILABLE\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d this.toString() + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"Description: \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (groupRemark \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d notAvailable + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d groupRemark.toString() + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if other group has the same details."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param other group to be compared"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isSameGroup(Group other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!other.getGroupRemark().equals(this.groupRemark)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!other.getGroupName().equals(this.groupName)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!other.getGroupDescription().equals(this.groupDescription)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if other group is same as this group."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param other group to be compared"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Group other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!other.getGroupId().equals(this.groupId)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!this.isSameGroup(other)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupRemark getGroupRemark() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupRemark;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setGroupRemark(GroupRemark groupRemark) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupRemark \u003d groupRemark;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupName getGroupName() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.groupName;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setGroupName(GroupName groupName) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupDescription getGroupDescription() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupDescription;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setGroupDescription(GroupDescription groupDescription) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescription \u003d groupDescription;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupId getGroupId() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.groupId;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GroupDescription.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Description of the Group."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class GroupDescription {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupDescription(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupDescription() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        description \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static GroupDescription emptyDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new GroupDescription();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if this GroupDescription is equal to other GroupDescription."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param other to be compared"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(GroupDescription other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (other.toString().equals(this.description)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GroupDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Descriptor of a group for group construction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class GroupDescriptor {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final GroupName DEFAULT_GROUPNAME \u003d GroupName.emptyGroupName();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final GroupDescription DEFAULT_GROUPDESCRIPTION \u003d GroupDescription.emptyDescription();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final GroupRemark DEFAULT_GROUPREMARK \u003d GroupRemark.emptyRemark();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupName groupName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupRemark groupRemark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupDescription groupDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupDescriptor() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d DEFAULT_GROUPNAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupRemark \u003d DEFAULT_GROUPREMARK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescription \u003d DEFAULT_GROUPDESCRIPTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupDescriptor(GroupName groupName, GroupDescription groupDescription, GroupRemark groupRemark) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescription \u003d groupDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupRemark \u003d groupRemark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if any field has been edited."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (this.groupName.equals(DEFAULT_GROUPNAME)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 this.groupRemark.equals(DEFAULT_GROUPREMARK)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 this.groupDescription.equals(DEFAULT_GROUPDESCRIPTION)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Compares if this GroupDescriptor is equal to another."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param groupDescriptor to compare"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(GroupDescriptor groupDescriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (groupDescriptor \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (this.groupName.equals(groupDescriptor.groupName)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 this.groupRemark.equals(groupDescriptor.groupRemark)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupName getGroupName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setGroupName(GroupName groupName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupDescription getGroupDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupDescription;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setGroupDescription(GroupDescription groupDescription) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescription \u003d groupDescription;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupRemark getGroupRemark() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupRemark;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setGroupRemark(GroupRemark groupRemark) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupRemark \u003d groupRemark;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GroupId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Identifier of a Group."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class GroupId {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Integer identifier;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupId(Integer id) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.identifier \u003d id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupId(String id) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.identifier \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Integer getIdentifier() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return identifier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return identifier.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if this GroupId is equivalent to another."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param id other GroupId"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return true is they are equivalent, false otherwise"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(GroupId id) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (identifier.intValue() \u003d\u003d id.getIdentifier().intValue()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GroupList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * List of Groups."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class GroupList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ArrayList\u003cGroup\u003e groups;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groups \u003d new ArrayList\u003cGroup\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Adds a Group to the list of groups."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param groupDescriptor group to be added"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return true when successfully added group"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Group addGroup(GroupDescriptor groupDescriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (findGroup(groupDescriptor.getGroupName()) \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Group group \u003d new Group(groupDescriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.groups.add(group);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return group;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groups.add(group);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Deletes a group based on GroupId."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param groupId groupId to find the group to be deleted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return true when successfully deleted group"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean deleteGroup(GroupId groupId) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (groups.get(i).getGroupId().equals(groupId)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                groups.remove(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Edits a group based on given GroupDescriptor."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param groupName       of group to be edited"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param groupDescriptor how the group should be edited"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return group"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Group editGroup(GroupName groupName, GroupDescriptor groupDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group toEdit \u003d findGroup(groupName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (groupDescriptor.getGroupName() !\u003d null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 !groupDescriptor.getGroupName().equals(GroupName.emptyGroupName())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            GroupName otherName \u003d groupDescriptor.getGroupName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (findGroup(otherName) !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            toEdit.setGroupName(groupDescriptor.getGroupName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (groupDescriptor.getGroupRemark() !\u003d null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 !groupDescriptor.getGroupRemark().equals(GroupRemark.emptyRemark())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            toEdit.setGroupRemark(groupDescriptor.getGroupRemark());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (groupDescriptor.getGroupDescription() !\u003d null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 !groupDescriptor.getGroupDescription().equals(GroupDescription.emptyDescription())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            toEdit.setGroupDescription(groupDescriptor.getGroupDescription());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return toEdit;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Finds a group with the same GroupName and returns the Group."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param groupName GroupName of the Group"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Group that is found"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Group findGroup(GroupName groupName) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (groups.get(i).getGroupName().toString().equals(groupName.toString())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return groups.get(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Finds a group with the same GroupId and returns the Group."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param groupId GroupId of the Group"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Group that is found"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Group findGroup(GroupId groupId) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (groups.get(i).getGroupId().equals(groupId)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return groups.get(i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts to String."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d groups.get(i).toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Retrun an unmodifiable observable list of Groups."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ObservableList\u003cGroup\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ObservableList\u003cGroup\u003e observableList \u003d FXCollections.observableArrayList(groups);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return FXCollections.unmodifiableObservableList(observableList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns an ArrayList of Groups."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return ArrayList"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cGroup\u003e getGroups() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.groups;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GroupName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Name of the Group"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class GroupName {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String groupName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupName(String groupName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupName \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.groupName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static GroupName emptyGroupName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new GroupName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if this GroupName is equal to other GroupName."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param other to be compared"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(GroupName other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (other.toString().equals(this.groupName)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GroupRemark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * GroupRemark of a Group."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class GroupRemark {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public final String remark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupRemark(String remark) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupRemark() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        remark \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static GroupRemark emptyRemark() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new GroupRemark();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if this GroupRemark is equal to other GroupRemark."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param other to be compared"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(GroupRemark other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (other.toString().equals(this.remark)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/UniqueGroupList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to ensure that groups are unique. Necessary for UI to render group list in tabpanel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class UniqueGroupList implements Iterable\u003cGroup\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalGroupList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internallUnmodifiableGroupList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalGroupList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean contains(Group toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return internalGroupList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void add(Group toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            //throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        internalGroupList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void setPerson(Group target, Group editedPerson) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int index \u003d internalGroupList.indexOf(target);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        /* Create exception class for groups."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (!target.equals(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        internalGroupList.set(index, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void remove(Group toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (!internalGroupList.remove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            //throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void setPersons(UniqueGroupList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        internalGroupList.setAll(replacement.internalGroupList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void setPersons(List\u003cGroup\u003e persons) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (!groupsAreUnique(persons)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            //throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        internalGroupList.setAll(persons);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ObservableList\u003cGroup\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return internallUnmodifiableGroupList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public Iterator\u003cGroup\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return internalGroupList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return o \u003d\u003d this"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                || (o instanceof UniqueGroupList"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u0026\u0026 internalGroupList.equals(((UniqueGroupList) o).internalGroupList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return internalGroupList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to check if the groups are all unique."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param groups Group list to check."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return boolean true or false."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private boolean groupsAreUnique(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        HashSet\u003cGroup\u003e groupHashSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        boolean unique \u003d true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (Group g : groups) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (groupHashSet.contains(g)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                unique \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            groupHashSet.add(g);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return unique;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/PersonToGroupMapping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Maps a person to a group throught the PersonId and GroupId"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class PersonToGroupMapping {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final GroupId groupId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final PersonId personId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonToGroupMapping(PersonId personId, GroupId groupId) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupId \u003d groupId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.role \u003d Role.emptyRole();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonToGroupMapping(PersonId personId, GroupId groupId, Role role) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupId \u003d groupId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public GroupId getGroupId() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.groupId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonId getPersonId() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.personId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.role;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts to String."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String s \u003d \"MAP: \" + personId.toString() + \" - \" + groupId.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if the mapping is equivalent to another mapping."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param mapping to be compared"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return true if they are equivalent, false otherwise"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(PersonToGroupMapping mapping) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (mapping.getPersonId().equals(personId) \u0026\u0026 mapping.getGroupId().equals(groupId)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/PersonToGroupMappingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * List of mappings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class PersonToGroupMappingList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ArrayList\u003cPersonToGroupMapping\u003e mappings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonToGroupMappingList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.mappings \u003d new ArrayList\u003cPersonToGroupMapping\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Adds a mapping to the list of mappings, will not add when a duplicate is found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param map mapping to be added"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return true when mapping is added, false when mapping already exists"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean addPersonToGroupMapping(PersonToGroupMapping map) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c mappings.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (mappings.get(i).equals(map)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.mappings.add(map);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * finds a mapping with personId and groupId and returns the mapping."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personId of the mapping"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param groupId  of the mapping"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return mapping found"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonToGroupMapping findPersonToGroupMapping(PersonId personId, GroupId groupId) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c mappings.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (mappings.get(i).getPersonId().equals(personId) \u0026\u0026 mappings.get(i).getGroupId().equals(groupId)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return mappings.get(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Deletes a mapping from the list of mapping."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param mapping to be deleted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return true when mapping found and deleted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean deletePersonToGroupMapping(PersonToGroupMapping mapping) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c mappings.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (mappings.get(i).equals(mapping)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                mappings.remove(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Deletes all mapping with personId."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personId to be deleted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void deletePersonFromMapping(PersonId personId) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c mappings.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (mappings.get(i).getPersonId().equals(personId)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                mappings.remove(i);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                i -\u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Deletes all mapping with groupId."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param groupId to be deleted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void deleteGroupFromMapping(GroupId groupId) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c mappings.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (mappings.get(i).getGroupId().equals(groupId)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                mappings.remove(i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                i -\u003d 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Finds all groups with person with personId."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personId to be found"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return list of groupId"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cGroupId\u003e findGroupsOfPerson(PersonId personId) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cGroupId\u003e groups \u003d new ArrayList\u003cGroupId\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c mappings.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (mappings.get(i).getPersonId().equals(personId)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                groups.add(mappings.get(i).getGroupId());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groups;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Finds all persons of a Group with groupId."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param groupId to be found"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return list of personId"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cPersonId\u003e findPersonsOfGroup(GroupId groupId) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cPersonId\u003e persons \u003d new ArrayList\u003cPersonId\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c mappings.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (mappings.get(i).getGroupId().equals(groupId)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                persons.add(mappings.get(i).getPersonId());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts to String."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c mappings.size(); i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d mappings.get(i).toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns an unmodifiable observable list of mappings."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ObservableList\u003cPersonToGroupMapping\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ObservableList\u003cPersonToGroupMapping\u003e observableList \u003d FXCollections.observableArrayList(mappings);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return FXCollections.unmodifiableObservableList(observableList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns the role of the mapping."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personId of the mapping"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param groupId  of the mapping"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Role"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Role findRole(PersonId personId, GroupId groupId) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c mappings.size(); i++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (mappings.get(i).getGroupId().equals(groupId) \u0026\u0026 mappings.get(i).getPersonId().equals(personId)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return mappings.get(i).getRole();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 175
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/Role.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Represents the Role of the person to the group."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Role {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Role(String role) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Role() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.role \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static Role emptyRole() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new Role();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getRole() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setRole(String role) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if this role is equals to another."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param otherRole to be checked"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Role otherRole) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (role.equals(otherRole.getRole())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/AcadCalendar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Contains start dates of each semester of each academic year."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class AcadCalendar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private Map\u003cString, String\u003e startDates;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AcadCalendar(Map\u003cString, String\u003e startDates) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.startDates \u003d startDates;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String getStartDateString(AcadYear acadYear, SemesterNo semesterNo) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String acadYearSemNoString \u003d acadYear.toString() + \" Sem \" + semesterNo.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return startDates.get(acadYearSemNoString);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Map\u003cString, String\u003e getStartDates() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return startDates;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return startDates.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/AcadYear.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * The acad year of the module"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class AcadYear {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String acadYear;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AcadYear(String acadYear) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return acadYear;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toStringDashed() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return acadYear.replace(\"/\", \"-\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Checks if this AcadYear is equal to other AcadYear."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param other to be compared"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean equals(AcadYear other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (other.toString().equals(this.acadYear)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 25,
      "Alvinnyk": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Day.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Day of the Lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Day(String day) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Description of the module"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/EndTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * End Time of the Lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class EndTime {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public EndTime(String endTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Exam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Exam for a Module in a Semester."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class Exam {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String examDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String examDuration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Exam(String examDate, String examDuration) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.examDate \u003d examDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.examDuration \u003d examDuration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return \"Exam Date: \" + examDate + \" \" + examDuration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Holidays.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Contains holiday dates strings."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class Holidays {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private List\u003cString\u003e holidayDates;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Holidays(List\u003cString\u003e holidays) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        holidayDates \u003d holidays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public List\u003cString\u003e getHolidayDates() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return holidayDates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return holidayDates.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Lesson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Represents a Lesson in an academic semester of a module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private LessonNo lessonNo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private StartTime startTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private EndTime endTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private Weeks weeks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private LessonType lessonType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private Day day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Lesson(LessonNo lessonNo, StartTime startTime, EndTime endTime, Weeks weeks,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                  LessonType lessonType, Day day, Venue venue) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.lessonNo \u003d lessonNo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.weeks \u003d weeks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String result \u003d \"ClassNo: \" + lessonNo + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                + \"Weeks: \" + weeks + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                + \"LessonType: \" + lessonType + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                + \"Day: \" + day + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                + \"Start: \" + startTime + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                + \"End: \" + endTime + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                + \"Venue: \" + venue.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public LessonNo getLessonNo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return lessonNo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public StartTime getStartTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public EndTime getEndTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Weeks getWeeks() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return weeks;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public LessonType getLessonType() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Venue getVenue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/LessonNo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Lesson number of the Lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class LessonNo {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"[a-zA-Z0-9]*\"; // alphanumeric"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String lessonNo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public LessonNo(String lessonNo) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.lessonNo \u003d lessonNo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return lessonNo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Checks if this LessonNo is equal to other LessonNo."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param other to be compared"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean equals(LessonNo other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (other.toString().equals(this.lessonNo)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static boolean isValidLesson(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/LessonType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Lesson type of the Lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class LessonType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String lessonType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public LessonType(String lessonType) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.exceptions.SemesterNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * The module details"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final ModuleId moduleId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final List\u003cSemester\u003e semesterData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Module(ModuleId moduleId, Title title, Description description, List\u003cSemester\u003e semesterData) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.semesterData.addAll(semesterData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleId getModuleId() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return moduleId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return moduleId.getModuleCode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AcadYear getAcadYear() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return moduleId.getAcadYear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public List\u003cSemester\u003e getSemesterData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return semesterData;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Semester getSemester(SemesterNo semesterNo) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (Semester semester : semesterData) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (semester.getSemesterNo().equals(semesterNo)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                return semester;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return \"AY\" + moduleId + \" \" + title;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns true if both modules are the same instance of module."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean equals(Module other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (other.getModuleId().equals(this.getModuleId())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Objects.hash(moduleId, title, description, semesterData);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 59,
      "klementtan": 1,
      "Alvinnyk": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleCode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * The module code of the module"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Checks if this ModuleCode is equal to other ModuleCode."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param other to be compared"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean equals(ModuleCode other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (other.toString().equals(this.moduleCode)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 15,
      "Alvinnyk": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Composite key composing of AcadYear and ModuleCode, which uniquely identifies a module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class ModuleId {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final AcadYear acadYear;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleId(String acadYear, String moduleCode) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.acadYear \u003d new AcadYear(acadYear);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleId(AcadYear acadYear, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AcadYear getAcadYear() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return acadYear;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return acadYear + \" \" + moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Checks if this ModuleId is equal to other ModuleId."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param other to be compared"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean equals(ModuleId other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (other.moduleCode.equals(this.moduleCode)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                \u0026\u0026 other.acadYear.equals(this.acadYear)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * List of Modules."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class ModuleList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private ArrayList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.modules.add(module);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Finds a module using the academic year and module code, and returns the module."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param id a composite identifier based on academic year and module code."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return module found"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Module findModule(ModuleId id) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (module.getModuleId().equals(id)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ArrayList\u003cModule\u003e getModules() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return this.modules;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Converts to String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            output +\u003d modules.get(i).toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns an unmodifiable observable list of Modules."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ObservableList\u003cModule\u003e observableList \u003d FXCollections.observableArrayList(modules);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return FXCollections.unmodifiableObservableList(observableList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleSummary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * A summary of a module"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class ModuleSummary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final ModuleId moduleId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final List\u003cInteger\u003e semesters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleSummary(ModuleId moduleId, Title title, List\u003cInteger\u003e semesters) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.semesters.addAll(semesters);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleId getModuleId() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return moduleId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public List\u003cInteger\u003e getSemesters() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return semesters;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns true if both module summaries are the same instance of module summaries."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean equals(ModuleSummary other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (other.getModuleId().equals(this.getModuleId())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return \"AY\" + moduleId + \" \" + title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Objects.hash(moduleId, title, semesters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleSummaryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * List of Modules."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class ModuleSummaryList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private List\u003cModuleSummary\u003e moduleSummaries;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleSummaryList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleSummaries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleSummaryList(List\u003cModuleSummary\u003e moduleSummaries) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleSummaries \u003d moduleSummaries;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void addModuleSummary(ModuleSummary moduleSummary) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.moduleSummaries.add(moduleSummary);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Finds a module summary using the academic year and module code, and returns the module summary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param id a composite identifier based on academic year and module code."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return module summary found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ModuleSummary findModuleSummary(ModuleId id) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (ModuleSummary moduleSummary : moduleSummaries) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (moduleSummary.getModuleId().equals(id)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                return moduleSummary;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public List\u003cModuleSummary\u003e getModuleSummaries() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return this.moduleSummaries;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Converts to String."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleSummaries.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            output +\u003d moduleSummaries.get(i).toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns an unmodifiable observable list of Module Summaries."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ObservableList\u003cModuleSummary\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ObservableList\u003cModuleSummary\u003e observableList \u003d FXCollections.observableArrayList(moduleSummaries);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return FXCollections.unmodifiableObservableList(observableList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/NusModsShareLink.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static java.util.Map.entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.websocket.util.UrlUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Represents an NUSMods share link."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class NusModsShareLink {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String EXAMPLE \u003d \"https://nusmods.com/timetable/sem-1/share?CS2101\u003d\u0026CS2103T\u003dLEC:G05\u0026CS3230\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"\u003dLEC:1,TUT:08\u0026CS3243\u003dTUT:07,LEC:1\u0026GEQ1000\u003dTUT:D17\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"An NUSMods share link should be of the following format:\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"https://nusmods.com/timetable/SEMESTER/share?MODULE_LESSON_PAIR\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"A MODULE_LESSON_PAIR should look like MODULE_CODE\u003dLESSON_TYPE:LESSON_NUMBER.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"An example link: \" + EXAMPLE + \"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final Map\u003cString, String\u003e SEMESTER_NUMBER_MAPPING \u003d Map.ofEntries("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            entry(\"sem-1\", \"1\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            entry(\"sem-2\", \"2\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            entry(\"st-i\", \"3\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            entry(\"st-ii\", \"4\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String SEMESTER_REGEX \u003d \"(\" + String.join(\"|\", SEMESTER_NUMBER_MAPPING.keySet()) + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^https://nusmods.com/timetable/\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + SEMESTER_REGEX + \"/share?(.+)$\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public final SemesterNo semesterNo;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public final Map\u003cModuleCode, List\u003cLessonNo\u003e\u003e moduleLessonsMap;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public NusModsShareLink(String link) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(link);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        checkArgument(isValidUrl(link), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // parse semester number from link"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Pattern p \u003d Pattern.compile(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Matcher m \u003d p.matcher(link);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String semString \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (m.matches()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                semString \u003d m.group(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                throw new ParseException(NusModsShareLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (!SEMESTER_NUMBER_MAPPING.containsKey(semString)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                throw new ParseException(NusModsShareLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            SemesterNo semesterNo \u003d new SemesterNo(SEMESTER_NUMBER_MAPPING.get(semString));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // parse pairs of module code \u0026 lessons from query string"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            URL url \u003d new URL(link);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Map\u003cString, String\u003e queryMap \u003d UrlUtil.splitQuery(url);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Map\u003cModuleCode, List\u003cLessonNo\u003e\u003e moduleLessonsMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            for (Map.Entry\u003cString, String\u003e entry : queryMap.entrySet()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(entry.getKey());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                if (StringUtil.isNullOrEmpty(entry.getValue())) { //skip if no query value"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                String[] lessons \u003d entry.getValue().split(\",\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                List\u003cLessonNo\u003e lessonsNos \u003d Arrays.stream(lessons)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        .map(l -\u003e l.split(\":\")[1])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        .map(LessonNo::new)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                moduleLessonsMap.put(moduleCode, lessonsNos);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            value \u003d link;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            this.semesterNo \u003d semesterNo;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            this.moduleLessonsMap \u003d moduleLessonsMap;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (UnsupportedEncodingException | MalformedURLException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new ParseException(e.getMessage(), e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns if a given string is a valid NUSMods URL."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static boolean isValidUrl(String link) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return link.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Semester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * The semester of the module"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final SemesterNo semesterNo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final ArrayList\u003cLesson\u003e timetable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final Exam exam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Semester(SemesterNo semesterNo, List\u003cLesson\u003e timetable,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    Exam exam) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.semesterNo \u003d semesterNo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.exam \u003d exam;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.timetable.addAll(timetable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Find all Lessons with the given lesson number string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param lessonNo Lesson number string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return ArrayList of Lessons matching the lesson number, returns empty list if no matching lessons."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ArrayList\u003cLesson\u003e findLessons(LessonNo lessonNo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (Lesson lesson : timetable) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (lesson.getLessonNo().equals(lessonNo)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                lessons.add(lesson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public ArrayList\u003cLesson\u003e getTimetable() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public SemesterNo getSemesterNo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return semesterNo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Exam getExam() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return exam;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Semester \").append(semesterNo).append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        result.append(\"Timetable:\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (int i \u003d 0; i \u003c timetable.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            result.append(timetable.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 42,
      "klementtan": 1,
      "Alvinnyk": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/SemesterNo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Semester number of the Semester."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class SemesterNo {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String semesterNo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public SemesterNo(String semesterNo) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.semesterNo \u003d semesterNo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String getSemesterNo() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return semesterNo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setSemesterNo(String semesterNo) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.semesterNo \u003d semesterNo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return semesterNo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Checks if this SemesterNo is equal to other SemesterNo."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param other to be compared"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean equals(SemesterNo other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (other.toString().equals(this.semesterNo)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/StartTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Start Time of the Lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class StartTime {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public StartTime(String startTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Title of the module"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Venue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Venue of the module"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Venue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Venue(String venue) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Weeks.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Weeks of the Lesson."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class Weeks {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private List\u003cInteger\u003e weekNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String startDateString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private String endDateString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private int weekInterval;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private int type; //TODO: convert to enum"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Weeks(List\u003cInteger\u003e weekNumbers, String startDateString,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                 String endDateString, int weekInterval, int type) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.weekNumbers \u003d weekNumbers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.startDateString \u003d startDateString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.endDateString \u003d endDateString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.weekInterval \u003d weekInterval;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Weeks() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.startDateString \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.endDateString \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.weekInterval \u003d -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.type \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Static method to get an empty remark."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Weeks emptyWeeks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new Weeks();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public List\u003cInteger\u003e getWeekNumbers() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return weekNumbers;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setWeekNumbers(List\u003cInteger\u003e weekNumbers) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.weekNumbers \u003d weekNumbers;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String getStartDateString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return startDateString;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setStartDateString(String startDateString) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.startDateString \u003d startDateString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String getEndDateString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return endDateString;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setEndDateString(String endDateString) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.endDateString \u003d endDateString;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public int getWeekInterval() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return weekInterval;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setWeekInterval(int weekInterval) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.weekInterval \u003d weekInterval;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public int getType() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setType(int type) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        switch(type) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        case(1): output \u003d \"Week Numbers: \" + weekNumbers.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        case(2): output \u003d \"Start Date: \" + startDateString + \" End Date: \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                + endDateString + \" Week Numbers: \" + weekNumbers.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        case(3): output \u003d \"Start Date: \" + startDateString + \" End Date: \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                + endDateString + \" Week Interval: \" + weekInterval;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        default: assert false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/ModuleCondensedNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Signals that the operation is unable to find the specified condensed module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class ModuleCondensedNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/SemesterNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Signals that the operation is unable to find the specified semester."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class SemesterNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Constructs an empty address. (Optional)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Address() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Static method to get empty address."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static Address emptyAddress() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return new Address();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 14,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Constructs an empty email."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Email() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Static method to obtain empty Email."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static Email emptyEmail() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return new Email();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 14,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Name() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.fullName \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static Name emptyName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new Name();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u0026\u0026 fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 8,
      "YiJiee": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static Integer counter \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final PersonId personId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personId \u003d new PersonId(counter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.schedule \u003d new Schedule(this.getPersonId());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        counter +\u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Person(PersonId personId, Name name, Phone phone, Email email,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                  Address address, Remark remark, Schedule schedule, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Person(PersonDescriptor personDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d personDescriptor.getName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.phone \u003d personDescriptor.getPhone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.email \u003d personDescriptor.getEmail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.address \u003d personDescriptor.getAddress();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.remark \u003d personDescriptor.getRemark();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personDescriptor.getTags() !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.tags.addAll(personDescriptor.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personId \u003d new PersonId(counter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.schedule \u003d new Schedule(this.getPersonId());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        counter +\u003d 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Resets the counter for testing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static void counterReset() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        counter \u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Sets the counter to a specific value."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param i value to be set to"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static void setCounter(int i) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        counter \u003d i;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns true if both persons are the same instance of person."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Person otherPerson) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (otherPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!this.isSamePerson(otherPerson)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (otherPerson.getPersonId().equals(this.getPersonId())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns only if the two person\u0027s details are the same. Does not check if IDs are the same."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                //\u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \u0026\u0026 otherPerson.getRemark().equals(getRemark());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, remark);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"(\" + personId.toString() + \") \";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d name.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.schedule.addEvent(event);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonId getPersonId() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.personId;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setAddress(Address address) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Schedule getSchedule() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.schedule;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Prints of all details of a person."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String details() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String notAvailable \u003d \"NOT AVAILABLE\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d this.toString() + \"\\n\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"Phone: \";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d notAvailable + \"\\n\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d phone.toString() + \"\\n\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"Email: \";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d notAvailable + \"\\n\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d email.toString() + \"\\n\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"Address: \";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d notAvailable + \"\\n\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d address.toString() + \"\\n\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"Remark: \";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d notAvailable + \"\\n\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d remark.toString() + \"\\n\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"Tags: \" + tags.toString() + \"\\n\\n\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d schedule.toString();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 150,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Descriptor of a person for person construction."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class PersonDescriptor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d Name.emptyName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d Phone.emptyPhone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d Email.emptyEmail();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d Address.emptyAddress();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final Remark DEFAULT_REMARK \u003d Remark.emptyRemark();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDescriptor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.phone \u003d DEFAULT_PHONE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.email \u003d DEFAULT_EMAIL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.address \u003d DEFAULT_ADDRESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.remark \u003d DEFAULT_REMARK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.tags \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if any field has been edited."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (this.name.equals(DEFAULT_NAME) \u0026\u0026 this.phone.equals(DEFAULT_PHONE) \u0026\u0026 this.email.equals(DEFAULT_EMAIL)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u0026\u0026 this.address.equals(DEFAULT_ADDRESS)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u0026\u0026 this.remark.equals(DEFAULT_REMARK) \u0026\u0026 this.tags \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Compares if this PersonDescriptor is equal to another."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personDescriptor to compare"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(PersonDescriptor personDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personDescriptor \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!this.name.equals(personDescriptor.name)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!this.phone.equals(personDescriptor.phone)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!this.email.equals(personDescriptor.email)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!this.address.equals(personDescriptor.address)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!this.remark.equals(personDescriptor.remark)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setAddress(Address address) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 108,
      "YiJiee": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Identifier of a Person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class PersonId {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Integer identifier;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonId(Integer id) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.identifier \u003d id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonId(String id) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.identifier \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Integer getIdentifier() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.identifier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return identifier.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if other personId is equal."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param id to be compared"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return true if they are equal"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(PersonId id) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (identifier.intValue() \u003d\u003d id.getIdentifier().intValue()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * List of Persons."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class PersonList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ArrayList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.persons \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Adds a person into the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personDescriptor to be added"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return return true when successfully added"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Person addPerson(PersonDescriptor personDescriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (findPerson(personDescriptor.getName()) \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Person person \u003d new Person(personDescriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.persons.add(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.persons.add(person);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Delete a person with personId."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personId of the person to delete"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return true when successfully deleted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean deletePerson(PersonId personId) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (persons.get(i).getPersonId().equals(personId)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                persons.remove(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Edits a person with given Name based on the given PersonDescriptor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param name             of person to be edited"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personDescriptor how the person should be edited"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return person"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Person editPerson(Name name, PersonDescriptor personDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person toEdit \u003d findPerson(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!personDescriptor.getName().equals(Name.emptyName())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Name otherName \u003d personDescriptor.getName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (findPerson(otherName) !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            toEdit.setName(personDescriptor.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!personDescriptor.getPhone().equals(Phone.emptyPhone())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            toEdit.setPhone(personDescriptor.getPhone());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!personDescriptor.getEmail().equals(Email.emptyEmail())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            toEdit.setEmail(personDescriptor.getEmail());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!personDescriptor.getAddress().equals(Address.emptyAddress())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            toEdit.setAddress(personDescriptor.getAddress());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!personDescriptor.getRemark().equals(Remark.emptyRemark())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            toEdit.setRemark(personDescriptor.getRemark());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personDescriptor.getTags() !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            toEdit.addTags(personDescriptor.getTags());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return toEdit;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Finds a person with Name and returns the person."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param name of the person to find"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return person found"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Person findPerson(Name name) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (persons.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return persons.get(i);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Finds a person with personId and returns the person."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personId of the person to find"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return person found"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Person findPerson(PersonId personId) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (persons.get(i).getPersonId().equals(personId)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return persons.get(i);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts to String."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d persons.get(i).toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Returns an unmodifiable observable list of Persons."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ObservableList\u003cPerson\u003e observableList \u003d FXCollections.observableArrayList(persons);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return FXCollections.unmodifiableObservableList(observableList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.persons;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 144,
      "YiJiee": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Construct empty phone"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Phone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static Phone emptyPhone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return new Phone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 11,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Remark}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark Any text."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Remark() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Static method to get an empty remark."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static Remark emptyRemark() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return new Remark();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 11,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ScheduleStub.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.WeekSchedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.Role;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.schedule.Schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.schedule.Timeslot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.schedule.Venue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class for testing Schedule View."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ScheduleStub {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ScheduleStub() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public WeekSchedule getSchedule() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Person p \u003d new Person(new PersonDescriptor());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        p.setName(new Name(\"AlexwithaverylongnameSolongthateventhespellingofthisentiresentenceisonlyafraction\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                + \"ofhistruename\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Schedule schedule \u003d new Schedule(new PersonId(12345));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Venue venue \u003d new Venue(\"Central Library\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        LocalDateTime startTime1 \u003d LocalDateTime.of(2019, 10, 21, 12, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        LocalDateTime endTime1 \u003d LocalDateTime.of(2019, 10, 21, 14, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        LocalDateTime startTime2 \u003d LocalDateTime.of(2019, 10, 22, 9, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        LocalDateTime endTime2 \u003d LocalDateTime.of(2019, 10, 22, 11, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        LocalDateTime startTime3 \u003d LocalDateTime.of(2019, 10, 23, 13, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        LocalDateTime endTime3 \u003d LocalDateTime.of(2019, 10, 23, 14, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        LocalDateTime startTime4 \u003d LocalDateTime.of(2019, 10, 24, 9, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        LocalDateTime endTime4 \u003d LocalDateTime.of(2019, 10, 24, 10, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        LocalDateTime startTime5 \u003d LocalDateTime.of(2019, 10, 24, 13, 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        LocalDateTime endTime5 \u003d LocalDateTime.of(2019, 10, 24, 16, 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Timeslot timeslot1 \u003d new Timeslot(startTime1, endTime1, venue);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Timeslot timeslot2 \u003d new Timeslot(startTime2, endTime2, venue);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Timeslot timeslot3 \u003d new Timeslot(startTime3, endTime3, venue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Timeslot timeslot4 \u003d new Timeslot(startTime4, endTime4, venue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Timeslot timeslot5 \u003d new Timeslot(startTime5, endTime5, venue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Event monday1pmTo3pm \u003d new Event(\"Test\", new ArrayList\u003c\u003e(List.of(timeslot1, timeslot2, timeslot3,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslot4, timeslot5)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        schedule.addEvent(monday1pmTo3pm);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        p.setSchedule(schedule);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new WeekSchedule(\"TestSchedule\", LocalDateTime.now(), p, Role.emptyRole());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 2,
      "YiJiee": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * @see Person#equals(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!target.equals(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (persons.get(i).equals(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 5,
      "-": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/schedule/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Event of a Schedule."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ArrayList\u003cTimeslot\u003e timeslots;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Event(String eventName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.timeslots \u003d new ArrayList\u003cTimeslot\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Event(String eventName, ArrayList\u003cTimeslot\u003e timeslots) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.timeslots \u003d timeslots;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Adds a timeslot to the Event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param timeslots to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean addTimeslot(ArrayList\u003cTimeslot\u003e timeslots) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (timeslots \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c timeslots.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.timeslots.add(timeslots.get(i));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Adds a timeslot to the Event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param timeslot to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean addTimeslot(Timeslot timeslot) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (timeslot \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.timeslots.add(timeslot);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts to String."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"Event: \" + eventName + \": \\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c timeslots.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d \"    \" + timeslots.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cTimeslot\u003e getTimeslots() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.timeslots;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.eventName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Compares and checks if it is equal to another Event."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param otherEvent to be compared"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Event otherEvent) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (otherEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!eventName.equals(otherEvent.getEventName())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (otherEvent.getTimeslots().size() !\u003d timeslots.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            for (i \u003d 0; i \u003c timeslots.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (!timeslots.get(i).equals(otherEvent.getTimeslots().get(i))) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if Events contains timeslots that clashes with another event."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param other to be checked"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isClash(Event other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cTimeslot\u003e otherTimeslots \u003d other.getTimeslots();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c timeslots.size(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            for (int j \u003d 0; j \u003c otherTimeslots.size(); j++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (timeslots.get(i).isClash(otherTimeslots.get(j))) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/schedule/Schedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Schedule of a person."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final PersonId personId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Schedule(PersonId personId) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Schedule(PersonId personId, ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.events.add(event);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts to String."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\u003d\u003d\u003d\u003d\u003d SCHEDULE \u003d\u003d\u003d\u003d\u003d\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output +\u003d \"NO EVENTS AVAILABLE\\n\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            for (i \u003d 0; i \u003c events.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                output +\u003d events.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks is there is a clash in the schedule with another event."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param event to be checked"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isClash(Event event) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (event.isClash(events.get(i))) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.events;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonId getPersonId() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.personId;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/schedule/Timeslot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Timeslot of an Event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Timeslot {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd MMM uuuu HH:mm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Timeslot(LocalDateTime startTime, LocalDateTime endTime, Venue venue) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Compares if it is equal to another timeslot object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param timeslot to be compared"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Timeslot timeslot) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (startTime.compareTo(timeslot.getStartTime()) !\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (endTime.compareTo(timeslot.getEndTime()) !\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!venue.equals(timeslot.getVenue())) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (timeslot \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Venue getVenue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.venue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if there is a clash in this timeslot with another timeslot."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param other to be checked"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isClash(Timeslot other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        LocalDateTime otherStartTime \u003d other.getStartTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        LocalDateTime otherEndTime \u003d other.getEndTime();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if ((otherStartTime.isBefore(startTime) \u0026\u0026 otherEndTime.isBefore(startTime))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                || (otherStartTime.isAfter(endTime) \u0026\u0026 otherEndTime.isAfter(endTime))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts to String."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d startTime.format(DATE_TIME_FORMATTER) + \"hrs - \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d endTime.format(DATE_TIME_FORMATTER) + \"hrs at \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output +\u003d venue.toString() + \" \";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/schedule/Venue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Venue object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Venue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String coordinates;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Venue(String venue) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.coordinates \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!(obj instanceof Venue)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (((Venue) obj).getVenue().equals(venue)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setVenue(String venue) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Timeslot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String eventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final List\u003cJsonAdaptedTimeSlot\u003e timeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given Event details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"eventName\") String eventName,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            @JsonProperty(\"timeSlots\") List\u003cJsonAdaptedTimeSlot\u003e timeSlots) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (timeSlots !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.timeSlots.addAll(timeSlots);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        eventName \u003d source.getEventName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        timeSlots.addAll(source.getTimeslots().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                .map(JsonAdaptedTimeSlot::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final ArrayList\u003cTimeslot\u003e eventTimeslots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (JsonAdaptedTimeSlot timeSlot : timeSlots) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            eventTimeslots.add(timeSlot.toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Event.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final String modelEventName \u003d eventName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new Event(modelEventName, eventTimeslots);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedGroup.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupRemark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Constructs a {@code JsonAdaptedGroup} with the given Group details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class JsonAdaptedGroup {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Group\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String groupId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String groupName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String groupDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String groupRemark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Constructs a {@code JsonAdaptedGroup} with the given Group details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonAdaptedGroup(@JsonProperty(\"groupId\") String groupId,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            @JsonProperty(\"groupName\") String groupName,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            @JsonProperty(\"groupDescription\") String groupDescription,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            @JsonProperty(\"groupRemark\") String groupRemark) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupId \u003d groupId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescription \u003d groupDescription;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupRemark \u003d groupRemark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts a given {@code Group} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonAdaptedGroup(Group source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupId \u003d source.getGroupId().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupName \u003d source.getGroupName().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupDescription \u003d source.getGroupDescription().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupRemark \u003d source.getGroupRemark().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts this Jackson-friendly adapted group object into the model\u0027s {@code Group} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted group."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Group toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (groupId \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    GroupId.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final GroupId modelGroupId \u003d new GroupId(groupId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (groupName \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    GroupName.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final GroupName modelGroupName \u003d new GroupName(groupName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (groupDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    GroupDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final GroupDescription modelGroupDescription \u003d new GroupDescription(groupDescription);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (groupRemark \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    GroupRemark.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final GroupRemark modelGroupRemark \u003d new GroupRemark(groupRemark);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new Group(modelGroupId, modelGroupName, modelGroupDescription, modelGroupRemark);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMapping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMapping;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.Role;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Constructs a {@code JsonAdaptedMapping} with the given Mapping details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class JsonAdaptedMapping {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Mapping\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String groupId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String personId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Constructs a {@code JsonAdaptedMapping} with the given Mapping details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonAdaptedMapping(@JsonProperty(\"groupId\") String groupId,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                              @JsonProperty(\"personId\") String personId,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                              @JsonProperty(\"role\") String role) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupId \u003d groupId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts a given {@code Mapping} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonAdaptedMapping(PersonToGroupMapping source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupId \u003d source.getGroupId().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personId \u003d source.getPersonId().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.role \u003d source.getRole().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts this Jackson-friendly adapted mapping object into the model\u0027s {@code PersonToGroupMapping} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted mapping."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonToGroupMapping toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (groupId \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    GroupId.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final GroupId modelGroupId \u003d new GroupId(groupId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personId \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    PersonId.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final PersonId modelPersonId \u003d new PersonId(personId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    Role.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final Role modelRole \u003d new Role(role);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new PersonToGroupMapping(modelPersonId, modelGroupId, modelRole);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Schedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String personId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final JsonAdaptedSchedule schedule;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"personId\") String personId,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                             @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                             @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                             @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                             @JsonProperty(\"schedule\") JsonAdaptedSchedule schedule,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personId \u003d source.getPersonId().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        schedule \u003d new JsonAdaptedSchedule(source.getSchedule());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personId \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    PersonId.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final PersonId modelPersonId \u003d new PersonId(personId);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final Phone modelPhone;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            modelPhone \u003d Phone.emptyPhone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final Email modelEmail;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            modelEmail \u003d Email.emptyEmail();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final Address modelAddress;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            modelAddress \u003d Address.emptyAddress();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final Schedule modelSchedule;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (schedule \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    Schedule.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            modelSchedule \u003d schedule.toModelType();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new Person(modelPersonId, modelName, modelPhone, modelEmail,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                modelAddress, modelRemark, modelSchedule, modelTags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 54,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSchedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Jackson-friendly version of {@link Schedule}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class JsonAdaptedSchedule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Schedule\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String personId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Constructs a {@code JsonAdaptedSchedule} with the given Schedule details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonAdaptedSchedule(@JsonProperty(\"personId\") String personId,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                               @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (events !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.events.addAll(events);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts a given {@code Schedule} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonAdaptedSchedule(Schedule source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personId \u003d source.getPersonId().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        events.addAll(source.getEvents().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                .map(JsonAdaptedEvent::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts this Jackson-friendly adapted schedule object into the model\u0027s {@code Schedule} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted schedule."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Schedule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final ArrayList\u003cEvent\u003e scheduleEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (JsonAdaptedEvent event : events) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            scheduleEvents.add(event.toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personId \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    Schedule.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final PersonId modelPersonId \u003d new PersonId(personId);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new Schedule(modelPersonId, scheduleEvents);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTimeSlot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Timeslot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Jackson-friendly version of {@link Timeslot}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class JsonAdaptedTimeSlot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"TimeSlot\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String venue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Constructs a {@code JsonAdaptedTimeSlot} with the given Timeslot details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonAdaptedTimeSlot(@JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                               @JsonProperty(\"endTime\") String endTime,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                               @JsonProperty(\"venue\") String venue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts a given {@code Timeslot} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonAdaptedTimeSlot(Timeslot source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        startTime \u003d source.getStartTime().format(Timeslot.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        endTime \u003d source.getEndTime().format(Timeslot.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        venue \u003d source.getVenue().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts this Jackson-friendly adapted timeslot object into the model\u0027s {@code Timeslot} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted timeslot."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Timeslot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"startTime\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final LocalDateTime modelStartTime \u003d LocalDateTime.parse(startTime, Timeslot.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"endTime\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final LocalDateTime modelEndTime \u003d LocalDateTime.parse(endTime, Timeslot.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (venue \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        final Venue modelVenue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new Timeslot(modelStartTime, modelEndTime, modelVenue);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTimeBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.TimeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMapping;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * A TimeBook serialized to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "@JsonRootName(value \u003d \"timebook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class JsonSerializableTimeBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final List\u003cJsonAdaptedGroup\u003e groupList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final List\u003cJsonAdaptedMapping\u003e mappingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonSerializableTimeBook(@JsonProperty(\"personList\") List\u003cJsonAdaptedPerson\u003e personList,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                                    @JsonProperty(\"groupList\") List\u003cJsonAdaptedGroup\u003e groupList,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                                    @JsonProperty(\"mappingList\") List\u003cJsonAdaptedMapping\u003e mappingList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.personList.addAll(personList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.groupList.addAll(groupList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.mappingList.addAll(mappingList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts a given {@code TimeBook} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTimeBook}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonSerializableTimeBook(TimeBook source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personList.addAll(source.getUnmodifiablePersonList().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                .map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupList.addAll(source.getUnmodifiableGroupList().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                .map(JsonAdaptedGroup::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList.addAll(source.getUnmodifiableMappingList().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                .map(JsonAdaptedMapping::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts this TimeBook into the model\u0027s {@code TimeBook} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public TimeBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        TimeBook timeBook \u003d new TimeBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : personList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            timeBook.addPerson(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (JsonAdaptedGroup jsonAdaptedGroup : groupList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Group group \u003d jsonAdaptedGroup.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            timeBook.addGroup(group);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (JsonAdaptedMapping jsonAdaptedMapping : mappingList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            PersonToGroupMapping map \u003d jsonAdaptedMapping.toModelType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            timeBook.addMapping(map);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return timeBook;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTimeBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.TimeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * A class to access TimeBook data stored as a JSON file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class JsonTimeBookStorage implements TimeBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTimeBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public JsonTimeBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Path getTimeBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Optional\u003cTimeBook\u003e readTimeBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return readTimeBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Optional\u003cTimeBook\u003e readTimeBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Optional\u003cJsonSerializableTimeBook\u003e jsonTimeBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                filePath, JsonSerializableTimeBook.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (!jsonTimeBook.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return Optional.of(jsonTimeBook.get().toModelType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void saveTimeBook(TimeBook timeBook) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        saveTimeBook(timeBook, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void saveTimeBook(TimeBook timeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(timeBook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTimeBook(timeBook), filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, TimeBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 1,
      "Alvinnyk": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.TimeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private TimeBookStorage timeBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                          UserPrefsStorage userPrefsStorage, TimeBookStorage timeBookStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.timeBookStorage \u003d timeBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TimeBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Path getTimeBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return timeBookStorage.getTimeBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Optional\u003cTimeBook\u003e readTimeBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return readTimeBook(timeBookStorage.getTimeBookFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Optional\u003cTimeBook\u003e readTimeBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return timeBookStorage.readTimeBook(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void saveTimeBook(TimeBook timeBook) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        saveTimeBook(timeBook, timeBookStorage.getTimeBookFilePath());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void saveTimeBook(TimeBook timeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        timeBookStorage.saveTimeBook(timeBook, filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 1,
      "Alvinnyk": 29,
      "YiJiee": 3,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TimeBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.TimeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Represents a storage for TimeBook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public interface TimeBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Path getTimeBookFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Optional\u003cTimeBook\u003e readTimeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    Optional\u003cTimeBook\u003e readTimeBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void saveTimeBook(TimeBook timeBook) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void saveTimeBook(TimeBook timeBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected TextField commandTextField;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "aidilfbk": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.GroupDisplay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.util.BubbleGenerator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Class to view groups."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class GroupCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"GroupListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane groupId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private HBox groupCardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label groupName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private GroupDisplay groupDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GroupCard(GroupDisplay groupDisplay, int displayedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.groupDisplay \u003d groupDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupId.getChildren().add(new BubbleGenerator(displayedIndex, 50).getBubble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupName.setText(groupDisplay.getGroupName().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else if (o instanceof GroupCard) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            GroupCard g \u003d (GroupCard) o;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return groupName.getText().equals(g.groupName.getText())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u0026\u0026 groupDisplay.equals(g.groupDisplay);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupInformation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.util.GroupDetailCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.util.MemberList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to handle the view of a group."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class GroupInformation extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"GroupInformation.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane groupDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane groupMembers;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ArrayList\u003cString\u003e colors;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GroupInformation(DetailWindowDisplay detailWindowDisplay, ArrayList\u003cString\u003e colors) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cString\u003e names \u003d detailWindowDisplay.getWeekSchedules().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .map(wkSch -\u003e wkSch.getPersonDisplay().getName().toString())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cString\u003e emails \u003d detailWindowDisplay.getWeekSchedules().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .map(wkSch -\u003e wkSch.getPersonDisplay().getEmail().toString())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cString\u003e roles \u003d detailWindowDisplay.getWeekSchedules().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .map(wkSch -\u003e wkSch.getRole().toString())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.colors \u003d colors;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        GroupDetailCard groupCard \u003d new GroupDetailCard(detailWindowDisplay.getGroupDisplay());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupDetails.getChildren().add(groupCard.getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupMembers.getChildren().add(new MemberList(names, emails, roles, colors).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.GroupDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class that shows the list of existing groups."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class GroupListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"GroupListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GroupListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ListView\u003cGroupDisplay\u003e groupListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GroupListPanel(ObservableList\u003cGroupDisplay\u003e groupList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupListView.setItems(groupList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupListView.setCellFactory(listView -\u003e new GroupListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    class GroupListViewCell extends ListCell\u003cGroupDisplay\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        protected void updateItem(GroupDisplay grp, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            super.updateItem(grp, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (empty || grp \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                setGraphic(new GroupCard(grp, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LocationDetails.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * UI class to show suggested location details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class LocationDetails extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"LocationDetails.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private GridPane locationDetailsContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane locationMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label locationName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label timeslot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label approxTravelTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public LocationDetails(ImageView mapView, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        locationMap.getChildren().add(mapView);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        locationName.setText(\"Location placeholder\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        timeslot.setText(\"Timeslot placeholder\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        approxTravelTime.setText(\"Travel time placeholder\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.export.VisualExporter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplayType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.SidePanelDisplayType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.SuggestingCommandBox.SuggestionLogic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.util.ColorGenerator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.util.DefaultStartView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.util.GroupDetailsExport;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private GroupListPanel groupListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ScheduleView scheduleView;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane sideBarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane detailsViewPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonDisplayList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        TabPanel tabPanel \u003d new TabPanel();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //To do for logic -\u003e getGroupList."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupListPanel \u003d new GroupListPanel(logic.getFilteredGroupDisplayList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        tabPanel.setContent(personListPanel.getRoot(), groupListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        sideBarPlaceholder.getChildren().add(tabPanel.getTabs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        CommandBox commandBox;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (logic instanceof SuggestionLogic) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            logger.info(\"logic supports suggestions, loading SuggestingCommandBox\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final SuggestionLogic suggestionLogic \u003d (SuggestionLogic) logic;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            commandBox \u003d new SuggestingCommandBox(this::executeCommand, suggestionLogic);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            logger.warning(\"logic does not suggestions, loading CommandBox\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //setting up default detailsview"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        detailsViewPlaceholder.getChildren().add(new DefaultStartView(400, 400).getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Handles change of details view"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param details details to be set inside detailsViewPlaceHolder in MainWindow."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void handleChangeOnDetailsView(Node details) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        detailsViewPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        detailsViewPlaceholder.getChildren().add(details);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Handles change of sidepanel view."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void handleChangeToTabsPanel() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        sideBarPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonDisplayList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        TabPanel tabPanel \u003d new TabPanel();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupListPanel \u003d new GroupListPanel(logic.getFilteredGroupDisplayList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        tabPanel.setContent(personListPanel.getRoot(), groupListPanel.getRoot());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        sideBarPlaceholder.getChildren().add(tabPanel.getTabs());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Handles tab switch view."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param type Tab number to be switched to. 1 for person, 2 for group."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void handleTabSwitch(SidePanelDisplayType type) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (type.equals(SidePanelDisplayType.PERSONS)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            TabPane tabPane \u003d (TabPane) sideBarPlaceholder.getChildren().get(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            tabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else if (type.equals(SidePanelDisplayType.GROUPS)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            TabPane tabPane \u003d (TabPane) sideBarPlaceholder.getChildren().get(0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            tabPane.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            //Tabpane remain the same."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Handles switching tabs to view person\u0027s or group\u0027s detail."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void handleSidePanelChange(Node details) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        sideBarPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        sideBarPlaceholder.getChildren().add(details);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to handle scrolling events."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private void handleScroll() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (scheduleView \u003d\u003d null) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            //No schedule has been loaded yet. Do nothing."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleView.scrollNext();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to handle exportation of view."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param detailWindowDisplay Details to be exported."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private void handleExport(DetailWindowDisplay detailWindowDisplay) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        DetailWindowDisplayType type \u003d detailWindowDisplay.getDetailWindowDisplayType();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (type.equals(DetailWindowDisplayType.PERSON)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            PersonDetailsView personDetailsView \u003d new PersonDetailsView(detailWindowDisplay);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            stackPane.getChildren().add(personDetailsView.getRoot());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Scene scene \u003d new Scene(stackPane);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                VisualExporter.exportTo(stackPane, \"png\", \"./export.png\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"Error exporting\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            GroupDetailsExport groupDetailsView \u003d new GroupDetailsExport(detailWindowDisplay);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            stackPane.getChildren().add(groupDetailsView.getRoot());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Scene scene \u003d new Scene(stackPane);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                VisualExporter.exportTo(stackPane, \"png\", \"./export.png\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"Error exporting\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            DetailWindowDisplay detailWindowDisplay \u003d logic.getMainWindowDisplay();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            DetailWindowDisplayType displayType \u003d detailWindowDisplay.getDetailWindowDisplayType();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ArrayList\u003cString\u003e colors \u003d ColorGenerator"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    .generateColorList(detailWindowDisplay.getWeekSchedules().size());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            switch(displayType) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            case PERSON:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                //There is only 1 schedule in the detailWindowDisplay"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                ScheduleView personScheduleView \u003d new ScheduleView(detailWindowDisplay.getWeekSchedules().get(0));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                handleChangeOnDetailsView(personScheduleView.getRoot());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                handleSidePanelChange("
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                        new PersonDetailCard(detailWindowDisplay"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                                .getWeekSchedules()"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                                .get(0)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                                .getPersonDisplay())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                                .getRoot());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                scheduleView \u003d personScheduleView;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            case GROUP:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                ScheduleView groupScheduleView \u003d new ScheduleView(detailWindowDisplay.getWeekSchedules(),"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                        colors,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                        detailWindowDisplay.getGroupDisplay().getGroupName(), detailWindowDisplay.getFreeSchedule());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                handleChangeOnDetailsView(groupScheduleView.getRoot());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                handleSidePanelChange(new GroupInformation(detailWindowDisplay, colors).getRoot());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                scheduleView \u003d groupScheduleView;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            case DEFAULT:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                handleChangeToTabsPanel();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                handleTabSwitch(logic.getSidePanelDisplay().getSidePanelDisplayType());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                //Nothing to show"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (commandResult.isExport()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                handleExport(detailWindowDisplay);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (commandResult.isScroll()) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                handleScroll();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (commandResult.isPopUp()) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                //WIP"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 155,
      "-": 193,
      "aidilfbk": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.PersonDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.util.BubbleGenerator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public final PersonDisplay person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane personId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public PersonCard(PersonDisplay person) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        String personName \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        String personInitials \u003d getPersonInitials(personName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        personId.getChildren().add(new BubbleGenerator(personInitials, 50).getBubble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        name.setText(personName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return person.isSamePerson(card.person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public String getPersonInitials(String personName) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        String[] fragmentedNames \u003d personName.toUpperCase().split(\" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 0; i \u003c fragmentedNames.length; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            stringBuilder.append(fragmentedNames[i].charAt(0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 19,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonDetailCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.PersonDisplay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class for viewing the full details of a person."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class PersonDetailCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"PersonDetailCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private final Image defaultUserProfile \u003d new Image(getClass().getResourceAsStream("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \"/images/default_profile.png\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private final PersonDisplay person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private HBox personDetailContainer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ImageView userProfile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane profileContainer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label remarkLabel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public PersonDetailCard(PersonDisplay person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        name.setText(formatText(person.getName().fullName));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        phone.setText(formatText(person.getPhone().value));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        address.setText(formatText(person.getAddress().value));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        email.setText(formatText(person.getEmail().value));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        remark.setText(formatText(person.getRemark().value));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        profileContainer.setId(\"profileContainer\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        userProfile.setImage(defaultUserProfile);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to format the text to be displayed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param text The string to be formatted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return String that should be in the UI."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static String formatText(String text) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (text \u003d\u003d null || text.equals(\"\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return \"NOT AVAILABLE\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return text;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (!(other instanceof PersonDetailCard)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return person.isSamePerson(card.person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonDetailsView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.WeekSchedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to handle the details view of a person or a group."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class PersonDetailsView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"PersonDetailsView.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane personSchedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane personDetailContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public PersonDetailsView(DetailWindowDisplay detailWindowDisplay) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        WeekSchedule schedule \u003d detailWindowDisplay.getWeekSchedules().get(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ScheduleView sv \u003d new ScheduleView(schedule);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.personSchedule.getChildren().add(sv.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.PersonDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ListView\u003cPersonDisplay\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPersonDisplay\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPersonDisplay\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        protected void updateItem(PersonDisplay person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                setGraphic(new PersonCard(person).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 6,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ScheduleView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.ColumnConstraints;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DayTimeslot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.FreeSchedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.FreeTimeslot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.WeekSchedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.util.ColorGenerator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.util.DateFormatter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.util.TimeFormatter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to generate a schedule table (ui) from a Schedule object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ScheduleView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    //Schedule to be received from logic MUST have timeslots in chronological order."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    //ScheduleView must be wrapped in a scroll pane otherwise the view will become distorted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"ScheduleView.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    protected final int oneHourLength \u003d 60;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    protected final int preferredWidth \u003d 140;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    protected double blockWidth \u003d 140;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    protected final int startTime \u003d 8;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    protected final int endTime \u003d 20;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private VBox scheduleContainer;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ScrollPane scheduleHeaderWrapper;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ScrollPane scheduleContents;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private GridPane scheduleHeader;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private GridPane scheduleView;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private List\u003cString\u003e colors;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private HashMap\u003cDayOfWeek, StackPane\u003e dayTimeslotStackPanes \u003d new HashMap\u003cDayOfWeek, StackPane\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private int currentDay;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private LocalDate currentDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ScheduleView(WeekSchedule weekSchedule) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.currentDay \u003d LocalDateTime.now().getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.title.setText(weekSchedule.getPersonDisplay().getName().fullName + \"\u0027s Schedule\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseHeaders();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseTimeslotHeaders();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseTableCells();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        HashMap\u003cDayOfWeek, ArrayList\u003cDayTimeslot\u003e\u003e scheduleMap \u003d weekSchedule.getWeekSchedule();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        showIndividualSchedule(scheduleMap, ColorGenerator.generateColorList(1).get(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleContents.setContent(scheduleView);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleHeaderWrapper.setContent(scheduleHeader);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ScheduleView(ArrayList\u003cWeekSchedule\u003e weekSchedules, List\u003cString\u003e colors, GroupName groupName,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                        FreeSchedule freeSchedule) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.currentDay \u003d LocalDateTime.now().getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.colors \u003d colors;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.title.setText(groupName.toString() + \"\u0027s Schedule\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseHeaders();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseTimeslotHeaders();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseTableCells();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        showGroupSchedule(weekSchedules);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        showFreeTime(freeSchedule);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleContents.setContent(scheduleView);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleHeaderWrapper.setContent(scheduleHeader);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to initialise the FXML components of ScheduleView."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return This object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ScheduleView initialise() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleView \u003d new GridPane();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleView.setStyle(\"-fx-border-width: 2; -fx-pref-width: 950;\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleHeader \u003d new GridPane();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleHeader.setStyle(\"-fx-pref-width: 950;\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleHeaderWrapper.setMinHeight(50);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleHeaderWrapper.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleHeaderWrapper.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleContents.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleContents.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleContents.hvalueProperty().bindBidirectional(scheduleHeaderWrapper.hvalueProperty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * initialise top headers in the table view."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private void initialiseHeaders() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Region placeHolder \u003d new Region();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        placeHolder.setId(\"dayLabelContainer\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleHeader.add(placeHolder, 0, 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ColumnConstraints colCOffset \u003d new ColumnConstraints();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        colCOffset.setPercentWidth(9);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleHeader.getColumnConstraints().add(colCOffset);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //day headers"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int offset \u003d (currentDay + i - 1) \u003e 7 ? currentDay + i - 8 : currentDay + i - 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane sp \u003d new StackPane();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Label dayText \u003d new Label(DayOfWeek.of(offset).toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Label dayDate \u003d new Label(DateFormatter.formatToString(currentDate.plusDays(i - 1)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            VBox dayLabelContainer \u003d new VBox();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayText.setId(\"dayText\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayDate.setId(\"dayDate\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayLabelContainer.setId(\"dayLabelContainer\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayLabelContainer.setPrefSize(preferredWidth, 50);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ColumnConstraints colC \u003d new ColumnConstraints();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            colC.setPercentWidth(13);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleHeader.getColumnConstraints().add(colC);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayLabelContainer.getChildren().addAll(dayText, dayDate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            sp.getChildren().addAll(dayLabelContainer);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleHeader.add(sp, i, 0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Helper method to initialise the time slot headers in the table view."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private void initialiseTimeslotHeaders() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //timeslot headers"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ColumnConstraints colCOffset \u003d new ColumnConstraints();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        colCOffset.setPercentWidth(9);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleView.getColumnConstraints().add(colCOffset);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ColumnConstraints colC \u003d new ColumnConstraints();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            colC.setPercentWidth(13);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleView.getColumnConstraints().add(colC);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int j \u003d startTime; j \u003c endTime; j++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            //left-side headers"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            String time \u003d TimeFormatter.formatIntToTime(j);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Region timeslotLeftLabelContainer \u003d new Region();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            timeslotLeftLabelContainer.setPrefSize(preferredWidth, oneHourLength);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            timeslotLeftLabelContainer.setId(\"timeslotLabelContainer\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Label timeslotLeftText \u003d new Label(time);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane leftTimeslotHeaderContainer \u003d new StackPane();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            leftTimeslotHeaderContainer.getChildren().addAll(timeslotLeftLabelContainer, timeslotLeftText);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleView.add(leftTimeslotHeaderContainer, 0, j - startTime);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Helper method to initialise table cells and grid lines in the table view."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private void initialiseTableCells() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //timeslot data"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int l \u003d 1; l \u003c\u003d 7; l++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int offsetDay \u003d (currentDay + l - 1) \u003e 7 ? (currentDay + l - 8) : (currentDay + l - 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            VBox timeslotContainer \u003d new VBox();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Region firstRegionOffset \u003d new Region();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            firstRegionOffset.setPrefSize(preferredWidth, oneHourLength / 2);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            firstRegionOffset.setId(\"timeslotMajorLine\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            timeslotContainer.getChildren().add(firstRegionOffset);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            for (int k \u003d startTime; k \u003c endTime; k++) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                StackPane timeslotRegion \u003d new StackPane();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                Region timeslotMajorRegion \u003d new Region();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslotMajorRegion.setId(\"timeslotMajorLine\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                VBox timeslotMinorRegion \u003d new VBox();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                Region offset \u003d new Block(30).makeEmptyTimeslot();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                Region timeslotMinorRegion1 \u003d new Region();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslotMinorRegion1.setId(\"timeslotMinorLine\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslotMinorRegion1.setPrefSize(preferredWidth, oneHourLength / 2.0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslotMinorRegion.getChildren().addAll(offset, timeslotMinorRegion1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                if (k \u003d\u003d endTime - 1) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotMajorRegion.setPrefSize(preferredWidth, oneHourLength / 2);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotRegion.getChildren().addAll(timeslotMajorRegion);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotContainer.getChildren().add(timeslotRegion);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotMajorRegion.setPrefSize(preferredWidth, oneHourLength);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotRegion.getChildren().addAll(timeslotMajorRegion, timeslotMinorRegion);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotContainer.getChildren().add(timeslotRegion);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            stackPane.getChildren().add(timeslotContainer);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayTimeslotStackPanes.put(DayOfWeek.of(offsetDay), stackPane);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleView.add(stackPane, l, 0, 1, endTime - startTime);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private int getTimeDifference(int startTime, int endTime) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int hours \u003d (endTime - startTime) / 100;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int minutes \u003d (endTime - startTime) % 100;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return hours * 60 + minutes;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to create a block that represents the occupied/busy time slots of an individual for a particular day."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param daySchedule List that contains all occupied time slots of the individual on a particular day."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param color Color that the block should be."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return VBox that represents the individual\u0027s busy time slots for this particular day."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private VBox getDayVBoxOfIndividualSchedule(ArrayList\u003cDayTimeslot\u003e daySchedule, String color) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        VBox timeslotContainer \u003d new VBox();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        timeslotContainer.setStyle(\"-fx-padding: 0 2 0 2; -fx-border-width: 2;\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        timeslotContainer.getChildren().add(new Block(30).makeEmptyTimeslot());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int originalTimeStamp \u003d startTime * 100;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int j \u003d 0; j \u003c daySchedule.size(); j++) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            DayTimeslot timeslot \u003d daySchedule.get(j);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int startTime \u003d TimeFormatter.formatTimeToInt(timeslot.getStartTime());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int endTime \u003d TimeFormatter.formatTimeToInt(timeslot.getEndTime());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Region busyTimeslot \u003d new Block(getTimeDifference(startTime, endTime)).makeColouredTimeslot(color);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (originalTimeStamp !\u003d startTime) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                int timeUntilBusy \u003d getTimeDifference(originalTimeStamp, startTime);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                Region freeTimeslot \u003d new Block(timeUntilBusy).makeEmptyTimeslot();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslotContainer.getChildren().add(freeTimeslot);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            timeslotContainer.getChildren().add(busyTimeslot);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            originalTimeStamp \u003d endTime;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return timeslotContainer;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to create a block that represents free time in groups on a particular day."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Only called for group schedules. Free time is shown by a translucent green rectangle on the UI."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param freeSchedule The common free time among groups for a particular day."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return VBox that represents the free time block."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private VBox getDayVBoxOfFreeSchedule(ArrayList\u003cFreeTimeslot\u003e freeSchedule) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        VBox timeslotContainer \u003d new VBox();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        timeslotContainer.getChildren().add(new Block(30).makeEmptyTimeslot());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int originalTimeStamp \u003d startTime * 100;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int j \u003d 0; j \u003c freeSchedule.size(); j++) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            FreeTimeslot timeslot \u003d freeSchedule.get(j);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int startTime \u003d TimeFormatter.formatTimeToInt(timeslot.getStartTime());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int endTime \u003d TimeFormatter.formatTimeToInt(timeslot.getEndTime());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Region freeTime \u003d new Block(getTimeDifference(startTime, endTime)).makeFreeTimeslot();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (originalTimeStamp !\u003d startTime) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                int timeUntilNext \u003d getTimeDifference(originalTimeStamp, startTime);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                Region untilNext \u003d new Block(timeUntilNext).makeEmptyTimeslot();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslotContainer.getChildren().add(untilNext);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            timeslotContainer.getChildren().add(freeTime);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            originalTimeStamp \u003d endTime;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return timeslotContainer;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to obtain a table view of an individual\u0027s schedule."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param scheduleMap ScheduleMap obtained by calling getScheduleMap on a Schedule object."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param color Color of the blocks in the table view."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return  GridPane table view of the individual\u0027s schedule."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GridPane showIndividualSchedule(HashMap\u003cDayOfWeek, ArrayList\u003cDayTimeslot\u003e\u003e scheduleMap,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                                           String color) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ArrayList\u003cDayTimeslot\u003e daySchedule \u003d scheduleMap.get(DayOfWeek.of(i));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane dayStackPane \u003d dayTimeslotStackPanes.get(DayOfWeek.of(i));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            VBox timeslotContainer \u003d getDayVBoxOfIndividualSchedule(daySchedule, color);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayStackPane.getChildren().add(timeslotContainer);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return scheduleView;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to obtain a table view of the all the schedules present in a group."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param schedules An array list of schedule maps obtained from calling getScheduleMap on a Schedule Object."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return  GridPane table view of schedules."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GridPane showGroupSchedule(ArrayList\u003cWeekSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Assign colors to each schedule."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Draw VBox of each individual\u0027s schedule."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Put VBoxes of all individuals\u0027 timeslot for the day into HBox."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Put HBox into dayStackPane."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Loop to next day."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        blockWidth \u003d blockWidth / (schedules.size());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane dayStackPane \u003d dayTimeslotStackPanes.get(DayOfWeek.of(i));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            HBox groupTimeslot \u003d new HBox();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            for (int j \u003d 0; j \u003c schedules.size(); j++) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                HashMap\u003cDayOfWeek, ArrayList\u003cDayTimeslot\u003e\u003e personSchedule \u003d schedules.get(j).getWeekSchedule();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                VBox dayScheduleVBox \u003d getDayVBoxOfIndividualSchedule(personSchedule.get(DayOfWeek.of(i)),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                        colors.get(j));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                HBox.setHgrow(dayScheduleVBox, Priority.ALWAYS);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                groupTimeslot.getChildren().add(dayScheduleVBox);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayStackPane.getChildren().add(groupTimeslot);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return scheduleView;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to append the free times of a group into the group schedule."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param schedule A schedule that contains the available time for all group members."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return The scheduleView which contains the available time slots indicated."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GridPane showFreeTime(FreeSchedule schedule) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        HashMap\u003cDayOfWeek, ArrayList\u003cFreeTimeslot\u003e\u003e vacantSchedule \u003d schedule.getFreeSchedule();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane dayStackPane \u003d dayTimeslotStackPanes.get(DayOfWeek.of(i));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ArrayList\u003cFreeTimeslot\u003e freeTimes \u003d vacantSchedule.get(DayOfWeek.of(i));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            VBox freeTimeVBox \u003d getDayVBoxOfFreeSchedule(freeTimes);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayStackPane.getChildren().add(freeTimeVBox);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return scheduleView;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to invoke scrolling events to the schedule view."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void scrollNext() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (scheduleContents.getVvalue() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleContents.setVvalue(1);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleContents.setVvalue(0);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * A class to create a time slot block in the UI."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    class Block {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private int duration;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        public Block(int duration) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "         * Method to obtain a coloured timeslot;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private Region makeColouredTimeslot(String color) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Region result \u003d new Region();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int hours \u003d duration / 60;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int minutes \u003d duration % 60;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            double heightOfTimeslot \u003d hours * oneHourLength + (minutes / 60.0) * oneHourLength;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            result.setPrefSize(blockWidth, heightOfTimeslot);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            result.setStyle(\"-fx-background-color: \" + getLinearGradient(color));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            result.setId(\"colouredTimeslot\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private String getLinearGradient(String color) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Color lighterTone \u003d Color.web(color).desaturate();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            String lighterToneHex \u003d \"#\" + Integer.toHexString(lighterTone.hashCode());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            String linearGradient \u003d \"linear-gradient(\" + lighterToneHex + \" 0%, \" + color + \" 20%, \""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    + color + \" 80%, \" + lighterToneHex + \" 100%);\";"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return linearGradient;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "         * Method to create a transparent block in the table view to indicate free time."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "         * @return Region that represents the free time in the schedule."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private Region makeEmptyTimeslot() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Region result \u003d new Region();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int hours \u003d duration / 60;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int minutes \u003d duration % 60;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            double heightOfTimeslot \u003d hours * oneHourLength + (minutes / 60.0) * oneHourLength;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            result.setPrefSize(blockWidth, heightOfTimeslot);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private Region makeFreeTimeslot() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Region region \u003d makeColouredTimeslot(\"lightgreen\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            region.setId(\"freeTimeslot\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return region;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 389
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SuggestingCommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.beans.binding.BooleanExpression;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.geometry.Point2D;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.control.MultipleSelectionModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import seedu.address.logic.commands.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * The UI component that is responsible for receiving user command inputs and offering user command suggestions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class SuggestingCommandBox extends CommandBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final Popup popup \u003d new Popup();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final ListView\u003cString\u003e listView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final SuggestionLogic suggestionLogic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private SuggestionMode suggestionMode \u003d SuggestionMode.COMMAND_SUGGESTION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private int previousCaretPosition \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public SuggestingCommandBox(CommandExecutor commandExecutor, SuggestionLogic suggestionLogic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(commandExecutor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.suggestionLogic \u003d suggestionLogic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        setupListView();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        setupPopup();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        setupHistoryNavigation();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        setupCommandTextField();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void setupPopup() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        popup.setAutoFix(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        popup.getContent().setAll(listView);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        bindPopupPosition();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        bindShowHidePopup();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Setup the necessary bindings that will cause the popup to show or hide."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Popup will only be shown when the command TextField is in focus and the user has typed something."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void bindShowHidePopup() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final BooleanExpression isCommandTextFieldFocused \u003d commandTextField.focusedProperty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final BooleanExpression hasInput \u003d commandTextField.textProperty().isNotEmpty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final BooleanExpression shouldShowPopupExpression \u003d isCommandTextFieldFocused.and(hasInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Consumer\u003cWindow\u003e setupShowHide \u003d window -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            shouldShowPopupExpression.addListener((unused1, unused2, shouldShowPopup) -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                if (shouldShowPopup) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    popup.show(window);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    popup.hide();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        };"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.onWindowReady(commandTextField, setupShowHide);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Setup the necessary bindings that will reposition the suggestions Popup when the command TextField moves."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void bindPopupPosition() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final InvalidationListener repositionPopup \u003d (observable -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (!popup.isShowing()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final double commandTextFieldHeight \u003d commandTextField.getHeight();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final double popupHeight \u003d popup.getHeight();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final double fullHeight \u003d commandTextFieldHeight + popupHeight;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            double verticalOffset;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            // calculate the expected bottom-left Point2D of the popup window if it\u0027s placed below the command input box"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Point2D popupBottomLeftPoint \u003d commandTextField.localToScreen(0, fullHeight);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (UiUtil.isPointUserVisible(popupBottomLeftPoint, UiUtil.Bounds.VERTICAL)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                // there\u0027s enough space to place the popup window below the command input box, so we\u0027ll do that"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                verticalOffset \u003d commandTextFieldHeight;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                // not enough space to place the popup window below the command input box, so we\u0027ll place it above"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                // instead"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                verticalOffset \u003d popupHeight * -1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Point2D absolutePosition \u003d commandTextField.localToScreen(0, verticalOffset);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            popup.setX(absolutePosition.getX());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            popup.setY(absolutePosition.getY());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Consumer\u003cWindow\u003e setupBindings \u003d window -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            window.xProperty().addListener(repositionPopup);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            window.yProperty().addListener(repositionPopup);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            window.heightProperty().addListener(repositionPopup);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            popup.showingProperty().addListener((unused1, unused2, isShowing) -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                // TODO: find a better way to force a popup reposition when it toggles from hidden to shown state"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                if (!isShowing) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    repositionPopup.invalidated(null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        };"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.onWindowReady(commandTextField, setupBindings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void setupListView() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        listView.setId(\"suggestions-list\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        listView.setMaxHeight(100); // TODO: flexible height"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        listView.setFocusTraversable(false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        listView.prefWidthProperty().bind(commandTextField.widthProperty());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.redirectKeyCodeEvents(commandTextField, listView, KeyCode.TAB);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.addKeyCodeListener(listView, KeyCode.TAB, this::onListViewTabKey);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Recompute the suggestions based on the command in the {@link #commandTextField} and its caret."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void recomputeSuggestions() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String commandText \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final int caretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final ObservableList\u003cString\u003e suggestions \u003d suggestionLogic.getSuggestions(commandText, caretPosition);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        setSuggestionsSource(suggestions);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void setupCommandTextField() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        JavaFX\u0027s events are fired in this order: textProperty invalidation then caretPosition invalidation."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        At the textProperty invalidation, the caretPosition property lags behind. For example, if the user currently"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        has a command like \"abc\" with the caret after the letter \"c\" (i.e. \"abc|\") then types one new character \"d\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        the textProperty listener will fire with the new text \"abcd\" but checking for the caretPosition at this point"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        will still say the caret is between c and d (i.e. \"abc|d\"). Only later at the caretPosition invalidation does"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        the caretPosition update itself to be \"abcd|\"."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        For simplicity and since suggestions are sensitive to the position of the caret, we recalculate suggestions"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        when the caretPosition invalidates, as that seems to be the point at which the data state is consistent with the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        user interface state. This event fires in all the following cases: after the user types in a new character,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        after the user deletes one character, when the user manually moves the caret by keyboard arrow keys and when"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        the user manually moves the caret by clicking. This recalculation is seen in the ChangeListener for the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        caretPositionProperty()."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        An edge case occurs if somehow the text itself changes but the caretPosition doesn\u0027t. This may happen if the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        user currently has a command of length n and atomically overwrites it with a different command but with the same"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        length n. For example, the user already has \"abc\" in the command box then highlights all text and pastes \"def\"."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Since the caret remains at position 3 throughout, our above caretPosition recalculation doesn\u0027t fire, so the new"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        suggestions for command \"def\" don\u0027t appear, which is a problem. The only way to force a recalculation just for"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this specific case is to compare the length of the old command and the new command (i.e. \"abc\".length() vs"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        \"def\".length()) and check if the caret position remains unchanged. This is why the ChangeListener from the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        caretPositionProperty() updates a previousCaretPosition variable so that the ChangeListener on the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        textProperty() can force a recalculation since a caretPosition invalidation will never be fired for this case."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        commandTextField.caretPositionProperty().addListener((unused1, unused2, caretPosition) -\u003e {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            previousCaretPosition \u003d caretPosition.intValue();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            recomputeSuggestions();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        commandTextField.textProperty().addListener((unused, oldText, newText) -\u003e {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final int newCaretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (oldText.length() \u003d\u003d newText.length()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    \u0026\u0026 !oldText.equals(newText)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    \u0026\u0026 previousCaretPosition \u003d\u003d newCaretPosition) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                We know the text changed but the caret didn\u0027t move, user might have copy-pasted a new command with"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                exactly the same length as the old command, so in this edge case, we\u0027ll specifically recompute the"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                suggestions since the caretPositionProperty() invalidation listener will not fire."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                recomputeSuggestions();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Handles what happens when a user selects a suggestion by pressing the Tab key."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param keyEvent A {@link KeyEvent} representing the {@link KeyCode#TAB} event."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void onListViewTabKey(final KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assert keyEvent.getCode().equals(KeyCode.TAB);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final MultipleSelectionModel\u003cString\u003e selectionModel \u003d listView.getSelectionModel();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (selectionModel.isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (listView.getItems().isEmpty()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            selectionModel.selectFirst();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        keyEvent.consume();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String commandText \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final int caretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String selectedItem \u003d selectionModel.getSelectedItem();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final var newCommandBoxState \u003d suggestionLogic.selectSuggestion(commandText, caretPosition, selectedItem);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        setCommandText(newCommandBoxState.commandText);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        setCaretPosition(newCommandBoxState.caretPosition);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void setCaretPosition(final int position) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        commandTextField.positionCaret(position);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void setCommandText(final String commandText) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        commandTextField.setText(commandText);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void setSuggestionsSource(final ObservableList\u003cString\u003e suggestionsSource) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        listView.setItems(suggestionsSource);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void setupHistoryNavigation() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final EnumSet\u003cKeyCode\u003e commandHistoryNavigationKeys \u003d EnumSet.of(KeyCode.UP, KeyCode.DOWN);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // Redirect the UP/DOWN keypresses to the listView only when there is a command in the commandTextField"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.redirectKeyCodeEvents(commandTextField, listView, commandHistoryNavigationKeys, (keyEvent) -\u003e {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (commandTextField.getText().isEmpty()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                suggestionMode \u003d SuggestionMode.HISTORY_COMMAND_NAVIGATION;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         When an UP/DOWN keypress is triggered on the commandTextField and is not redirected,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         go through the user\u0027s past commands"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.addKeyCodeListener(commandTextField, commandHistoryNavigationKeys, keyEvent -\u003e {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (commandTextField.getText().isEmpty()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                commandHistory.resetHistoryPointer();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else if (suggestionMode \u003d\u003d SuggestionMode.COMMAND_SUGGESTION) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final KeyCode userDirection \u003d keyEvent.getCode();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            String commandText \u003d null;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            switch (userDirection) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                commandText \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                commandText \u003d commandHistory.getNextCommand();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                throw new IllegalStateException(\"Unexpected KeyCode: \" + userDirection);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (null !\u003d commandText) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                commandTextField.setText(commandText);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                commandTextField.positionCaret(commandText.length());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected void handleCommandEntered() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String userInput \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        commandHistory.add(0, userInput);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        suggestionMode \u003d SuggestionMode.COMMAND_SUGGESTION;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        commandHistory.resetHistoryPointer();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super.handleCommandEntered();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Suggestion Modes of the SuggestingCommandBox class"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    enum SuggestionMode {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        COMMAND_SUGGESTION, HISTORY_COMMAND_NAVIGATION"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Represents a class that can provide command suggestions."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public interface SuggestionLogic {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * Gets the suggested values of a {@code commandText} at the {@code caretPosition}."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * @param commandText   The full command input."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * @param caretPosition The position of the caret within the {@code commandText}."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * @return A list of suggested values at the {@code caretPosition}."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ObservableList\u003cString\u003e getSuggestions(final String commandText, final int caretPosition);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * Selects a suggestion at the {@code caretPosition} within the {@code commandText}. Provides the new"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * {@code commandText} along with the desired caret position within the {@link SelectionResult}."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * @param commandText   The full command input."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * @param caretPosition The position of the caret within the {@code commandText}."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * @param selectedValue The value that was selected at the {@code caretPosition}."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * @return The new {@code commandText} along with the desired caret position within the {@link SelectionResult}."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        SelectionResult selectSuggestion("
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                final String commandText, final int caretPosition, final String selectedValue);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * Represents the desired state of the {@link SuggestingCommandBox} in terms of its {@code commandText} and"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         * {@code caretPosition}."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        class SelectionResult {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            public final String commandText;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            public final int caretPosition;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            SelectionResult(final String commandText, final int position) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                CollectionUtil.requireAllNonNull(commandText, position);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                this.commandText \u003d commandText;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                this.caretPosition \u003d position;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            public static SelectionResult of(final String commandText) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return new SelectionResult(commandText, commandText.length());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            public static SelectionResult of(final String commandText, final int position) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return new SelectionResult(commandText, position);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 337
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TabPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Class to create a tab panel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class TabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"TabPanel.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private TabPane tabPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Tab personsTab;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Tab groupsTab;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public TabPanel() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.tabPanel \u003d new TabPane();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.personsTab \u003d new Tab(\"Person\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        personsTab.setClosable(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.groupsTab \u003d new Tab(\"Groups\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupsTab.setClosable(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        tabPanel.getTabs().addAll(personsTab, groupsTab);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void setContent(Node personList, Node groupList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        personsTab.setContent(personList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupsTab.setContent(groupList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public TabPane getTabs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return this.tabPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/timebook_logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNotEmpty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.geometry.Point2D;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Contains utility methods used by the various *UiPart classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class UiUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Schedules the {@code onSceneReady} code to run when the {@code targetNode} is added to a {@link Scene}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param targetNode   The {@link Node} whose {@link Node#sceneProperty()} to wait on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param onSceneReady The code to execute once the {@code targetNode}\u0027s {@link Node#sceneProperty()} is ready."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static void onSceneReady(final Node targetNode, final Consumer\u003cScene\u003e onSceneReady) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireAllNonNull(targetNode, onSceneReady);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        oncePropertyNotNull(targetNode.sceneProperty(), onSceneReady::accept);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Schedules the {@code onWindowReady} code to run when the {@code targetNode} is added to a {@link Window}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param targetNode    The {@link Node} whose {@link Node#sceneProperty()} to wait on."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param onWindowReady The code to execute once the {@code targetNode}\u0027s {@link Node#sceneProperty()} is ready."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static void onWindowReady(final Node targetNode, final Consumer\u003cWindow\u003e onWindowReady) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireAllNonNull(targetNode, onWindowReady);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        oncePropertyNotNull(targetNode.sceneProperty(), (scene) -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            oncePropertyNotNull(scene.windowProperty(), onWindowReady::accept);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Schedules the {@code onPropertyNotNull} code to run only once, when the {@code property}\u0027s"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * {@link ObservableValue#getValue()} is not null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param property          The {@link ObservableValue} whose {@link ObservableValue#getValue()} to wait on."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param onPropertyNotNull The code to execute once the {@code property}\u0027s {@link ObservableValue#getValue()} is"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *                          not null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static \u003cT\u003e void oncePropertyNotNull(final ObservableValue\u003cT\u003e property,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                                                final Consumer\u003cT\u003e onPropertyNotNull) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireAllNonNull(property, onPropertyNotNull);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final T value \u003d property.getValue();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (value !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            onPropertyNotNull.accept(value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            property.addListener((unused1, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                if (!(oldValue \u003d\u003d null \u0026\u0026 newValue !\u003d null)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                onPropertyNotNull.accept(newValue);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Listens for {@link KeyEvent#KEY_PRESSED} events from {@code node} and passes it to {@code keyEventConsumer}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * if {@code eventPredicate} returns true."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param node             The {@link Node} where the {@link KeyEvent#KEY_PRESSED} events will occur."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param eventPredicate   A predicate that checks if a {@link KeyEvent} should be"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *                         handled by {@code keyEventConsumer}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param keyEventConsumer The code to execute if the {@link KeyEvent#KEY_PRESSED} events"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *                         passes the {@code eventPredicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static void matchKeyEvents(final Node node,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                                       final Predicate\u003cKeyEvent\u003e eventPredicate,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                                       final Consumer\u003cKeyEvent\u003e keyEventConsumer) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireAllNonNull(node, eventPredicate, keyEventConsumer);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        node.addEventFilter(KeyEvent.KEY_PRESSED, keyEvent -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Boolean isInterestedEvent \u003d eventPredicate.test(keyEvent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (!isInterestedEvent) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            keyEventConsumer.accept(keyEvent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Redirects {@link KeyEvent#KEY_PRESSED} events from {@code eventSource} to {@code eventTarget}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * if it is in the {@code keyCodes}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param eventSource The {@link Node} where the original {@link KeyEvent#KEY_PRESSED} events will occur."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param eventTarget The {@link Node} where the {@link KeyEvent#KEY_PRESSED} events will be redirected to."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param keyCodes    The {@link KeyCode}s that will be redirected to the {@code eventTarget}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static void redirectKeyCodeEvents(final Node eventSource, final Node eventTarget,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                                             final KeyCode... keyCodes) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireAllNonNull(eventSource, eventTarget, keyCodes);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        addKeyCodeListener(eventSource, keyEvent -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            eventTarget.fireEvent(keyEvent);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }, keyCodes);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Redirects {@link KeyEvent#KEY_PRESSED} events from {@code eventSource} to {@code eventTarget}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * if it is in the {@code keyCodes} and matches the {@code additionalConditions}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param eventSource          The {@link Node} where the original {@link KeyEvent#KEY_PRESSED} events will occur."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param eventTarget          The {@link Node} where the {@link KeyEvent#KEY_PRESSED} events will be redirected to."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param keyCodes             The {@link KeyCode}s that will be redirected to the {@code eventTarget}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param additionalConditions Additional conditions to check if a {@link KeyEvent} should be redirected to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *                             the {@code eventTarget}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static void redirectKeyCodeEvents(final Node eventSource, final Node eventTarget,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                                             final Collection\u003cKeyCode\u003e keyCodes,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                                             final Predicate\u003cKeyEvent\u003e additionalConditions) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireAllNonNull(eventSource, eventTarget, keyCodes);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        addKeyCodeListener(eventSource, keyCodes, keyEvent -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (!additionalConditions.test(keyEvent)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            eventTarget.fireEvent(keyEvent);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Schedules the {@code keyEventConsumer} code to run when a {@link KeyEvent#KEY_PRESSED} event happens on the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * {@code node} and the key pressed is in the {@code interestedKeyCodes}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param node               The {@link Node} where the {@link KeyEvent#KEY_PRESSED} events will occur."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param interestedKeyCodes The {@link KeyCode}s that will trigger the {@code keyEventConsumer}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param keyEventConsumer   The code to execute if the {@link KeyCode} is in the {@code keyCodes}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static void addKeyCodeListener(final Node node, final Collection\u003cKeyCode\u003e interestedKeyCodes,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                                          final Consumer\u003cKeyEvent\u003e keyEventConsumer) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireAllNonNull(node, keyEventConsumer, interestedKeyCodes);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cKeyEvent\u003e keyCodeMatcher \u003d (keyEvent -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return interestedKeyCodes.contains(keyEvent.getCode());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        matchKeyEvents(node, keyCodeMatcher, keyEventConsumer);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Schedules the {@code keyEventConsumer} code to run when a {@link KeyEvent#KEY_PRESSED} event happens on the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * {@code node} and the key pressed is in the {@code interestedKeyCodes}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param node               The {@link Node} where the {@link KeyEvent#KEY_PRESSED} events will occur."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param keyEventConsumer   The code to execute if the {@link KeyCode} is in the {@code keyCodes}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param interestedKeyCodes The {@link KeyCode}s that will trigger the {@code keyEventConsumer}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static void addKeyCodeListener(final Node node, final Consumer\u003cKeyEvent\u003e keyEventConsumer,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                                          final KeyCode... interestedKeyCodes) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        addKeyCodeListener(node, List.of(interestedKeyCodes), keyEventConsumer);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Schedules the {@code keyEventConsumer} code to run when a {@link KeyEvent#KEY_PRESSED} event happens on the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * {@code node} and the key pressed matches the {@code interestedKeyCode}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param node              The {@link Node} where the {@link KeyEvent#KEY_PRESSED} events will occur."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param interestedKeyCode The {@link KeyCode} that will trigger the {@code keyEventConsumer}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param keyEventConsumer  The code to execute if the {@link KeyCode} is in the {@code keyCodes}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static void addKeyCodeListener(final Node node, final KeyCode interestedKeyCode,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                                          final Consumer\u003cKeyEvent\u003e keyEventConsumer) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        addKeyCodeListener(node, keyEventConsumer, interestedKeyCode);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Checks if the given {@code point} is located within what the user\u0027s screen(s) can show."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param point The point to check."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Whether the given {@code point} can be displayed on a screen."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static boolean isPointUserVisible(final Point2D point) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return isPointUserVisible(point, Bounds.ALL);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Checks if the given {@code point} is both located within what the user\u0027s screen(s) can show and"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * the desired bound."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param point The point to check."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param bound The screen bound that the point will be checked against."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Whether the given {@code point} can be displayed on a screen, within the desired bound."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static boolean isPointUserVisible(final Point2D point, Bounds bound) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return isPointUserVisible(point, EnumSet.of(bound));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Checks if the given {@code point} is both located within what the user\u0027s screen(s) can show and"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * the desired bounds."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param point       The point to check."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param checkBounds The screen bounds that the point will be checked against."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Whether the given {@code point} can be displayed on a screen, within the desired bounds."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static boolean isPointUserVisible(final Point2D point, final EnumSet\u003cBounds\u003e checkBounds) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireAllNonNull(point, checkBounds);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireAllNotEmpty(checkBounds);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return Screen.getScreens().stream().anyMatch(screen -\u003e {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Rectangle2D visualBounds \u003d screen.getVisualBounds();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            boolean userVisible \u003d true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (userVisible \u0026\u0026 checkBounds.contains(Bounds.TOP)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                userVisible \u003d visualBounds.getMinY() \u003c\u003d point.getY();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (userVisible \u0026\u0026 checkBounds.contains(Bounds.RIGHT)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                userVisible \u003d point.getX() \u003c\u003d visualBounds.getMaxX();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (userVisible \u0026\u0026 checkBounds.contains(Bounds.BOTTOM)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                userVisible \u003d point.getY() \u003c\u003d visualBounds.getMaxY();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (userVisible \u0026\u0026 checkBounds.contains(Bounds.LEFT)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                userVisible \u003d visualBounds.getMinX() \u003c\u003d point.getX();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return userVisible;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Represents the four basic UI layout bounds"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public enum Bounds {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        TOP, RIGHT, BOTTOM, LEFT;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public static final EnumSet\u003cBounds\u003e HORIZONTAL \u003d EnumSet.of(LEFT, RIGHT);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public static final EnumSet\u003cBounds\u003e VERTICAL \u003d EnumSet.of(TOP, BOTTOM);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        public static final EnumSet\u003cBounds\u003e ALL \u003d EnumSet.allOf(Bounds.class);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 257
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/BubbleGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.shape.Ellipse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to create a bubble with contents inside it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class BubbleGenerator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private String bubbleContent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane bubbleContainer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private double size;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private double borderSize;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public BubbleGenerator(int content, double size) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.bubbleContainer \u003d new StackPane();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.bubbleContent \u003d content + \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.borderSize \u003d borderSize;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public BubbleGenerator(String content, double size) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.bubbleContainer \u003d new StackPane();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.bubbleContent \u003d content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.borderSize \u003d borderSize;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public StackPane getBubble() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        String color \u003d ColorGenerator.generateColorList(1).get(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Ellipse outer \u003d new Ellipse(size / 2, size / 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Label bubbleLabel \u003d new Label(bubbleContent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        bubbleLabel.setStyle(\"-fx-text-fill: black;\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        outer.setStyle(\"-fx-fill: \" + color + \";\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        bubbleContainer.getChildren().addAll(outer, bubbleLabel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return bubbleContainer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/ColorGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to handle generation of colors."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ColorGenerator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static ArrayList\u003cString\u003e listOfColors \u003d new ArrayList\u003cString\u003e(List.of(\"#FFA8A8\", \"#FFCA9E\", \"#FBFF6A\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \"#7FFFFE\", \"#8B7FFF\", \"#DB7FFF\", \"#FFA5E5\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to generate a random list of colors to tag each group member with a particular colour."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param groupSize The group size."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return A list of unique colors for the group\u0027s schedule view."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static ArrayList\u003cString\u003e generateColorList(int groupSize) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cString\u003e colors \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        HashSet\u003cString\u003e colorChecker \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        while (i \u003c groupSize) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int index \u003d (int) (Math.random() * (listOfColors.size() - 1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (colorChecker.contains(listOfColors.get(index))) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            colors.add(listOfColors.get(index));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            colorChecker.add(listOfColors.get(index));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return colors;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/DateFormatter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to format dates."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class DateFormatter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static String formatToString(LocalDate localDate) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return localDate.getDayOfMonth() + \"/\" + localDate.getMonthValue();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/DefaultStartView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to show our projet logo when the application starts up."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class DefaultStartView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"DefaultStartView.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private final Image logo \u003d new Image(getClass().getResourceAsStream(\"/images/timebook_logo.png\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ImageView logoView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane defaultStartViewContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public DefaultStartView(double prefWidth, double prefHeight) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        logoView.setImage(logo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        logoView.setFitHeight(prefHeight);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        logoView.setFitWidth(prefWidth);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        logoView.setPreserveRatio(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/GroupDetailCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.sidepanel.GroupDisplay;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to show group details comprehensively."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class GroupDetailCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"GroupDetailCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private VBox groupDetailContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label groupName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label groupDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Label groupRemark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GroupDetailCard(GroupDisplay groupDisplay) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupName.setText(groupDisplay.getGroupName().toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupDescription.setText(groupDisplay.getGroupDescription().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupRemark.setText(groupDisplay.getGroupRemark().remark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 1,
      "YiJiee": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/GroupDetailsExport.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DetailWindowDisplay;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.WeekSchedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.ScheduleStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Class to handle exportation of group details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class GroupDetailsExport extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"GroupDetailsExport.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane groupDetailCard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane groupMembersList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane groupSchedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private StackPane groupDetailContainer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GroupDetailsExport(DetailWindowDisplay detailWindowDisplay) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ScheduleStub stub \u003d new ScheduleStub();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cWeekSchedule\u003e schedules \u003d detailWindowDisplay.getWeekSchedules();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cString\u003e names \u003d schedules.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .map(wkSch -\u003e wkSch.getPersonDisplay().getName().toString())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cString\u003e emails \u003d schedules.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                .map(wkSch -\u003e wkSch.getPersonDisplay().getEmail().toString())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cString\u003e roles \u003d detailWindowDisplay.getWeekSchedules().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                .map(wkSch -\u003e wkSch.getRole().toString())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ArrayList\u003cString\u003e colors \u003d ColorGenerator.generateColorList(names.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ScheduleExport scheduleView \u003d new ScheduleExport(schedules, colors);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        GroupDetailCard groupCard \u003d new GroupDetailCard(detailWindowDisplay.getGroupDisplay());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupDetailCard.getChildren().add(groupCard.getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupMembersList.getChildren().add(new MemberList(names, emails, roles, colors).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        groupSchedule.getChildren().add(scheduleView.getScheduleView());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 8,
      "YiJiee": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/LocationPopup.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to show pop ups to indicate location suggestions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class LocationPopup {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Node popupDetails;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Stage popupStage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public LocationPopup(Node details) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.popupDetails \u003d details;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.popupStage \u003d new Stage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        StackPane popupContainer \u003d new StackPane();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        popupContainer.getChildren().add(popupContainer);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Scene layout \u003d new Scene(popupContainer);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        layout.setOnKeyPressed(new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            public void handle(KeyEvent ke) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                if (ke.getCode() \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    popupStage.close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        popupStage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        popupStage.setScene(layout);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        popupStage.show();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        popupStage.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/MemberList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.effect.DropShadow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to show the members of a group."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class MemberList extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"MemberList.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private GridPane listHeaders;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private VBox listMembers;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ScrollPane listHeaderContainer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ScrollPane listMemberContainer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public MemberList(List\u003cString\u003e members, List\u003cString\u003e emails, List\u003cString\u003e roles, List\u003cString\u003e colors) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            MemberCard memberCard \u003d new MemberCard(members.get(i), emails.get(i), roles.get(i), colors.get(i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            listMembers.getChildren().add(memberCard.getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        listHeaderContainer.hvalueProperty().bindBidirectional(listMemberContainer.hvalueProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        listMemberContainer.setFitToWidth(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        listHeaderContainer.setFitToWidth(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * A subclass of MemberList to show MemberCard of group members."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    class MemberCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private static final String FXML \u003d \"MemberCard.fxml\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private GridPane memberCard;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private Label memberName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private Label memberEmail;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private Label memberRole;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private Region colorRegion;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        public MemberCard(String name, String email, String role, String color) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            super(FXML);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            this.memberName.setText(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (email.equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                this.memberEmail.setText(\"No Email Available\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                this.memberEmail.setText(email);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (role.equals(\"\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                this.memberRole.setText(\"No Role Available\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                this.memberRole.setText(role);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            setUpCard(color);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        private GridPane setUpCard(String color) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            DropShadow shadowEffect \u003d new DropShadow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            shadowEffect.setOffsetY(3);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            shadowEffect.setOffsetX(3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            memberCard.setEffect(shadowEffect);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            colorRegion.setStyle(\"-fx-background-color:\" + color + \";\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    + \"-fx-border-radius: 2;\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    + \"-fx-background-radius: 2;\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    + \"-fx-min-height: 50;\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return memberCard;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 17,
      "YiJiee": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/ScheduleExport.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.effect.DropShadow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.ColumnConstraints;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.DayTimeslot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.display.detailwindow.WeekSchedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * A class to generate a schedule table (ui) from a Schedule object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ScheduleExport {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    //Schedule to be received from logic MUST have timeslots in chronological order."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    //ScheduleExport must be wrapped in a scroll pane otherwise the view will become distorted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static final String FXML \u003d \"ScheduleExport.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static ArrayList\u003cString\u003e dayNames \u003d new ArrayList\u003cString\u003e(List.of(\"Monday\", \"Tuesday\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private static ArrayList\u003cString\u003e listOfColors \u003d new ArrayList\u003cString\u003e(List.of(\"darkred\", \"navy\", \"darkgreen\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \"darkorange\", \"lightslategray\", \"orchid\", \"teal\", \"darkmagenta\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private GridPane scheduleView;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private HashMap\u003cDayOfWeek, StackPane\u003e dayTimeslotStackPanes \u003d new HashMap\u003cDayOfWeek, StackPane\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private List\u003cString\u003e colors;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private int oneHourLength \u003d 60;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private int preferredWidth \u003d 100;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private double blockWidth \u003d 100;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private int startTime \u003d 8;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private int endTime \u003d 20;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private int currentDay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private LocalDate currentDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ScheduleExport() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.currentDay \u003d LocalDateTime.now().getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseHeaders();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseTableCells();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ScheduleExport(WeekSchedule weekSchedule) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.currentDay \u003d LocalDateTime.now().getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseHeaders();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseTableCells();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        HashMap\u003cDayOfWeek, ArrayList\u003cDayTimeslot\u003e\u003e scheduleMap \u003d weekSchedule.getWeekSchedule();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        showIndividualSchedule(scheduleMap, listOfColors.get((int) (Math.random() * (listOfColors.size() - 1))));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public ScheduleExport(ArrayList\u003cWeekSchedule\u003e weekSchedules, List\u003cString\u003e colors) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.currentDay \u003d LocalDateTime.now().getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        this.colors \u003d colors;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseHeaders();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        initialiseTableCells();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        showGroupSchedule(weekSchedules);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ScheduleExport initialise() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleView \u003d new GridPane();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleView.setStyle(\"-fx-border-width: 2; -fx-border-color: transparent; -fx-pref-width: 1100;\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Helper method to initialise the headers in the table view."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private void initialiseHeaders() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //initialise headers"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Region placeHolder \u003d new Region();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        placeHolder.setStyle(\"-fx-background-color: transparent\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleView.add(placeHolder, 0, 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Region secondPlaceHolder \u003d new Region();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        secondPlaceHolder.setStyle(\"-fx-background-color: transparent\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleView.add(secondPlaceHolder, 8, 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ColumnConstraints colCOffset \u003d new ColumnConstraints();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        colCOffset.setPercentWidth(5);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleView.getColumnConstraints().add(colCOffset);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //day headers"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int offset \u003d (currentDay + i - 1) \u003e 7 ? currentDay + i - 8 : currentDay + i - 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane sp \u003d new StackPane();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Label dayText \u003d new Label(DayOfWeek.of(offset).toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Label dayDate \u003d new Label(DateFormatter.formatToString(currentDate.plusDays(i - 1)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            VBox dayLabelContainer \u003d new VBox();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayLabelContainer.setPrefSize(preferredWidth, 50);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ColumnConstraints colC \u003d new ColumnConstraints();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            colC.setPercentWidth(12.857);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleView.getColumnConstraints().add(colC);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayLabelContainer.setStyle(\"-fx-background-color: white; -fx-border-width: 2; -fx-alignment: center;\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayLabelContainer.getChildren().addAll(dayText, dayDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            sp.getChildren().addAll(dayLabelContainer);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleView.add(sp, i, 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ColumnConstraints colCOffset2 \u003d new ColumnConstraints();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        colCOffset2.setPercentWidth(5);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        scheduleView.getColumnConstraints().add(colCOffset2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //timeslot headers"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int j \u003d startTime; j \u003c endTime; j++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            //left-side headers"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            String time \u003d TimeFormatter.formatIntToTime(j);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Region timeslotLeftLabelContainer \u003d new Region();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            timeslotLeftLabelContainer.setPrefSize(preferredWidth, oneHourLength);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            timeslotLeftLabelContainer.setStyle(\"-fx-background-color: white; -fx-border-color: white;\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Label timeslotLeftText \u003d new Label(time);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane leftTimeslotHeaderContainer \u003d new StackPane();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            leftTimeslotHeaderContainer.getChildren().addAll(timeslotLeftLabelContainer, timeslotLeftText);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleView.add(leftTimeslotHeaderContainer, 0, j - startTime + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            //right-side headers"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Region timeslotRightLabelContainer \u003d new Region();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            timeslotRightLabelContainer.setPrefSize(preferredWidth, oneHourLength);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            timeslotRightLabelContainer.setStyle(\"-fx-background-color: white; -fx-border-color: white;\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Label timeslotRightText \u003d new Label(time);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane rightTimeslotHeaderContainer \u003d new StackPane();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            rightTimeslotHeaderContainer.getChildren().addAll(timeslotRightLabelContainer, timeslotRightText);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleView.add(rightTimeslotHeaderContainer, 8, j - startTime + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Helper method to initialise table cells and grid lines in the table view."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private void initialiseTableCells() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //timeslot data"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int l \u003d 1; l \u003c\u003d 7; l++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int offsetDay \u003d (currentDay + l - 1) \u003e 7 ? (currentDay + l - 8) : (currentDay + l - 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            VBox timeslotContainer \u003d new VBox();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Region firstRegionOffset \u003d new Region();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            firstRegionOffset.setPrefSize(preferredWidth, oneHourLength / 2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            firstRegionOffset.setStyle(\"-fx-border-color: lightgrey; -fx-border-style: solid none none solid\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            timeslotContainer.getChildren().add(firstRegionOffset);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            for (int k \u003d startTime; k \u003c endTime; k++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                StackPane timeslotRegion \u003d new StackPane();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                Region timeslotMajorRegion \u003d new Region();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslotMajorRegion.setStyle(\"-fx-border-color: lightgrey; -fx-border-style: solid none none solid;\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                VBox timeslotMinorRegion \u003d new VBox();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                Region offset \u003d makeEmptyTimeslot(30);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                Region timeslotMinorRegion1 \u003d new Region();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslotMinorRegion1.setStyle(\"-fx-border-color: lightgrey; -fx-border-style: dotted none none dotted\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslotMinorRegion1.setPrefSize(preferredWidth, oneHourLength / 2.0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslotMinorRegion.getChildren().addAll(offset, timeslotMinorRegion1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                if (k \u003d\u003d endTime - 1) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotMajorRegion.setPrefSize(preferredWidth, oneHourLength / 2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotRegion.getChildren().addAll(timeslotMajorRegion);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotContainer.getChildren().add(timeslotRegion);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotMajorRegion.setPrefSize(preferredWidth, oneHourLength);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotRegion.getChildren().addAll(timeslotMajorRegion, timeslotMinorRegion);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    timeslotContainer.getChildren().add(timeslotRegion);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            stackPane.getChildren().add(timeslotContainer);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayTimeslotStackPanes.put(DayOfWeek.of(offsetDay), stackPane);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            scheduleView.add(stackPane, l, 1, 1, endTime - startTime);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to create a transparent block in the table view to indicate free time."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param durationMinutes Length of the block in minutes."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return Region that represents the free time in the schedule."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Region makeEmptyTimeslot(int durationMinutes) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Region result \u003d new Region();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int hours \u003d durationMinutes / 60;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int minutes \u003d durationMinutes % 60;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        double heightOfTimeslot \u003d hours * oneHourLength + (minutes / 60.0) * oneHourLength;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        result.setPrefSize(blockWidth, heightOfTimeslot);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Helper method to create a block of coloured timeslot in the table view."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param durationMinutes Length of the block in minutes."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param color Color of the block."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return Region to be placed in the table view."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Region makeColouredTimeslot(int durationMinutes, String color) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Region result \u003d new Region();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int hours \u003d durationMinutes / 60;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int minutes \u003d durationMinutes % 60;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        double heightOfTimeslot \u003d hours * oneHourLength + (minutes / 60.0) * oneHourLength;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        result.setPrefSize(blockWidth, heightOfTimeslot);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //result.setMaxWidth(blockWidth); setsMaxWidth of busy timeslot."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        result.setStyle(\"-fx-background-color: \" + color + \"; -fx-border-width: 2; -fx-background-radius: 5;\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        DropShadow shadow \u003d new DropShadow();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        shadow.setOffsetX(3);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        shadow.setOffsetY(3);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        result.setEffect(shadow);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private int getTimeDifference(int startTime, int endTime) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int hours \u003d (endTime - startTime) / 100;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int minutes \u003d (endTime - startTime) % 100;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return hours * 60 + minutes;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private VBox getDayVBoxOfIndividualSchedule(ArrayList\u003cDayTimeslot\u003e daySchedule, String color) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        VBox timeslotContainer \u003d new VBox();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        timeslotContainer.setStyle(\"-fx-padding: 0 2 0 2; -fx-border-width: 2;\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        timeslotContainer.getChildren().add(makeEmptyTimeslot(30));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        int originalTimeStamp \u003d startTime * 100;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int j \u003d 0; j \u003c daySchedule.size(); j++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            DayTimeslot timeslot \u003d daySchedule.get(j);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int startTime \u003d TimeFormatter.formatTimeToInt(timeslot.getStartTime());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            int endTime \u003d TimeFormatter.formatTimeToInt(timeslot.getEndTime());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            Region busyTimeslot \u003d makeColouredTimeslot(getTimeDifference(startTime, endTime), color);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            if (originalTimeStamp !\u003d startTime) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                int timeUntilBusy \u003d getTimeDifference(originalTimeStamp, startTime);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                Region freeTimeslot \u003d makeEmptyTimeslot(timeUntilBusy);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                timeslotContainer.getChildren().add(freeTimeslot);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            timeslotContainer.getChildren().add(busyTimeslot);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            originalTimeStamp \u003d endTime;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return timeslotContainer;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to obtain a table view of an individual\u0027s schedule."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param scheduleMap ScheduleMap obtained by calling getScheduleMap on a Schedule object."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param color Color of the blocks in the table view."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return  GridPane table view of the individual\u0027s schedule."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GridPane showIndividualSchedule(HashMap\u003cDayOfWeek, ArrayList\u003cDayTimeslot\u003e\u003e scheduleMap,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                                           String color) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            ArrayList\u003cDayTimeslot\u003e daySchedule \u003d scheduleMap.get(DayOfWeek.of(i));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane dayStackPane \u003d dayTimeslotStackPanes.get(DayOfWeek.of(i));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            VBox timeslotContainer \u003d getDayVBoxOfIndividualSchedule(daySchedule, color);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayStackPane.getChildren().add(timeslotContainer);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return scheduleView;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to obtain a table view of the all the schedules present in a group."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param schedules An array list of schedule maps obtained from calling getScheduleMap on a Schedule Object."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return  GridPane table view of schedules."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GridPane showGroupSchedule(ArrayList\u003cWeekSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Assign colors to each schedule."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Draw VBox of each individual\u0027s schedule."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Put VBoxes of all individuals\u0027 timeslot for the day into HBox."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Put HBox into dayStackPane."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Loop to next day."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        blockWidth \u003d blockWidth / (schedules.size());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            StackPane dayStackPane \u003d dayTimeslotStackPanes.get(DayOfWeek.of(i));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            HBox groupTimeslot \u003d new HBox();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            for (int j \u003d 0; j \u003c schedules.size(); j++) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                HashMap\u003cDayOfWeek, ArrayList\u003cDayTimeslot\u003e\u003e personSchedule \u003d schedules.get(j).getWeekSchedule();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                VBox dayScheduleVBox \u003d getDayVBoxOfIndividualSchedule(personSchedule.get(DayOfWeek.of(i)),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                        colors.get(j));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                HBox.setHgrow(dayScheduleVBox, Priority.ALWAYS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                groupTimeslot.getChildren().add(dayScheduleVBox);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            dayStackPane.getChildren().add(groupTimeslot);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return scheduleView;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public GridPane getScheduleView() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return scheduleView;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 284
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/TimeFormatter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " * Class to format time for the UI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class TimeFormatter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static int formatTimeToInt(LocalTime localTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        return localTime.getHour() * 100 + localTime.getMinute();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * Method to convert int hours to time in 24hours clock representation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @param time Time in hours to be formatted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     * @return String that represents the time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public static String formatIntToTime(int time) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        if (time \u003d\u003d 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return \"0000\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else if (time \u003c 10) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return \"0\" + (time * 100);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return time * 100 + \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/websocket/Cache.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.websocket;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.core.AppSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.util.SimpleJsonUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadCalendar;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Holidays;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleSummaryList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.websocket.util.UrlUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Cache class handles whether to get external data from storage data or api."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class Cache {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Cache.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static NusModsApi api \u003d new NusModsApi(AppSettings.DEFAULT_ACAD_YEAR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private static Optional\u003cObject\u003e gmapsPlaces \u003d load(CacheFileNames.GMAPS_PLACES_PATH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private static Optional\u003cObject\u003e gmapsDistanceMatrix \u003d load(CacheFileNames.GMAPS_DISTANCE_MATRIX_PATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Save json to file in cache folder."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param obj obj to save"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param pathName file name to save the obj as"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static void save(Object obj, String pathName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(obj);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(pathName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Path fullPath \u003d Path.of(pathName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            FileUtil.createIfMissing(fullPath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JsonUtil.saveJsonFile(obj, fullPath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            logger.warning(\"Failed to save file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to save all the API response to a particular JSON file. Only for JSON"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * Object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param key"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param value"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static void saveToJson(String key, Object value , String filePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        JSONParser parser;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        try (Reader reader \u003d new FileReader(filePath)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            JSONObject jsonObject \u003d (JSONObject) parser.parse(reader);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            if (jsonObject.containsKey(key)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                jsonObject.remove(key);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            jsonObject.put(key, value);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            try (FileWriter file \u003d new FileWriter(filePath)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                file.write(jsonObject.toJSONString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to load a previously called API response"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param key"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static String loadFromJson(String key, String filePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        JSONParser parser;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Object result \u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        try (Reader reader \u003d new FileReader(filePath)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            JSONObject jsonObject \u003d (JSONObject) parser.parse(reader);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            result \u003d jsonObject.get(key);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Load json from file in cache folder"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param pathName file name to load from"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return an Optional containing a JSONObject or empty."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static Optional\u003cObject\u003e load(String pathName) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(pathName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Path fullPath \u003d Path.of(pathName);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cObject\u003e objOptional \u003d SimpleJsonUtil.readJsonFile(fullPath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return objOptional;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Load holidays from cache, if failed, call api, then save results to cache folder."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * If api fails too, return empty."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return an Optional containing a Holidays object or empty."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Optional\u003cHolidays\u003e loadHolidays() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cObject\u003e objOptional \u003d load(CacheFileNames.HOLIDAYS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (objOptional.isPresent()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(NusModsParser.parseHolidays((JSONArray) objOptional.get()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        logger.info(\"Holidays not found in cache, getting from API...\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cJSONArray\u003e arrOptional \u003d api.getHolidays();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (arrOptional.isPresent()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            save(arrOptional.get(), CacheFileNames.HOLIDAYS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(NusModsParser.parseHolidays(arrOptional.get()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        logger.warning(\"Failed to get holidays from API! Adding NUSMods data will not be holiday-aware.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Load holidays from cache, if failed, call api, then save results to cache folder."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * If api fails too, return empty."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return an Optional containing a Holidays object or empty."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Optional\u003cAcadCalendar\u003e loadAcadCalendar() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cObject\u003e objOptional \u003d load(CacheFileNames.ACADEMIC_CALENDAR);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (objOptional.isPresent()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(NusModsParser.parseAcadCalendar((JSONObject) objOptional.get()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        logger.info(\"Academic calendar not found in cache, getting from API...\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cJSONObject\u003e jsonObjOptional \u003d api.getAcademicCalendar();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (jsonObjOptional.isPresent()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            save(jsonObjOptional.get(), CacheFileNames.ACADEMIC_CALENDAR);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(NusModsParser.parseAcadCalendar(jsonObjOptional.get()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        logger.severe(\"Failed to get academic calendar from API! Will not be able to add mods to schedules.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Load ModuleSummaryList from cache, if failed, return empty."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return an Optional containing a ModuleSummaryList object or empty."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Optional\u003cModuleSummaryList\u003e loadModuleSummaryList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cObject\u003e objOptional \u003d load(CacheFileNames.MODULES_SUMMARY);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ModuleSummaryList moduleSummaryList \u003d new ModuleSummaryList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        JSONObject modulesSummariesJson \u003d new JSONObject();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (objOptional.isPresent()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONObject moduleSummariesJson \u003d (JSONObject) objOptional.get();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONArray moduleSummariesSingleYear \u003d (JSONArray) moduleSummariesJson.get(api.getAcadYear().toString());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(NusModsParser.parseModuleSummaryList(moduleSummariesSingleYear, api.getAcadYear()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        logger.info(\"Module summaries not found in cache, getting from API...\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cJSONArray\u003e arrOptional \u003d api.getModuleList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (arrOptional.isPresent()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            modulesSummariesJson.put(api.getAcadYear(), arrOptional.get());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            save(modulesSummariesJson, CacheFileNames.MODULES_SUMMARY);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(NusModsParser.parseModuleSummaryList(arrOptional.get(), api.getAcadYear()));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        logger.severe(\"Failed to module summaries from API!\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Load modulelist from cache, if failed, return empty."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return an Optional containing a ModuleList object or empty."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Optional\u003cModuleList\u003e loadModuleList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cObject\u003e objOptional \u003d load(CacheFileNames.MODULES);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ModuleList moduleList \u003d new ModuleList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (objOptional.isPresent()) { // found cached file"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONObject modulesJson \u003d (JSONObject) objOptional.get();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            for (Object key : modulesJson.keySet()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                JSONObject moduleJson \u003d (JSONObject) modulesJson.get(key);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                Module module \u003d NusModsParser.parseModule(moduleJson);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                moduleList.addModule(module);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(moduleList);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        logger.warning(\"No modules in cache. Will be calling from API for each module.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Load a module from cache, if failed, call api, then save results to cache folder."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * If api fails too, return empty."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return an Optional containing a Module object or empty."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Optional\u003cModule\u003e loadModule(ModuleId moduleId) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cObject\u003e objOptional \u003d load(CacheFileNames.MODULES);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        JSONObject modulesJson \u003d new JSONObject();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (objOptional.isPresent()) { // found cached file"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            modulesJson \u003d (JSONObject) objOptional.get();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (modulesJson.containsKey(moduleId.toString())) { // found moduleId in cached file"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                JSONObject moduleJson \u003d (JSONObject) modulesJson.get(moduleId.toString());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                return Optional.of(NusModsParser.parseModule(moduleJson));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        logger.info(\"Module \" + moduleId + \" not found in cache, getting from API...\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Optional\u003cJSONObject\u003e jsonObjFromApiOptional \u003d api.getModule(moduleId.getModuleCode());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (jsonObjFromApiOptional.isPresent()) { // found module from API"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Module module \u003d NusModsParser.parseModule(jsonObjFromApiOptional.get());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            modulesJson.put(module.getModuleId(), jsonObjFromApiOptional.get());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            save(modulesJson, CacheFileNames.MODULES);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(module);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        logger.severe(\"Failed to get module from API! Unable to add mod to schedules.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * Load a module from cache, if failed, call api, then save results to cache folder."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * If api fails too, return empty."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return an Optional containing a Module object or empty."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static JSONArray loadVenues() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        JSONArray venues \u003d (JSONArray) load(CacheFileNames.VENUES_FULL_PATH).get();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (venues !\u003d null) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            return venues;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            logger.info(\"Module not found in cache, getting from API...\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            venues \u003d api.getVenues(\"/1\").orElse(new JSONArray());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            save(venues, CacheFileNames.VENUES_FULL_PATH);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return venues;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to load the info of the place by Google Maps from the cache or Google Maps API"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationName"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static JSONObject loadPlaces(String locationName) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String fullUrl \u003d UrlUtil.generateGmapsPlacesUrl(locationName);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String sanitizedUrl \u003d UrlUtil.sanitizeApiKey(fullUrl);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        JSONObject placesJson \u003d (JSONObject) gmapsPlaces.get();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        JSONObject result \u003d new JSONObject();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        System.out.println(placesJson.get(sanitizedUrl));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (placesJson.get(sanitizedUrl) !\u003d null) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            result \u003d (JSONObject) placesJson.get(sanitizedUrl);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                System.out.print(\"in api\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                result \u003d GmapsApi.getLocation(locationName);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                saveToJson(sanitizedUrl, result, CacheFileNames.GMAPS_PLACES_PATH);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            } catch (ConnectException e) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                logger.severe(\"Failed to get info for \" + locationName + \" from caching and API\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to load the info of the place by Google Maps from the cache or Google Maps API"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationsRow"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationsColumn"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static JSONObject loadDistanceMatrix(ArrayList\u003cString\u003e locationsRow, ArrayList\u003cString\u003e locationsColumn) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String fullUrl \u003d UrlUtil.generateGmapsDistanceMatrixUrl(locationsRow, locationsColumn);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String sanitizedUrl \u003d UrlUtil.sanitizeApiKey(fullUrl);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        JSONObject distanceMatrixJson \u003d (JSONObject) gmapsDistanceMatrix.get();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        JSONObject result \u003d new JSONObject();;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (distanceMatrixJson.get(sanitizedUrl) !\u003d null) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            result \u003d (JSONObject) distanceMatrixJson.get(sanitizedUrl);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                result \u003d GmapsApi.getDistanceMatrix(locationsRow, locationsColumn);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                saveToJson(sanitizedUrl, result, CacheFileNames.GMAPS_DISTANCE_MATRIX_PATH);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            } catch (ConnectException e) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                logger.severe(\"Failed to get info for row: \" + locationsRow + \" column: \" + locationsColumn"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                        + \" from caching and API\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 185,
      "klementtan": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/websocket/CacheFileNames.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.websocket;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Contains names of files defined to be stored in Cache."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class CacheFileNames {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /* Cache File Names */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String CACHE_FOLDER_PATH \u003d \"src/main/resources/ApiResponseCache/\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String GMAPS_FOLDER_PATH \u003d \"GoogleMapsApi/\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String NUSMODS_FOLDER_PATH \u003d \"NusModsApi/\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MODULES \u003d CACHE_FOLDER_PATH + NUSMODS_FOLDER_PATH + \"modules.json\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String MODULES_SUMMARY \u003d CACHE_FOLDER_PATH + NUSMODS_FOLDER_PATH + \"modules_summary.json\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String HOLIDAYS \u003d CACHE_FOLDER_PATH + NUSMODS_FOLDER_PATH + \"holidays.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String ACADEMIC_CALENDAR \u003d CACHE_FOLDER_PATH + NUSMODS_FOLDER_PATH + \"academic_calendar.json\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String VENUES_FULL_PATH \u003d CACHE_FOLDER_PATH + NUSMODS_FOLDER_PATH + \"Venues.json\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String GMAPS_DISTANCE_MATRIX_PATH \u003d CACHE_FOLDER_PATH + GMAPS_FOLDER_PATH"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"DistanceMatrix.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static final String GMAPS_PLACES_PATH \u003d CACHE_FOLDER_PATH + GMAPS_FOLDER_PATH + \"Places.json\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 20,
      "klementtan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/websocket/GmapsApi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.websocket;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.websocket.util.ApiQuery;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.websocket.util.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.websocket.util.QueryResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.websocket.util.UrlUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * This class is used for making API request to Google Maps API"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class GmapsApi {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GmapsApi.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public GmapsApi() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This method is used to execute the Google Maps distance matrix API. It will return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * a complete matrix mapping of all the String in the locations"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return JSONObject of api call"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @throws InvalidParameterException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @throws ConnectException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static JSONObject getDistanceMatrix(ArrayList\u003cString\u003e locationsRow, ArrayList\u003cString\u003e locationsColumn)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            throws InvalidParameterException, ConnectException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ApiQuery query \u003d new ApiQuery(UrlUtil.generateGmapsDistanceMatrixUrl(locationsRow, locationsColumn));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        QueryResult queryResult \u003d query.execute();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (queryResult.process(logger)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            JSONObject obj \u003d ParserUtil.parseStringToJsonObject(queryResult.getResponseResult());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            return obj;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            throw new ConnectException(ParserUtil.parseStringToJsonObject(queryResult.getResponseResult()).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static JSONObject getLocation(String locationName) throws ConnectException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ApiQuery query \u003d new ApiQuery(UrlUtil.generateGmapsPlacesUrl(locationName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        QueryResult queryResult \u003d query.execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (queryResult.process(logger)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            JSONObject obj \u003d ParserUtil.parseStringToJsonObject(queryResult.getResponseResult());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            return obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            throw new ConnectException(ParserUtil.parseStringToJsonObject(queryResult.getResponseResult()).toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/websocket/NusModsApi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.websocket;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.core.AppSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadYear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.websocket.util.ApiQuery;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.websocket.util.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.websocket.util.QueryResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * NUSMods API websocket"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Refer to https://api.nusmods.com/v2/#/ for more detailed information"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class NusModsApi {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final String BASE_URL \u003d \"https://api.nusmods.com/v2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final String ACADEMIC_CALENDAR_URL \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            \"https://raw.githubusercontent.com/nusmodifications/nusmods/master/website/src/data/academic-calendar.json\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final String HOLIDAYS_URL \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            \"https://raw.githubusercontent.com/nusmodifications/nusmods/master/website/src/data/holidays.json\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final String MODULES \u003d \"/modules\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final String SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final String JSON_EXTENSION \u003d \".json\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final String MODULE_LIST \u003d \"/moduleList\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final String MODULE_INFO \u003d \"/moduleInfo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final String SEMESTERS \u003d \"/semesters\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final String VENUES \u003d \"/venues\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final String VENUE_INFO \u003d \"/venueInformation\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private AcadYear acadYear;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Default constructor for NusModsApi object, uses AppSettings.DEFAULT_ACAD_YEAR."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public NusModsApi() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.acadYear \u003d AppSettings.DEFAULT_ACAD_YEAR;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Constructor for NusModsApi object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param acadYear academic year, e.g. 2019/2020"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public NusModsApi(AcadYear acadYear) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public AcadYear getAcadYear() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return acadYear;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setAcadYear(AcadYear acadYear) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns a JSONArray of summaries of all modules in the academic year."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return JSONArray containing module code, title and available semesters for all modules in a year."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Optional\u003cJSONArray\u003e getModuleList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ApiQuery query \u003d new ApiQuery(BASE_URL + SLASH + acadYear.toStringDashed() + MODULE_LIST + JSON_EXTENSION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        QueryResult queryResult \u003d query.execute();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (queryResult.process(logger)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONArray obj \u003d ParserUtil.parseStringToJsonArray(queryResult.getResponseResult());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(obj);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns a JSONArray of detailed information about all modules in the academic year."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return JSONArray containing all module info except timetable and prereq tree for all modules in a year."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Optional\u003cJSONArray\u003e getModuleInfo() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ApiQuery query \u003d new ApiQuery(BASE_URL + SLASH + acadYear.toStringDashed() + MODULE_INFO + JSON_EXTENSION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        QueryResult queryResult \u003d query.execute();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (queryResult.process(logger)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONArray obj \u003d ParserUtil.parseStringToJsonArray(queryResult.getResponseResult());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(obj);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns a JSONObject of all info about moduleCode in the academic year."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param moduleCode code of the specific module."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return JSONObject containing all info available for a specific module including prerequisite tree and timetable."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Optional\u003cJSONObject\u003e getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ApiQuery query \u003d new ApiQuery(BASE_URL + SLASH + acadYear.toStringDashed() + MODULES"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                + SLASH + moduleCode + JSON_EXTENSION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        QueryResult queryResult \u003d query.execute();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (queryResult.process(logger)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            JSONObject obj \u003d ParserUtil.parseStringToJsonObject(queryResult.getResponseResult());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(obj);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * Returns a JSONArray of summaries of all venues for the current semester."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param semester current semester: 1 -\u003e sem 1"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *                 2 -\u003e sem 2"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *                 3 -\u003e special term 1"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *                 4 -\u003e special term 2"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return JSONArray representing the venues"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Optional\u003cJSONArray\u003e getVenues(String semester) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ApiQuery query \u003d new ApiQuery(BASE_URL + SLASH + acadYear.toStringDashed() + SEMESTERS"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                + semester + VENUES + JSON_EXTENSION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        QueryResult queryResult \u003d query.execute();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (queryResult.process(logger)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            JSONArray obj \u003d ParserUtil.parseStringToJsonArray(queryResult.getResponseResult());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(obj);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns a JSONObject of detailed information of all venues."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param semester current semester: 1 -\u003e sem 1"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *                 2 -\u003e sem 2"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *                 3 -\u003e special term 1"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *                 4 -\u003e special term 2"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return JSONObject representing the venues"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Optional\u003cJSONObject\u003e getVenueInformation(String semester) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ApiQuery query \u003d new ApiQuery(BASE_URL + SLASH + acadYear.toStringDashed() + SEMESTERS"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                + semester + VENUE_INFO + JSON_EXTENSION);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        QueryResult queryResult \u003d query.execute();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (queryResult.process(logger)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONObject obj \u003d ParserUtil.parseStringToJsonObject(queryResult.getResponseResult());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(obj);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns a JSONObject of academic calendar containing semester start dates."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return JSONObject representing academic calendar."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Optional\u003cJSONObject\u003e getAcademicCalendar() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ApiQuery query \u003d new ApiQuery(ACADEMIC_CALENDAR_URL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        QueryResult queryResult \u003d query.execute();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (queryResult.process(logger)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            JSONObject obj \u003d ParserUtil.parseStringToJsonObject(queryResult.getResponseResult());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(obj);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Returns a JSONArray of dates of public holidays in Singapore, adjusted for observance,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * i.e. if the holiday falls on a weekend and is observed on next Monday, the next Monday\u0027s date is used instead."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return JSONArray representing public holidays in Singapore."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Optional\u003cJSONArray\u003e getHolidays() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ApiQuery query \u003d new ApiQuery(HOLIDAYS_URL);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        QueryResult queryResult \u003d query.execute();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (queryResult.process(logger)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONArray obj \u003d ParserUtil.parseStringToJsonArray(queryResult.getResponseResult());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.of(obj);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 99,
      "klementtan": 4,
      "Alvinnyk": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/websocket/NusModsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "package seedu.address.websocket;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.AcadYear;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.EndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Exam;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Holidays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.LessonNo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.LessonType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleSummary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.ModuleSummaryList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.SemesterNo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.StartTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Venue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.model.module.Weeks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Parse data from NusModsApi"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class NusModsParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    //TODO: checks to throw parseException if missing compulsory keys"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    //      checks to throw invalidValueException if value is invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parse a Module from JSONObject."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param obj JSONObject to parse from."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return parsed Module."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Module parseModule(JSONObject obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(obj);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        AcadYear acadYear \u003d new AcadYear(obj.getOrDefault(\"acadYear\", \"\").toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(obj.getOrDefault(\"moduleCode\", \"\").toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ModuleId moduleId \u003d new ModuleId(acadYear, moduleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Title title \u003d new Title(obj.getOrDefault(\"title\", \"\").toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Description description \u003d new Description(obj.getOrDefault(\"description\", \"\").toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        List\u003cSemester\u003e semesterData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (obj.containsKey(\"semesterData\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONArray jsonSemesterData \u003d (JSONArray) obj.get(\"semesterData\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            for (int i \u003d 0; i \u003c jsonSemesterData.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                semesterData.add(parseSemester((JSONObject) jsonSemesterData.get(i)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new Module(moduleId, title, description, semesterData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parse a ModuleSummary from JSONArray."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param arr JSONArray to parse from."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return parsed ModuleSummary."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static ModuleSummaryList parseModuleSummaryList(JSONArray arr, AcadYear defaultAcadYear) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(arr);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        List\u003cModuleSummary\u003e moduleSummaries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONObject obj \u003d (JSONObject) arr.get(i);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            AcadYear acadYear \u003d new AcadYear(obj.getOrDefault(\"acadYear\", defaultAcadYear).toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            ModuleCode moduleCode \u003d new ModuleCode(obj.getOrDefault(\"moduleCode\", \"\").toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            ModuleId moduleId \u003d new ModuleId(acadYear, moduleCode);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Title title \u003d new Title(obj.getOrDefault(\"title\", \"\").toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            List\u003cInteger\u003e semesters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (obj.containsKey(\"semesters\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                JSONArray jsonSemesters \u003d (JSONArray) obj.get(\"semesters\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                for (int j \u003d 0; j \u003c jsonSemesters.size(); j++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    semesters.add(Integer.parseInt(jsonSemesters.get(j).toString()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            moduleSummaries.add(new ModuleSummary(moduleId, title, semesters));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new ModuleSummaryList(moduleSummaries);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parse a Semester from JSONObject."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param obj JSONObject to parse from."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return parsed Semester."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Semester parseSemester(JSONObject obj) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(obj);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        SemesterNo semesterNo \u003d new SemesterNo(obj.getOrDefault(\"semester\", \"\").toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        ArrayList\u003cLesson\u003e timetable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (obj.containsKey(\"timetable\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONArray arr \u003d (JSONArray) obj.get(\"timetable\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                timetable.add(parseLesson((JSONObject) arr.get(i)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String examDate \u003d obj.getOrDefault(\"examDate\", \"\").toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String examDuration \u003d obj.getOrDefault(\"examDuration\", \"\").toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Exam exam \u003d new Exam(examDate, examDuration);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new Semester(semesterNo, timetable, exam);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parse a Lesson from JSONObject."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param obj JSONObject to parse from."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return parsed Lesson."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Lesson parseLesson(JSONObject obj) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(obj);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        LessonNo lessonNo \u003d new LessonNo(obj.getOrDefault(\"classNo\", \"\").toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        StartTime startTime \u003d new StartTime(obj.getOrDefault(\"startTime\", \"\").toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        EndTime endTime \u003d new EndTime(obj.getOrDefault(\"endTime\", \"\").toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Weeks weeks \u003d obj.containsKey(\"weeks\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                ? parseWeeks(obj.get(\"weeks\"))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                : Weeks.emptyWeeks();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        LessonType lessonType \u003d new LessonType(obj.getOrDefault(\"lessonType\", \"\").toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Day day \u003d new Day(obj.getOrDefault(\"day\", \"\").toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Venue venue \u003d new Venue(obj.getOrDefault(\"venue\", \"\").toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new Lesson(lessonNo, startTime, endTime, weeks, lessonType, day, venue);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parse Weeks from Object, assumed to be either a JSONObject or JSONArray."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param obj Object to parse from."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return parsed Weeks."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Weeks parseWeeks(Object obj) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(obj);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        List\u003cInteger\u003e weekNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String startDateString \u003d \"\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String endDateString \u003d \"\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        int weekInterval \u003d -1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        int type;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        // weekNumbers only format"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (obj.toString().startsWith(\"[\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            type \u003d 1;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONArray ja \u003d (JSONArray) obj;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            for (int i \u003d 0; i \u003c ja.size(); i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                weekNumbers.add(Integer.parseInt(ja.get(i).toString()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            assert obj.toString().startsWith(\"{\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONObject jo \u003d (JSONObject) obj;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            startDateString \u003d jo.get(\"start\").toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            endDateString \u003d jo.get(\"end\").toString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // start, end and weekNumbers format"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (jo.containsKey(\"weeks\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                type \u003d 2;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                JSONArray ja \u003d (JSONArray) jo.get(\"weeks\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                for (int i \u003d 0; i \u003c ja.size(); i++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    weekNumbers.add(Integer.parseInt(ja.get(i).toString()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            } else { // start, end and weekInterval/default format"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                type \u003d 3;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                weekInterval \u003d 1;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                if (jo.containsKey(\"weekInterval\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    weekInterval \u003d Integer.parseInt(jo.get(\"weekInterval\").toString());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new Weeks(weekNumbers, startDateString, endDateString, weekInterval, type);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parse JSONObject to AcadCalendar"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param obj JSONObject to parse from"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return parsed AcadCalendar"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static AcadCalendar parseAcadCalendar(JSONObject obj) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(obj);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Map\u003cString, String\u003e startDates \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (Object acadYearObj : obj.keySet()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            AcadYear acadYear \u003d new AcadYear(acadYearObj.toString());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            JSONObject semesterNoStartDateObj \u003d (JSONObject) obj.get(acadYearObj.toString());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            for (Object semesterNoObj : semesterNoStartDateObj.keySet()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                JSONObject startDateObj \u003d (JSONObject) semesterNoStartDateObj.get(semesterNoObj.toString());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                String acadYearSemNoString \u003d acadYearObj.toString() + \" Sem \" + semesterNoObj.toString();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                JSONArray arr \u003d (JSONArray) startDateObj.get(\"start\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                String startDate \u003d arr.get(0) + \"-\" + arr.get(1) + \"-\" + arr.get(2);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                startDates.put(acadYearSemNoString, startDate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new AcadCalendar(startDates);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Parse Holidays from a JSONArray."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param arr JSONArray to parse from."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return parsed Holidays object."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Holidays parseHolidays(JSONArray arr) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        requireNonNull(arr);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        List\u003cString\u003e holidayDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            holidayDates.add(arr.get(i).toString());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return new Holidays(holidayDates);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 234
    }
  },
  {
    "path": "src/main/java/seedu/address/websocket/util/ApiQuery.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.websocket.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javax.net.ssl.HttpsURLConnection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * An API query object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class ApiQuery {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static URL url;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private String urlString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Logger logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Generate an instance of an API query with the given url."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param url of the query"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ApiQuery(String url) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        URL generatedUrl \u003d UrlUtil.generateUrl(url);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        this.urlString \u003d url;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (generatedUrl \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            this.url \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            this.url \u003d generatedUrl;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Executes the query."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return QueryResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public QueryResult execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Integer responseCode \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (this.url \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output \u003d \"Malformed URL Exception\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new QueryResult(responseCode, output);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        HttpsURLConnection conn \u003d establishHttpsConnection(this.url);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (conn \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            output \u003d \"Unable to establish connection\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            conn.disconnect();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new QueryResult(responseCode, output);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                responseCode \u003d conn.getResponseCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (responseCode !\u003d 200) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    output \u003d \"HTTP response Error!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    conn.disconnect();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    return new QueryResult(responseCode, output);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(this.url.openStream()))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        String line;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            output +\u003d line;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            logger.fine(line);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    } catch (IOException ioe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        output \u003d \"Unable to read response\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        conn.disconnect();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        return new QueryResult(responseCode, output);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                output \u003d \"Connection error\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                conn.disconnect();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                return new QueryResult(responseCode, output);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        conn.disconnect();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return new QueryResult(responseCode, output);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Establish the HTTPS connection."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param url of the connection"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return HttpsURLConnection"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private HttpsURLConnection establishHttpsConnection(URL url) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        HttpsURLConnection conn;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            conn \u003d (HttpsURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            conn.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            conn.connect();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return conn;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            System.out.println(\"Failed to establish connection with \" + url.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 10,
      "Alvinnyk": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/websocket/util/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.websocket.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Parser Utilities"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Converts a String into a JSONObject."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param s String to be converted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return JSONObject"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static JSONObject parseStringToJsonObject(String s) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        JSONObject obj \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            obj \u003d (JSONObject) parser.parse(s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            System.out.println(\"Failed to parse JSON object\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return obj;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * Converts a String into a JSONArray."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param s String to be converted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return JSONArray"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static JSONArray parseStringToJsonArray(String s) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        JSONArray obj \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            obj \u003d (JSONArray) parser.parse(s);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            System.out.println(\"Failed to parse JSON Array\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return obj;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 17,
      "Alvinnyk": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/websocket/util/QueryResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.websocket.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Result of the Query"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class QueryResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Integer responseCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String responseResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public QueryResult(Integer responseCode, String responseResult) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.responseCode \u003d responseCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.responseResult \u003d responseResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Integer getResponseCode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.responseCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getResponseResult() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.responseResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Processes any errors and returns true if not errors are found."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean process(Logger logger) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (this.responseCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            logger.warning(this.responseResult);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (this.responseCode !\u003d 200) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            logger.warning(this.responseResult + \" response code: \" + this.responseCode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            logger.fine(this.responseResult);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/websocket/util/UrlUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.websocket.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.net.URLDecoder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Url Constructor Util"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class UrlUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private static String gmapsApiKey \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Generates a URL object from a String."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param url String to be converted"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return URL object or null if URL is malformed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static URL generateUrl(String url) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            URL query \u003d new URL(url);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return query;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * THis method is used to remove the API key from the url"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param url that contains API key"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return url without API key"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static String sanitizeApiKey(String url) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (url.contains(\"key\u003d\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            return url.split(\"key\u003d\")[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            return url;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Split query string of URL into a map of key-value pairs. It is assumed that keys are unique."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param url URL to split."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return a map of {@code String} key and {@code String} value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static Map\u003cString, String\u003e splitQuery(URL url) throws UnsupportedEncodingException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (StringUtil.isNullOrEmpty(url.getQuery())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return Collections.emptyMap();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Map\u003cString, String\u003e queryMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String query \u003d url.getQuery();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String[] querySplits \u003d query.split(\"\u0026\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        for (String part : querySplits) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int equalsIndex \u003d part.indexOf(\"\u003d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String key \u003d equalsIndex \u003e 0 ? URLDecoder.decode(part.substring(0, equalsIndex), \"UTF-8\") : part;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String value \u003d equalsIndex \u003e 0 \u0026\u0026 part.length() \u003e equalsIndex + 1"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    ? URLDecoder.decode(part.substring(equalsIndex + 1), \"UTF-8\") : null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            queryMap.put(key, value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return queryMap;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This is a utility function to get the full API endpoint for Gmaps Distance Matrix Api from 2 arraylist of string"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationsRow"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationsColumn"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static String generateGmapsDistanceMatrixUrl("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            ArrayList\u003cString\u003e locationsRow, ArrayList\u003cString\u003e locationsColumn) throws InvalidParameterException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        if (locationsColumn.size() \u003e 10 || locationsRow.size() \u003e 10) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            throw new InvalidParameterException(\"GMAPS API Only can make request to 10 locations.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String baseUrl \u003d \"https://maps.googleapis.com/maps/api/distancematrix/json?units\u003dimperial\u0026\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String apiKeyQueryParams \u003d \"key\u003d\" + gmapsApiKey;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String originQueryParams \u003d \"origins\u003d\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String destinationQueryParams \u003d \"destinations\u003d\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        for (int i \u003d 0; i \u003c locationsRow.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            originQueryParams \u003d originQueryParams + locationsRow.get(i) + \"|\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        for (int i \u003d 0; i \u003c locationsColumn.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            destinationQueryParams \u003d destinationQueryParams + locationsColumn.get(i) + \"|\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        originQueryParams \u003d originQueryParams + \"\u0026\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        destinationQueryParams \u003d destinationQueryParams + \"\u0026\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String fullUrl \u003d baseUrl + originQueryParams + destinationQueryParams + apiKeyQueryParams;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return fullUrl;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * This is a utility function to get the full API endpoint for Gmaps places Api from a string"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @param locationName"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "klementtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public static String generateGmapsPlacesUrl(String locationName) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String baseUrl \u003d \"https://maps.googleapis.com/maps/api/place/findplacefromtext/json?location\u003d.sg\u0026\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"inputtype\u003dtextquery\u0026fields\u003dname,place_id\u0026\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String apiKeyQueryParams \u003d \"key\u003d\" + gmapsApiKey + \"\u0026\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String queryParams \u003d \"input\u003d\" + locationName + \"\u0026\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String fullUrl \u003d baseUrl + queryParams + apiKeyQueryParams;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return fullUrl;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 31,
      "klementtan": 58,
      "Alvinnyk": 25
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 0%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    background-color: #393E46; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ".tab-pane .tab  {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-pref-height: 50;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-pref-width: 153;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-width: 4;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-faint-focus-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-width: 4;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-style: hidden hidden solid hidden;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: #FFFFFF;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ".tab-pane .tab-label {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-pref-width: 140;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ".tab-pane *.tab-header-background {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-effect: innershadow(two-pass-box , rgba(0,0,0,0.6) , 4, 0.0 , 0 , 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-base: #222831;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-control-inner-background: #222831;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: #222831;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 0%);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 0%);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 10%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: derive(#222831, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ".cell_extra_big_label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-font-size: 19px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     -fx-background-color: derive(#222831, 0%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     -fx-background-color: derive(#222831, 0%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "     -fx-border-color: derive(#222831, 0%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 10%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    -fx-font-family: \"Courier New\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 10%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: derive(#222831, 5%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 10%);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: derive(#222831, 10%);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 10%);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 30%);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 0%);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: transparent transparent #393E46 transparent;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: #222831;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "  -fx-text-fill: #222831;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: #222831;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: #222831;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: #222831;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 5%);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 0%);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 30%);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#colouredTimeslot {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-effect: dropshadow(gaussian, #222831, 2, 0.0, 3, 3);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-opacity: 0.85;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: transparent #393E46 transparent #393E46;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: #393E46 #393E46 #ffffff #393E46;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    -fx-font-family: \"Courier New\";"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#dayLabelContainer {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: #222831;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#dayLabelContainer #dayDate {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-opacity: 0.6;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#defaultStartViewContainer {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: #393E46;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#freeTimeslot{"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-radius: 0 !important;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-width: 0 !important;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-radius: 0 !important;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: rgba(152,251,152, 0.5) !important;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#groupDetailCard, #detailCard, #listHeaderContainer, #listMemberContainer {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background: #222831;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: #222831;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#groupDetailCard .label {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#listHeaders .label {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-opacity: 0.67;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#memberCard {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 20%);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-radius: 5;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-pref-height: 50;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-effect: dropshadow(gaussian, black, 2, 0.0, 3, 3);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#memberCard #memberName {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#memberCard #memberEmail, #memberRole {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#personDetailContainer .label {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#profileContainer {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: #393E46;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-radius: 5;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: transparent, #393E46, transparent, #393E46;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#timeslotLabelContainer {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: #222831;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: #222831;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#timeslotMajorLine {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: derive(#393E46, 20%);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-style: solid none none solid"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#timeslotMinorLine {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: derive(#393E46, 20%);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-style: dotted none none dotted"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#scheduleContainer {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-border-color: derive(#222831, 20%);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#scheduleContainer #title {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: derive(#222831, 20%);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-opacity: 1 !important;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#scheduleContainer .label {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#scheduleContents {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background: #393E46;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: #393E46;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#scheduleContents:hover {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-vbar-policy: as_needed;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "#scheduleHeaderWrapper {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background: #393E46;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background-color: #222831;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "#suggestions-list {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "#suggestions-list .list-cell {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "#suggestions-list .list-cell:empty {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    visibility: hidden;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 2,
      "YiJiee": 194,
      "-": 315,
      "aidilfbk": 10
    }
  },
  {
    "path": "src/main/resources/view/DefaultStartView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "           prefHeight\u003d\"500.0\" prefWidth\u003d\"1000.0\" fx:id\u003d\"defaultStartViewContainer\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cImageView fx:id\u003d\"logoView\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 14
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    -fx-background: #393E46;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/GroupDetailCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cScrollPane xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" hbarPolicy\u003d\"NEVER\" vbarPolicy\u003d\"NEVER\" fx:id\u003d\"groupDetailCard\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cVBox fx:id\u003d\"groupDetailContainer\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cVBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cLabel text\u003d\"Group Name: \" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cLabel fx:id\u003d\"groupName\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cVBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cLabel text\u003d\"Group Description: \" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cLabel fx:id\u003d\"groupDescription\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cVBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cLabel text\u003d\"Group Remark: \" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cLabel fx:id\u003d\"groupRemark\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 35
    }
  },
  {
    "path": "src/main/resources/view/GroupDetailsExport.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cStackPane fx:id\u003d\"groupDetailContainer\" id\u003d\"groupDetailContainer\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cVBox fx:id\u003d\"groupDetailsView\" id\u003d\"groupDetailsView\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cGridPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u003cColumnConstraints percentWidth\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u003cColumnConstraints percentWidth\u003d\"70\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"groupDetailCard\" GridPane.columnIndex\u003d\"0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                           GridPane.rowIndex\u003d\"0\" maxWidth\u003d\"270\" prefHeight\u003d\"200\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"groupMembersList\" GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                           GridPane.rowIndex\u003d\"0\" maxWidth\u003d\"630\" prefHeight\u003d\"200\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cStackPane fx:id\u003d\"groupSchedule\" maxWidth\u003d\"900\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 25
    }
  },
  {
    "path": "src/main/resources/view/GroupInformation.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cGridPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"70\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cStackPane fx:id\u003d\"groupDetails\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cStackPane fx:id\u003d\"groupMembers\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 20
    }
  },
  {
    "path": "src/main/resources/view/GroupListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cHBox id\u003d\"groupCardPane\" fx:id\u003d\"groupCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"85\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cHBox spacing\u003d\"15\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cStackPane fx:id\u003d\"groupId\" id\u003d\"groupId\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cLabel fx:id\u003d\"groupName\" styleClass\u003d\"cell_big_label\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 26
    }
  },
  {
    "path": "src/main/resources/view/GroupListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cListView fx:id\u003d\"groupListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 11
    }
  },
  {
    "path": "src/main/resources/view/LocationDetails.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cGridPane xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "          prefWidth\u003d\"700\" prefHeight\u003d\"500\" fx:id\u003d\"locationDetailsContainer\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cColumnConstraints percentWidth\u003d\"72\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cColumnConstraints percentWidth\u003d\"28\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cImageView fx:id\u003d\"locationMap\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cVBox GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" prefHeight\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cLabel fx:id\u003d\"locationName\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cLabel fx:id\u003d\"timeslot\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cLabel fx:id\u003d\"approxTravelTime\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"500\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cImage url\u003d\"@/images/timebook_logo.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cGridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "          \u003cStackPane fx:id\u003d\"sideBarPlaceholder\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                       GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" GridPane.columnSpan\u003d\"1\" GridPane.rowSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "          \u003cStackPane fx:id\u003d\"detailsViewPlaceholder\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                      GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" GridPane.columnSpan\u003d\"3\" GridPane.rowSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                   minHeight\u003d\"75\" prefHeight\u003d\"75\" maxHeight\u003d\"75\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 18,
      "-": 48
    }
  },
  {
    "path": "src/main/resources/view/MemberCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cGridPane fx:id\u003d\"memberCard\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"2.5\"\u003e\u003c/ColumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"25\"\u003e\u003c/ColumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"35\"\u003e\u003c/ColumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"37.5\"\u003e\u003c/ColumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cRegion fx:id\u003d\"colorRegion\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" GridPane.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cStackPane GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" GridPane.vgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cInsets top\u003d\"0\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cLabel fx:id\u003d\"memberName\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cStackPane GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"0\" GridPane.vgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cInsets top\u003d\"0\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cLabel fx:id\u003d\"memberEmail\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cStackPane GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"0\" GridPane.vgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cInsets top\u003d\"0\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cLabel fx:id\u003d\"memberRole\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 36
    }
  },
  {
    "path": "src/main/resources/view/MemberList.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "      prefHeight\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"listHeaderContainer\" prefWidth\u003d\"600\" vbarPolicy\u003d\"NEVER\" hbarPolicy\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cGridPane id\u003d\"listHeaders\" fx:id\u003d\"listHeaders\" prefWidth\u003d\"600\" prefHeight\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cColumnConstraints percentWidth\u003d\"25\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cColumnConstraints percentWidth\u003d\"40\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cColumnConstraints percentWidth\u003d\"35\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cLabel text\u003d\"Name\" GridPane.columnIndex\u003d\"0\" GridPane.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cLabel text\u003d\"Email\" GridPane.columnIndex\u003d\"1\" GridPane.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cLabel text\u003d\"Role\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"listMemberContainer\" minHeight\u003d\"150\" prefWidth\u003d\"600\" vbarPolicy\u003d\"NEVER\" hbarPolicy\u003d\"NEVER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cVBox fx:id\u003d\"listMembers\" prefWidth\u003d\"600\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 33
    }
  },
  {
    "path": "src/main/resources/view/PersonDetailCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cHBox id\u003d\"personDetailContainer\" fx:id\u003d\"personDetailContainer\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cStackPane fx:id\u003d\"profileContainer\" alignment\u003d\"CENTER\" maxWidth\u003d\"150\" prefHeight\u003d\"120\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cImageView fx:id\u003d\"userProfile\" fitWidth\u003d\"120\" fitHeight\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_extra_big_label\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cHBox spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cImageView fitHeight\u003d\"50\" fitWidth\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u003cImage url\u003d\"@/images/phone_icon.png\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" alignment\u003d\"CENTER\" prefHeight\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cHBox spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cImageView fitHeight\u003d\"50\" fitWidth\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u003cImage url\u003d\"@/images/address_icon.png\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" alignment\u003d\"CENTER\" prefHeight\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cHBox spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cImageView fitHeight\u003d\"50\" fitWidth\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u003cImage url\u003d\"@/images/email_icon.png\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" alignment\u003d\"CENTER\" prefHeight\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cHBox spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cImageView fitHeight\u003d\"50\" fitWidth\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    \u003cImage url\u003d\"@/images/remark_icon.png\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" alignment\u003d\"CENTER\" prefHeight\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 55
    }
  },
  {
    "path": "src/main/resources/view/PersonDetailsView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cStackPane fx:id\u003d\"personDetailContainer\" id\u003d\"personDetailContainer\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cVBox fx:id\u003d\"personDetailsView\" id\u003d\"personDetailsView\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personSchedule\" prefWidth\u003d\"1800\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 15
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"85\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "      \u003cHBox spacing\u003d\"15\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cStackPane id\u003d\"personId\" fx:id\u003d\"personId\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/resources/view/ScheduleExport.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cGridPane fx:id\u003d\"scheduleViewExport\" id\u003d\"scheduleViewExport\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 11
    }
  },
  {
    "path": "src/main/resources/view/ScheduleView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cHBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cVBox fx:id\u003d\"scheduleContainer\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "          HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" HBox.hgrow\u003d\"ALWAYS\" prefWidth\u003d\"1100\" alignment\u003d\"CENTER\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scheduleHeaderWrapper\" fitToWidth\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scheduleContents\" id\u003d\"scheduleContents\" fitToWidth\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 15
    }
  },
  {
    "path": "src/main/resources/view/TabPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003cTabPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cTab fx:id\u003d\"personsTab\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003cTab fx:id\u003d\"groupsTab\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "\u003c/TabPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/timebook_logo.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNotEmpty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Asserts that {@link CollectionUtil#requireAllNotEmpty} throw {@link IllegalArgumentException}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * if the {@code collection} is empty."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void assertIllegalArgumentExceptionThrown(Collection\u003c?\u003e... collections) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e requireAllNotEmpty(collections));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void assertIllegalArgumentExceptionNotThrown(Collection\u003c?\u003e... collections) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        requireAllNotEmpty(collections);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void requireAllNotEmptyCollection() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // null parameter"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            CollectionUtil.requireAllNotEmpty((Collection\u003c?\u003e) null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertIllegalArgumentExceptionThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // list with elements"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertIllegalArgumentExceptionNotThrown(List.of(new Object()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // empty list and list with elements"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertIllegalArgumentExceptionThrown(Collections.emptyList(), List.of(new Object()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 108,
      "aidilfbk": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    //---------------- Tests for substringBefore --------------------------------------"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void substringBefore_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            StringUtil.substringBefore(null, null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            StringUtil.substringBefore(\"my string\", null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            StringUtil.substringBefore(null, \"my delimiter\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void substringBefore_delimiterPresent_substring() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String inputString \u003d \"hello world\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String delimiter \u003d \" \";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedSubstring \u003d \"hello\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String actualSubstring \u003d StringUtil.substringBefore(inputString, delimiter);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertEquals(expectedSubstring, actualSubstring);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void substringBefore_multipleDelimitersPresent_firstSubstring() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String inputString \u003d \"first second third\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String delimiter \u003d \" \";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedSubstring \u003d \"first\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String actualSubstring \u003d StringUtil.substringBefore(inputString, delimiter);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertEquals(expectedSubstring, actualSubstring);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void substringBefore_multiCharacterDelimiter_substring() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String inputString \u003d \"hello\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String delimiter \u003d \"ll\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedSubstring \u003d \"he\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String actualSubstring \u003d StringUtil.substringBefore(inputString, delimiter);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertEquals(expectedSubstring, actualSubstring);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void substringBefore_delimiterAtStart_emptySubstring() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String inputString \u003d \" hello\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String delimiter \u003d \" \";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedSubstring \u003d \"\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String actualSubstring \u003d StringUtil.substringBefore(inputString, delimiter);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertEquals(expectedSubstring, actualSubstring);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void substringBefore_emptyString_emptySubstring() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String inputString \u003d \"\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String delimiter \u003d \" \";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedSubstring \u003d \"\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String actualSubstring \u003d StringUtil.substringBefore(inputString, delimiter);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertEquals(expectedSubstring, actualSubstring);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void substringBefore_delimiterAbsent_originalString() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String inputString \u003d \"hello\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String delimiter \u003d \" \";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedSubstring \u003d inputString;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String actualSubstring \u003d StringUtil.substringBefore(inputString, delimiter);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertEquals(expectedSubstring, actualSubstring);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "aidilfbk": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/VenueUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.module.Venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class VenueUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void venueListToString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Venue venue1 \u003d new Venue(\"Foo\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Venue venue2 \u003d new Venue(\"Bar\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cVenue\u003e venues \u003d new ArrayList\u003c\u003e(Arrays.asList(venue1, venue2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e stringArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"Foo\", \"Bar\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(VenueUtil.venueListToString(venues), stringArrayList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.TimeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.storage.JsonTimeBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.testutil.personutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        JsonTimeBookStorage timeBookStorage \u003d new JsonTimeBookStorage(temporaryFolder.resolve(\"timebook.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, timeBookStorage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        TimeBook temporaryTimeBook \u003d new TimeBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        temporaryTimeBook.addPerson(new PersonBuilder().withName(\"Alice\").build());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        model \u003d new ModelManager(temporaryTimeBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String addCommand \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        System.out.println(logic.getFilteredPersonList().get(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 1,
      "Alvinnyk": 9,
      "YiJiee": 7,
      "-": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ZACK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.scheduleutil.TypicalEvents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class AddEventCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_allNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddEventCommand(null, null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddEventCommand(null, TypicalEvents.generateTypicalEvent1()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event \u003d TypicalEvents.generateTypicalEvent1();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddEventCommand(ALICE.getName(), event).execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(AddEventCommand.MESSAGE_SUCCESS + event.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(expectedCommandResult.equals(actualCommandResult));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_failure() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event \u003d TypicalEvents.generateTypicalEvent1();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddEventCommand(ZACK.getName(), event).execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(AddEventCommand.MESSAGE_FAILURE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        + AddEventCommand.MESSAGE_FAILURE_UNABLE_TO_FIND_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(expectedCommandResult.equals(actualCommandResult));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddGroupCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUP0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUP1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class AddGroupCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddGroupCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d new AddGroupCommand(GROUP0).execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d model.findGroup(GROUPNAME0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(group);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(AddGroupCommand.MESSAGE_SUCCESS + group.details());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(expectedCommandResult.equals(actualCommandResult));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_duplicateGroup() throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d new AddGroupCommand(GROUP1).execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(AddGroupCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(expectedCommandResult.equals(actualCommandResult));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddPersonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ZACK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class AddPersonCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPersonCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_personAcceptedByModel() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d new AddPersonCommand(ZACK).execute(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d model.findPerson(ZACK.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(person);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(AddPersonCommand.MESSAGE_SUCCESS + person.details());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(expectedCommandResult.equals(actualCommandResult));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_duplicatedPerson() throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d new AddPersonCommand(ALICE).execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                AddPersonCommand.MESSAGE_FAILURE + AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(expectedCommandResult.equals(actualCommandResult));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        AddPersonCommand addBobCommand \u003d new AddPersonCommand(BENSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 44,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddToGroupCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.DANIEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMapping;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.Role;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class AddToGroupCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d model.findPerson(DANIEL.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d model.findGroup(GROUPNAME1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonToGroupMapping map \u003d new PersonToGroupMapping(person.getPersonId(), group.getGroupId());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddToGroupCommand(person.getName(), group.getGroupName(), Role.emptyRole()).execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(AddToGroupCommand.MESSAGE_SUCCESS + map.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private void assertTrue(boolean equals) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_nullPerson() throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddToGroupCommand(null, GROUPNAME1, Role.emptyRole()).execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(AddToGroupCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_nullGroup() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddToGroupCommand(ALICE.getName(), null, Role.emptyRole()).execute(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(AddToGroupCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_allNull() throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddToGroupCommand(null, null, Role.emptyRole()).execute(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(AddToGroupCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_duplicate() throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddToGroupCommand(ALICE.getName(), GROUPNAME1, Role.emptyRole()).execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(AddToGroupCommand.MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClosestLocationCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class ClosestLocationCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ArrayList\u003cString\u003e locationNameList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        locationNameList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"LT17\", \"LT17\", \"LT17\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void execute() throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ClosestLocationCommand closestLocationCommand \u003d new ClosestLocationCommand(locationNameList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String expectedResult \u003d \"Closest location found: First closest location: LT17 | Average travelling time 0\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"Second closest location: LT19 | Average travelling time 4\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"Third closest location: AS4 | Average travelling time 70\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \" location you entered: LT17 LT17 LT17 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(expectedResult, closestLocationCommand.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ClosestLocationCommand closestLocationCommand \u003d new ClosestLocationCommand(locationNameList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(closestLocationCommand, closestLocationCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.personutil.PersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_REMARK \u003d \"Enjoys programming\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMPTY_REMARK \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        DESC_AMY \u003d new PersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        DESC_BOB \u003d new PersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getObservablePersonList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getObservablePersonList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getObservablePersonList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d model.getObservablePersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(1, model.getObservablePersonList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 11,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteGroupCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME0;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class DeleteGroupCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteGroupCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new DeleteGroupCommand(GROUPNAME1).execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(DeleteGroupCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_failure() throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new DeleteGroupCommand(GROUPNAME0).execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(DeleteGroupCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeletePersonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ZACK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class DeletePersonCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeletePersonCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new DeletePersonCommand(ALICE.getName()).execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(DeletePersonCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_failure() throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new DeletePersonCommand(ZACK.getName()).execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(DeletePersonCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditGroupCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUP0;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUP1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class EditGroupCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_allNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditGroupCommand(null, null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_nullGroupName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditGroupCommand(null, GROUP1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_nullGroupDescription_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditGroupCommand(GROUPNAME1, null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d model.findGroup(GROUPNAME1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new EditGroupCommand(GROUPNAME1, GROUP0).execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(EditGroupCommand.MESSAGE_SUCCESS + group.details());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_descriptorNotEdited() throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new EditGroupCommand(GROUPNAME1, new GroupDescriptor()).execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(EditGroupCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_groupDoesNotExist() throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new EditGroupCommand(GROUPNAME0, GROUP1).execute(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(EditGroupCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ZACK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class EditPersonCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_allNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditPersonCommand(null, null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditPersonCommand(null, ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_nullDescription_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditPersonCommand(ALICE.getName(), null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d model.findPerson(ALICE.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new EditPersonCommand(ALICE.getName(), ZACK).execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(EditPersonCommand.MESSAGE_SUCCESS + person.details());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_descriptorNotEdited() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new EditPersonCommand(ALICE.getName(), new PersonDescriptor()).execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(EditPersonCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_personDoesNotExist() throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new EditPersonCommand(ZACK.getName(), ALICE).execute(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(EditPersonCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Person alice \u003d new Person(ALICE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private Person benson \u003d new Person(BENSON);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ExportCommand\u003cName\u003e exportCommandAlice \u003d new ExportCommand\u003cName\u003e(alice.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ExportCommand\u003cName\u003e exportCommandBenson \u003d new ExportCommand\u003cName\u003e(benson.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Same person."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ExportCommand\u003cName\u003e exportCommandAlice2 \u003d new ExportCommand\u003cName\u003e(alice.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertEquals(exportCommandAlice, exportCommandAlice2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Different person."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertNotEquals(exportCommandAlice, exportCommandBenson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void constructor_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExportCommand\u003cName\u003e(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void exportSuccess() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            CommandResult actualMessage \u003d (new ExportCommand\u003cName\u003e(alice.getName())).execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            CommandResult expectedMessage \u003d new CommandResult(String.format(ExportCommand.MESSAGE_SUCCESS, alice),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                    false, false, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void exportFailure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //Person not found in the person list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ExportCommand\u003cName\u003e(new Name(\"Abedagge\")).execute(model));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindGroupCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class FindGroupCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_nullGroupName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FindGroupCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new FindGroupCommand(GROUPNAME1).execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(actualCommandResult);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_failure() throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new FindGroupCommand(GROUPNAME0).execute(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(FindGroupCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindPersonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ZACK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class FindPersonCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void constructor_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FindPersonCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new FindPersonCommand(ALICE.getName()).execute(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(actualCommandResult);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_failure() throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult actualCommandResult \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new FindPersonCommand(ZACK.getName()).execute(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new CommandResult(FindPersonCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(actualCommandResult.equals(expectedCommandResult));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.modelutil.TypicalModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        model \u003d TypicalModel.generateTypicalModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(new ListCommand().execute(model));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 7,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.testutil.personutil.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ShowCommand\u003cName\u003e showAliceCommand \u003d new ShowCommand\u003cName\u003e(alice.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ShowCommand\u003cName\u003e showBobCommand \u003d new ShowCommand\u003cName\u003e(bob.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //same object -\u003e true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertTrue(showAliceCommand.equals(showAliceCommand));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //same values -\u003e true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        ShowCommand\u003cName\u003e showAliceDuplicateCommand \u003d new ShowCommand\u003cName\u003e(alice.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertTrue(showAliceCommand.equals(showAliceDuplicateCommand));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //different show commands -\u003e false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertFalse(showAliceCommand.equals(showBobCommand));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //null -\u003e false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertFalse(showAliceCommand.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        //different types -\u003e false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertFalse(showAliceCommand.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/internal/gmaps/ClosestLocationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.TimeBookInvalidState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.LocationGraph;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class ClosestLocationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ClosestLocation closestLocation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void init() throws ConnectException, TimeBookInvalidState {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ProcessVenues processVenues;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        processVenues \u003d new ProcessVenues().process();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cLocation\u003e locations \u003d processVenues.getLocations();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e validLocationList \u003d processVenues.getValidLocationList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        LocationGraph locationGraph \u003d new LocationGraph(locations, validLocationList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        new ProcessLocationGraph(locationGraph).process();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        closestLocation \u003d new ClosestLocation(locationGraph);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void closestLocationData() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e locationNameList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"LT17\", \"LT17\", \"LT17\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Hashtable\u003cString, Object\u003e result \u003d closestLocation.closestLocationData(locationNameList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals((String) result.get(ClosestLocationSyntax.FIRST_CLOSEST), \"LT17\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals((long) result.get(ClosestLocationSyntax.FIRST_CLOSEST_AVG_TIME), (long) 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void closestLocation() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e locationNameList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"LT17\", \"LT17\", \"LT17\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String result \u003d closestLocation.closestLocationDataString(locationNameList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String expectedResult \u003d \"First closest location: LT17 | Average travelling time 0\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"Second closest location: LT19 | Average travelling time 4\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"Third closest location: AS4 | Average travelling time 70\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(expectedResult, result);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/internal/gmaps/GmapsJsonUtilsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class GmapsJsonUtilsTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private JSONObject apiResponse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            apiResponse \u003d (JSONObject) parser.parse("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    new FileReader(\"src/test/data/ApiStubsTest/GmapsDistanceMatrix3x3SuccessStubTest.json\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getArrayListMatrix() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cLong\u003e row1 \u003d new ArrayList\u003cLong\u003e(Arrays.asList((long) 0, (long) 395, (long) 455));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cLong\u003e row2 \u003d new ArrayList\u003cLong\u003e(Arrays.asList((long) 187, (long) 0, (long) 98));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cLong\u003e row3 \u003d new ArrayList\u003cLong\u003e(Arrays.asList((long) 526, (long) 181, (long) 0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cArrayList\u003cLong\u003e\u003e expectedResult \u003d new ArrayList\u003cArrayList\u003cLong\u003e\u003e(Arrays.asList(row1, row2, row3));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(GmapsJsonUtils.getArrayListMatrix(apiResponse), expectedResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getStatus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(GmapsJsonUtils.getStatus(apiResponse), \"OK\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "klementtan": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/internal/gmaps/LocationArrayListUtilsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class LocationArrayListUtilsTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ArrayList\u003cLocation\u003e locationArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Location location1 \u003d new Location(\"Foo\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Location location2 \u003d new Location(\"Bar\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Location location3 \u003d new Location(\"FooBarLT\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        locationArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(location1, location2, location3));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(LocationArrayListUtils.getIndex(locationArrayList, \"Foo\"), 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(LocationArrayListUtils.getIndex(locationArrayList, \"Bar\"), 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(LocationArrayListUtils.getIndex(locationArrayList, \"FooBarLT\"), 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getIndexExceptionFlow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(LocationArrayListUtils.getIndex(locationArrayList, \"BarFooBarFoo\"), -1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/internal/gmaps/ProcessLocationGraphTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.TimeBookInvalidState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.LocationGraph;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class ProcessLocationGraphTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ProcessLocationGraph processLocationGraph;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private LocationGraph locationGraph;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void init() throws ConnectException, TimeBookInvalidState {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ProcessVenues processVenues \u003d new ProcessVenues().process();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        locationGraph \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                new LocationGraph(processVenues.getLocations(), processVenues.getValidLocationList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        processLocationGraph \u003d new ProcessLocationGraph(locationGraph);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void populateMatrix() throws TimeBookInvalidState, ConnectException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        processLocationGraph.process();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cArrayList\u003cLong\u003e\u003e distanceMatrix \u003d locationGraph.getDistanceMatrix();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                for (int i \u003d 0; i \u003c distanceMatrix.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    if (distanceMatrix.get(i).get(i) !\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                        System.out.println(distanceMatrix.get(i).get(i));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                        throw new IllegalValueException(\"Venue i to venue i take 0 time\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/internal/gmaps/ProcessVenuesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.TimeBookInvalidState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.Location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class ProcessVenuesTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ProcessVenues processVenues;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        processVenues \u003d new ProcessVenues();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getLocations() throws ConnectException, TimeBookInvalidState {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertThrows(TimeBookInvalidState.class, () -\u003e processVenues.getLocations());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ProcessVenues newProcessVenues \u003d processVenues.process();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Location lt17 \u003d new Location(\"LT17\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        lt17.setValidLocation(\"NUS_LT17\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertTrue(newProcessVenues.getLocations().contains(lt17));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void process() throws ConnectException, TimeBookInvalidState {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ProcessVenues newProcessVenues \u003d processVenues.process();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertNotNull(newProcessVenues.getLocations());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertNotNull(newProcessVenues.getValidLocationList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getValidLocationList() throws ConnectException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(processVenues.getValidLocationList(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ProcessVenues newProcessVenues \u003d processVenues.process();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertTrue(newProcessVenues.getValidLocationList().contains(\"NUS_LT17\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/internal/gmaps/SanitizeLocationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.logic.internal.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.TimeBookInvalidLocation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class SanitizeLocationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private SanitizeLocation sanitizeLocation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        sanitizeLocation \u003d new SanitizeLocation();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getValidLocationList() throws TimeBookInvalidLocation, ConnectException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            sanitizeLocation.sanitize(\"LT17\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            sanitizeLocation.sanitize(\"AS5-1234556\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            sanitizeLocation.sanitize(\"blah\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (TimeBookInvalidLocation e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e expectedValidLocationList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                new ArrayList\u003cString\u003e(Arrays.asList(\"NUS_LT17\", \"NUS_AS5\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(expectedValidLocationList, sanitizeLocation.getValidLocationList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void sanitize() throws TimeBookInvalidLocation {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(sanitizeLocation.sanitize(\"LT17\"), \"NUS_LT17\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(sanitizeLocation.sanitize(\"AS5-1234556\"), \"NUS_AS5\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertThrows(TimeBookInvalidLocation.class, () -\u003e sanitizeLocation.sanitize(\"jcdhsajkfebadbs\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENTNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalEvents.EVENTNAME1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.ENDTIMETEXT1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.STARTTIMETEXT1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.VENUE1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.scheduleutil.TypicalEvents;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private AddEventCommandParser parser \u003d new AddEventCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_NAME + ALICE.getName().toString() + WHITESPACE + PREFIX_EVENTNAME + EVENTNAME1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        + WHITESPACE + PREFIX_TIMING + STARTTIMETEXT1 + ENDTIMETEXT1 + VENUE1,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddEventCommand(ALICE.getName(), TypicalEvents.generateTypicalEvent1()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddGroupCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUP1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPREMARK1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class AddGroupCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private AddGroupCommandParser parser \u003d new AddGroupCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_GROUPNAME + GROUPNAME1.toString()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        + WHITESPACE + PREFIX_REMARK + GROUPREMARK1.toString(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddGroupCommand(GROUP1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddPersonCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class AddPersonCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private AddPersonCommandParser parser \u003d new AddPersonCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_NAME + ALICE.getName().toString()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        + WHITESPACE + PREFIX_PHONE + ALICE.getPhone().toString()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        + WHITESPACE + PREFIX_ADDRESS + ALICE.getAddress().toString()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        + WHITESPACE + PREFIX_EMAIL + ALICE.getEmail().toString()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        + WHITESPACE + PREFIX_REMARK + ALICE.getRemark().toString()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        + WHITESPACE + PREFIX_TAG + \"friends\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddPersonCommand(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddToGroupCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.AddToGroupCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.Role;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class AddToGroupCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private AddToGroupCommandParser parser \u003d new AddToGroupCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_NAME + ALICE.getName().toString()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        + WHITESPACE + PREFIX_GROUPNAME + GROUPNAME1.toString(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddToGroupCommand(ALICE.getName(), GROUPNAME1, Role.emptyRole()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_NAME + BENSON.getName().toString()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        + WHITESPACE + PREFIX_GROUPNAME + GROUPNAME2.toString(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new AddToGroupCommand(BENSON.getName(), GROUPNAME2, Role.emptyRole()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_allNull() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_nullName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_GROUPNAME + GROUPNAME1.toString(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_nullGroupName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_NAME + ALICE.getName().toString(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(new AddPersonCommand(person), command);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new PersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        EditPersonCommand command \u003d (EditPersonCommand) parser.parseCommand(EditPersonCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(new EditPersonCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 7,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#readJson(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            System.out.println(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            assertTrue(expectedCommand.equals(command));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 3,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteGroupCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class DeleteGroupCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private DeleteGroupCommandParser parser \u003d new DeleteGroupCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_GROUPNAME + GROUPNAME1.toString(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new DeleteGroupCommand(GROUPNAME1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_GROUPNAME + GROUPNAME2.toString(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new DeleteGroupCommand(GROUPNAME2));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeletePersonCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class DeletePersonCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private DeletePersonCommandParser parser \u003d new DeletePersonCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_NAME + WHITESPACE + ALICE.getName().toString(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new DeletePersonCommand(ALICE.getName()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_NAME + BENSON.getName().toString(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new DeletePersonCommand(BENSON.getName()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditGroupCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class EditGroupCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private EditGroupCommandParser parser \u003d new EditGroupCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        /*assertParseSuccess(parser,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_EDIT + GROUPNAME1.toString(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new EditGroupCommand(GROUPNAME1, new GroupDescriptor()));*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditPersonCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class EditPersonCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private EditPersonCommandParser parser \u003d new EditPersonCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        /*assertParseSuccess(parser,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_EDIT + ALICE.getName().toString(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new EditPersonCommand(ALICE.getName(), new PersonDescriptor()));*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void parseSuccess() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + PREFIX_NAME + ALICE.getName().toString(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                new ExportCommand(new Name(ALICE.getName().toString())));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void parseFailure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertParseFailure(parser, WHITESPACE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "                ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindGroupCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUPNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.FindGroupCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class FindGroupCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private FindGroupCommandParser parser \u003d new FindGroupCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_GROUPNAME + WHITESPACE + GROUPNAME1.toString(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new FindGroupCommand(GROUPNAME1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_GROUPNAME + GROUPNAME2.toString(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new FindGroupCommand(GROUPNAME2));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindPersonCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.FindPersonCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class FindPersonCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private FindPersonCommandParser parser \u003d new FindPersonCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                 WHITESPACE + PREFIX_NAME + WHITESPACE + ALICE.getName().toString(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new FindPersonCommand(ALICE.getName()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE + PREFIX_NAME + BENSON.getName().toString(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new FindPersonCommand(BENSON.getName()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void parse_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                WHITESPACE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ShowCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.testutil.personutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "public class ShowCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    private ShowCommandParser parser \u003d new ShowCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY, new ShowCommand\u003cName\u003e(expectedPerson.getName()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YiJiee": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SuggestingCommandUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class SuggestingCommandUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_exactMatch_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"mdm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String passingMatch \u003d sequence;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(predicate.test(passingMatch));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_oneCharacterBetweenNoTrailing_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"mdm\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String passingMatch \u003d \"madam\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(predicate.test(passingMatch));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_trailingCharacter_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"mdm\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String passingMatch \u003d sequence + \"a\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(predicate.test(passingMatch));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_oneCharacterBetweenWithTrailing_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"mdm\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String passingMatch \u003d \"madame\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(predicate.test(passingMatch));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_manyCharactersBetweenNoTrailing_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"mdm\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String passingMatch \u003d \"medium\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(predicate.test(passingMatch));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_manyCharactersBetweenWithTrailing_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"mdm\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String passingMatch \u003d \"madman\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(predicate.test(passingMatch));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_matchUnicodeSurrogatePair_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"😁😁\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String passingMatch \u003d \"😁smile😁\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(predicate.test(passingMatch));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_trailingNonLatinCharacters_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"mdm\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String passingMatch \u003d \"mdm你好\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(predicate.test(passingMatch));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_incompleteMatch_fail() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"mdm\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String failingMatch \u003d \"md\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(predicate.test(failingMatch));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_leadingCharacter_fail() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"mdm\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String failingMatch \u003d \"a\" + sequence;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(predicate.test(failingMatch));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_spaceInBetween_fail() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"mdm\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String failingMatch \u003d \"m dm\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(predicate.test(failingMatch));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createFuzzyMatcher_trailingSpace_fail() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String sequence \u003d \"mdm\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String passingMatch \u003d sequence + \" \";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Predicate\u003cString\u003e predicate \u003d SuggestingCommandUtil.createFuzzyMatcher(sequence);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(predicate.test(passingMatch));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YiJiee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 4,
      "YiJiee": 6,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/GmapsModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.internal.gmaps.ClosestLocationSyntax;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class GmapsModelManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private GmapsModelManager gmapsModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        gmapsModelManager \u003d new GmapsModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void closestLocationData() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e locationNameList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"LT17\", \"LT17\", \"LT17\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Hashtable\u003cString, Object\u003e result \u003d gmapsModelManager.closestLocationData(locationNameList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals((String) result.get(ClosestLocationSyntax.FIRST_CLOSEST), \"LT17\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals((long) result.get(ClosestLocationSyntax.FIRST_CLOSEST_AVG_TIME), (long) 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void closestLocationDataString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e locationNameList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"LT17\", \"LT17\", \"LT17\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String result \u003d gmapsModelManager.closestLocationDataString(locationNameList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String expectedResult \u003d \"First closest location: LT17 | Average travelling time 0\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"Second closest location: LT19 | Average travelling time 4\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"Third closest location: AS4 | Average travelling time 70\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(expectedResult, result);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUP0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUP1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.mappingutil.TypicalMappings.MAP00;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.mappingutil.TypicalMappings.MAP20;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.BENSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ZACK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMappingList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.grouputil.TypicalGroups;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.mappingutil.TypicalMappings;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.personutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.personutil.TypicalPersonDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.scheduleutil.TypicalEvents;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ModelManager modelManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person.counterReset();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group.counterReset();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonList personList \u003d TypicalPersonDescriptor.generateTypicalPersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupList groupList \u003d TypicalGroups.generateTypicalGroupList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonToGroupMappingList personToGroupMappingList \u003d TypicalMappings.generateTypicalMappingList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        modelManager \u003d new ModelManager(personList, groupList, personToGroupMappingList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YiJiee"
        },
        "content": "        assertEquals(new AddressBook(modelManager.getAddressBook()), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getObservablePersonList().remove(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getPersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonList personList2 \u003d modelManager.getPersonList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(personList2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(personList2.findPerson(ALICE.getName()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(personList2.findPerson(ZACK.getName()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void addPerson() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d modelManager.addPerson(ZACK);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(person);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(person.isSamePerson(new PersonBuilder(ZACK).build()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(person.isSamePerson(person));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(person.isSamePerson(new PersonBuilder(ALICE).build()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(person.equals(new PersonBuilder(ZACK).build()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void findPerson() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d modelManager.findPerson(ALICE.getName());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(person.isSamePerson(new PersonBuilder(ALICE).build()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(person.isSamePerson(person));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testFindPerson() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d modelManager.findPerson(BENSON.getName());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(person.isSamePerson(person));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(person.equals(person));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void addEvent() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(modelManager.addEvent(BENSON.getName(), TypicalEvents.generateTypicalEvent2()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(modelManager.addEvent(ALICE.getName(), TypicalEvents.generateTypicalEvent1()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(modelManager.addEvent(ZACK.getName(), TypicalEvents.generateTypicalEvent2()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void editPerson() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(modelManager.editPerson(ALICE.getName(), ZACK));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(modelManager.editPerson(ALICE.getName(), BENSON));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deletePerson() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d modelManager.findPerson(ALICE.getName());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(modelManager.deletePerson(person.getPersonId()));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void findGroupsOfPerson() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d modelManager.findPerson(ALICE.getName());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cGroupId\u003e groups \u003d modelManager.findGroupsOfPerson(person.getPersonId());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(groups.size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getGroupList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(modelManager.getGroupList());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(modelManager.findGroup(GROUPNAME1));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(modelManager.findGroup(GROUPNAME0));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void addGroup() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(modelManager.addGroup(GROUP1));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(modelManager.addGroup(GROUP0));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(modelManager.addGroup(GROUP0));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void editGroup() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(modelManager.editGroup(GROUPNAME1, GROUP1));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(modelManager.editGroup(GROUPNAME1, GROUP0));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void findGroup() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(modelManager.findGroup(GROUPNAME0));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(modelManager.findGroup(GROUPNAME1));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testFindGroup() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d modelManager.findGroup(GROUPNAME1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(group);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(modelManager.findGroup(group.getGroupId()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deleteGroup() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d modelManager.findGroup(GROUPNAME1);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(modelManager.deleteGroup(group.getGroupId()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(modelManager.deleteGroup(group.getGroupId()));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void findPersonsOfGroup() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d modelManager.findGroup(GROUPNAME1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(group);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cPersonId\u003e arr \u003d modelManager.findPersonsOfGroup(group.getGroupId());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(arr);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(arr.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getPersonToGroupMappingList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(modelManager.getPersonToGroupMappingList());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void addPersonToGroupMapping() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(modelManager.addPersonToGroupMapping(MAP20));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(modelManager.addPersonToGroupMapping(MAP00));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void findPersonToGroupMapping() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(modelManager.findPersonToGroupMapping(MAP00.getPersonId(), MAP00.getGroupId()));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(modelManager.findPersonToGroupMapping(MAP20.getPersonId(), MAP20.getGroupId()));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deletePersonToGroupMapping() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(modelManager.deletePersonToGroupMapping(MAP00));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(modelManager.deletePersonToGroupMapping(MAP00));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deletePersonFromMapping() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d modelManager.findPerson(ALICE.getName());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(person);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        modelManager.deletePersonFromMapping(person.getPersonId());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cGroupId\u003e arr \u003d modelManager.findGroupsOfPerson(person.getPersonId());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(arr.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deleteGroupFromMapping() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d modelManager.findGroup(GROUPNAME1);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(group);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        modelManager.deleteGroupFromMapping(group.getGroupId());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cPersonId\u003e arr \u003d modelManager.findPersonsOfGroup(group.getGroupId());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(arr.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 198,
      "YiJiee": 1,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/model/gmaps/LocationGraphTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.model.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.commons.exceptions.TimeBookInvalidState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.internal.gmaps.ProcessVenues;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class LocationGraphTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private ProcessVenues processVenues;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private LocationGraph locationGraph;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void init() throws ConnectException, TimeBookInvalidState {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        processVenues \u003d new ProcessVenues().process();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        locationGraph \u003d new LocationGraph(processVenues.getLocations(), processVenues.getValidLocationList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getValidLocationList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(locationGraph.getValidLocationList(), processVenues.getValidLocationList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getLocations() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(locationGraph.getLocations(), locationGraph.getLocations());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getLocationIndex() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(locationGraph.getLocationIndex(\"NUS_LT17\"), -1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(locationGraph.getLocationIndex(\"LT17\"), 142);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getLocationRow() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e locationGraph.getLocationRow(1000));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertDoesNotThrow(() -\u003e locationGraph.getLocationRow(3));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getDistanceMatrix() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cArrayList\u003cLong\u003e\u003e expectedDistanceMatrix \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        for (int i \u003d 0; i \u003c locationGraph.getValidLocationList().size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            expectedDistanceMatrix.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(locationGraph.getDistanceMatrix(), expectedDistanceMatrix);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void setMatrixRow() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cArrayList\u003cLong\u003e\u003e expectedDistanceMatrix \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        for (int i \u003d 0; i \u003c locationGraph.getValidLocationList().size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            expectedDistanceMatrix.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        expectedDistanceMatrix.get(0).add((long) 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        expectedDistanceMatrix.get(0).add((long) 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        expectedDistanceMatrix.get(0).add((long) 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cLong\u003e row1 \u003d new ArrayList\u003c\u003e(Arrays.asList((long) 1, (long) 2, (long) 3));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cArrayList\u003cLong\u003e\u003e actualMatrix \u003d locationGraph.setMatrixRow(0, row1).getDistanceMatrix();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(expectedDistanceMatrix, actualMatrix);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/gmaps/LocationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.model.gmaps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class LocationTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        location \u003d new Location(\"LTFOO\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void setAndGetValidLocation() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        location.setValidLocation(\"NUS_LTFOO\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(location.getValidLocation(), \"NUS_LTFOO\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void getLocationName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(location.getLocationName(), \"LTFOO\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        location.setValidLocation(\"NUS_LTFOO\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Location location2 \u003d new Location(\"LTFOO\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        location2.setValidLocation(\"NUS_LTFOO\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(location, location2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        location.setValidLocation(\"NUS_LTFOO\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(location.toString(), \"Location: LTFOO, Google recognised location: NUS_LTFOO\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPREMARK1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPREMARK2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class GroupDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupDescriptor groupDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupDescriptor \u003d new GroupDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void isAnyFieldEdited_false() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(groupDescriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void isAnyFieldEdited_true() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupDescriptor.setGroupName(GROUPNAME1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(groupDescriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getGroupName_emptyNameField() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(groupDescriptor.getGroupName().equals(GroupName.emptyGroupName()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getGroupName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupDescriptor.setGroupName(GROUPNAME1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(GROUPNAME1, groupDescriptor.getGroupName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(GROUPNAME2, groupDescriptor.getGroupName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getGroupRemark_emptyRemarkField() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(groupDescriptor.getGroupRemark().equals(GroupRemark.emptyRemark()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getGroupRemark() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupDescriptor.setGroupRemark(GROUPREMARK1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(GROUPREMARK1, groupDescriptor.getGroupRemark());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(GROUPREMARK2, groupDescriptor.getGroupRemark());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void setGroupName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupDescriptor.setGroupName(GROUPNAME1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(GROUPNAME1.equals(groupDescriptor.getGroupName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(GROUPNAME2.equals(groupDescriptor.getGroupName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void setGroupRemark() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupDescriptor.setGroupRemark(GROUPREMARK1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(GROUPREMARK1.equals(groupDescriptor.getGroupRemark()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(GROUPREMARK2.equals(groupDescriptor.getGroupRemark()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupIdTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class GroupIdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getIdentifier() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupId groupId \u003d new GroupId(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(1, groupId.getIdentifier());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupId groupId \u003d new GroupId(1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupId groupId2 \u003d new GroupId(2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(groupId.equals(groupId));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(groupId.equals(groupId2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUP1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUP2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.grouputil.TypicalGroups;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class GroupListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void addGroup() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group1 \u003d groupList.addGroup(GROUP1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(group1.getGroupName().toString(), GROUP1.getGroupName().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(group1.getGroupRemark().toString(), GROUP1.getGroupRemark().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(group1.getGroupName().toString(), GROUP2.getGroupName().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(group1.getGroupRemark().toString(), GROUP2.getGroupRemark().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deleteGroup() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupList \u003d TypicalGroups.generateTypicalGroupList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d groupList.findGroup(GROUPNAME1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(group);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(groupList.deleteGroup(group.getGroupId()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(groupList.deleteGroup(group.getGroupId()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void editGroup() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group1 \u003d groupList.addGroup(GROUP1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group2 \u003d groupList.editGroup(group1.getGroupName(), GROUP2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(group2.getGroupName(), GROUP2.getGroupName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(group1.getGroupId(), group2.getGroupId());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void findGroup() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(groupList.findGroup(GROUP1.getGroupName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupList.addGroup(GROUP1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(groupList.findGroup(GROUP1.getGroupName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testFindGroup() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group group \u003d groupList.addGroup(GROUP1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(groupList.findGroup(group.getGroupId()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class GroupNameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupName groupName \u003d new GroupName(\"name\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(\"name\", groupName.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(\"other\", groupName.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(GROUPNAME1.equals(GROUPNAME1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(GROUPNAME1.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(GROUPNAME2.equals(GROUPNAME1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupRemarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPREMARK1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPREMARK2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class GroupRemarkTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupRemark groupRemark \u003d GROUPREMARK1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(groupRemark.toString(), GROUPREMARK1.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(groupRemark.toString(), GROUPREMARK2.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(GROUPREMARK1.equals(GROUPREMARK1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(GROUPREMARK1.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(GROUPREMARK1.equals(GROUPREMARK2));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUP1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUP2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPNAME2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPREMARK1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.grouputil.TypicalGroups.GROUPREMARK2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class GroupTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Group group1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Group group2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        group1 \u003d new Group(GROUP1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        group2 \u003d new Group(GROUP2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getGroupRemark() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(GROUPREMARK1.equals(group1.getGroupRemark()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(group1.getGroupRemark().equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(group1.getGroupRemark().equals(GROUPREMARK2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getGroupName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(GROUPNAME1.equals(group1.getGroupName()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(group1.getGroupName().equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(group1.getGroupName().equals(GROUPNAME2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getGroupId() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(group1.getGroupId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(group2.getGroupId());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(group1.getGroupId().equals(group2.getGroupId()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(group1.equals(group1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(group1.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(group1.equals(group2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void isSameGroup() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group other \u003d new Group(GROUP1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(group1.isSameGroup(other));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(group1.isSameGroup(group1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(group1.isSameGroup(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(group1.isSameGroup(group2));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/mapping/PersonToGroupMappingListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.mappingutil.TypicalMappings.MAP00;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.mappingutil.TypicalMappings.MAP01;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.mappingutil.TypicalMappings.MAP02;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.mappingutil.TypicalMappings.MAP10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.mappingutil.TypicalMappings.MAP22;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.mappingutil.TypicalMappings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class PersonToGroupMappingListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private PersonToGroupMappingList mappingList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList \u003d new PersonToGroupMappingList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void addPersonToGroupMapping() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // add new mappings -\u003e true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(mappingList.addPersonToGroupMapping(MAP00));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(mappingList.addPersonToGroupMapping(MAP01));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        //add mappings that are already in maplist -\u003e false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(mappingList.addPersonToGroupMapping(MAP00));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(mappingList.addPersonToGroupMapping(MAP01));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void findPersonToGroupMapping() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList.addPersonToGroupMapping(MAP00);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonToGroupMapping map \u003d mappingList.findPersonToGroupMapping(MAP00.getPersonId(), MAP00.getGroupId());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(map.equals(MAP00));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(map.getPersonId().equals(MAP00.getPersonId()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(map.getGroupId().equals(MAP00.getGroupId()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(map.equals(MAP22));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(map.getPersonId().equals(MAP22.getPersonId()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(map.getGroupId().equals(MAP22.getGroupId()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deletePersonToGroupMapping() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList.addPersonToGroupMapping(MAP00);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // delete a map in the list -\u003e true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(mappingList.deletePersonToGroupMapping(MAP00));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // delete a map not in the list -\u003e false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(mappingList.deletePersonToGroupMapping(MAP00));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(mappingList.deletePersonToGroupMapping(MAP22));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deletePersonFromMapping() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList \u003d TypicalMappings.generateTypicalMappingList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList.deletePersonFromMapping(MAP00.getPersonId());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // these maps are deleted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(mappingList.findPersonToGroupMapping(MAP00.getPersonId(), MAP00.getGroupId()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(mappingList.findPersonToGroupMapping(MAP01.getPersonId(), MAP01.getGroupId()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(mappingList.findPersonToGroupMapping(MAP02.getPersonId(), MAP02.getGroupId()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // these maps are not deleted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(mappingList.findPersonToGroupMapping(MAP10.getPersonId(), MAP10.getGroupId()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(mappingList.findPersonToGroupMapping(MAP22.getPersonId(), MAP22.getGroupId()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(mappingList.findPersonToGroupMapping(MAP22.getPersonId(), MAP22.getGroupId()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deleteGroupFromMapping() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList \u003d TypicalMappings.generateTypicalMappingList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList.deleteGroupFromMapping(MAP00.getGroupId());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // these maps are deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(mappingList.findPersonToGroupMapping(MAP10.getPersonId(), MAP10.getGroupId()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNull(mappingList.findPersonToGroupMapping(MAP00.getPersonId(), MAP00.getGroupId()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // these maps are not deleted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(mappingList.findPersonToGroupMapping(MAP22.getPersonId(), MAP22.getGroupId()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(mappingList.findPersonToGroupMapping(MAP22.getPersonId(), MAP22.getGroupId()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(mappingList.findPersonToGroupMapping(MAP01.getPersonId(), MAP01.getGroupId()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(mappingList.findPersonToGroupMapping(MAP02.getPersonId(), MAP02.getGroupId()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void findGroupsOfPerson() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList \u003d TypicalMappings.generateTypicalMappingList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cGroupId\u003e groups \u003d mappingList.findGroupsOfPerson(MAP00.getPersonId());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(3, groups.size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void findPersonsOfGroup() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList \u003d TypicalMappings.generateTypicalMappingList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cPersonId\u003e persons \u003d mappingList.findPersonsOfGroup(MAP00.getGroupId());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(2, persons.size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/model/mapping/PersonToGroupMappingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.mappingutil.TypicalMappings.MAP00;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.mappingutil.TypicalMappings.MAP01;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.mappingutil.TypicalMappings.MAP22;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class PersonToGroupMappingTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private PersonToGroupMapping mapping;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mapping \u003d MAP00;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getGroupId() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(MAP00.getGroupId().equals(mapping.getGroupId()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(MAP22.getGroupId().equals(mapping.getGroupId()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getPersonId() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(MAP00.getPersonId().equals(mapping.getPersonId()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(MAP22.getPersonId().equals(mapping.getPersonId()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(mapping.equals(MAP00));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(MAP00.equals(MAP00));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(mapping.equals(MAP22));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(MAP00.equals(MAP01));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.personutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class PersonDescriptorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private PersonDescriptor personDescriptorEmpty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private PersonDescriptor alice;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personDescriptorEmpty \u003d new PersonDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        alice \u003d ALICE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void isAnyFieldEdited_false() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // empty descriptor -\u003e false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(personDescriptorEmpty.isAnyFieldEdited());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void isAnyFieldEdited_onlyNameTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // only name field edited -\u003e true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personDescriptorEmpty.setName(ALICE.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(personDescriptorEmpty.isAnyFieldEdited());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void isAnyFieldEdited_allFieldsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // all fields edited -\u003e true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.isAnyFieldEdited());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(alice.getName(), ALICE.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(alice.getName(), BENSON.getName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getPhone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(alice.getPhone(), ALICE.getPhone());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(alice.getPhone(), BENSON.getPhone());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getEmail() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(alice.getEmail(), ALICE.getEmail());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(alice.getEmail(), BENSON.getEmail());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(alice.getAddress(), ALICE.getAddress());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(alice.getAddress(), BENSON.getAddress());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getRemark() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(alice.getRemark(), ALICE.getRemark());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(alice.getRemark(), BENSON.getRemark());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(alice.getTags(), ALICE.getTags());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(alice.getTags(), BENSON.getTags());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonIdTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class PersonIdTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private PersonId personId \u003d new PersonId(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getIdentifier() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(1, personId.getIdentifier());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(Integer.toString(1), personId.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonId personId2 \u003d new PersonId(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(personId.equals(personId2));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.personutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class PersonListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private PersonList personList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personList \u003d new PersonList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personList.addPerson(ALICE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personList.addPerson(BENSON);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void addPerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonBuilder personBuilder \u003d new PersonBuilder(CARL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d personList.addPerson(CARL);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(person.isSamePerson(personBuilder.build()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void deletePerson() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d personList.findPerson(ALICE.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(personList.deletePerson(person.getPersonId()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(personList.deletePerson(person.getPersonId()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void editPerson() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d personList.findPerson(ALICE.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonDescriptor personDescriptor \u003d CARL;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person editedPerson \u003d personList.editPerson(person.getName(), personDescriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person toCompare \u003d new PersonBuilder(personDescriptor).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(editedPerson.isSamePerson(toCompare));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void findPerson() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d personList.findPerson(ALICE.getName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person alice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.isSamePerson(person));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testFindPerson() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person person \u003d personList.findPerson(BENSON.getName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person benson \u003d new PersonBuilder(BENSON).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(benson.isSamePerson(person));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Schedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.personutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.personutil.PersonDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.personutil.PersonEditor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.scheduleutil.TypicalEvents;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.scheduleutil.TypicalSchedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Person alice;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Person benson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        alice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        benson \u003d new PersonBuilder(BENSON).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void equals_same_person() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.equals(alice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(alice.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // different person -\u003e return false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(alice.equals(benson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void equals_edited_person() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // edited same person -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person editedAlice \u003d new PersonEditor(alice).edit("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new PersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.equals(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        editedAlice \u003d new PersonEditor(alice).edit("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new PersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        editedAlice \u003d new PersonEditor(alice).edit("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new PersonDescriptorBuilder().withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.equals(editedAlice));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        editedAlice \u003d new PersonEditor(alice).edit("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new PersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        editedAlice \u003d new PersonEditor(alice).edit("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new PersonDescriptorBuilder().withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void isSamePerson_same_object() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.isSamePerson(alice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(alice.isSamePerson(benson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void isSamePerson_same_values() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person otherPerson \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.isSamePerson(otherPerson));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // different values -\u003e return false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        otherPerson.setName(benson.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(alice.isSamePerson(otherPerson));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void isSamePerson_edited_person() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // different phone and email but same object -\u003e return true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person editedAlice \u003d new PersonEditor(new PersonBuilder(ALICE).build()).edit("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                new PersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(alice.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void addEvent() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        alice.addEvent(TypicalEvents.generateTypicalEvent1());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Schedule schedule \u003d alice.getSchedule();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(schedule);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event \u003d schedule.getEvents().get(0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(event);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(event.equals(TypicalEvents.generateTypicalEvent1()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getPersonId() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(alice.getPersonId());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(alice.getName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(ALICE.getName().equals(alice.getName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void setName() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        alice.setName(BENSON.getName());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(alice.getName().equals(ALICE.getName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.getName().equals(BENSON.getName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getPhone() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(alice.getPhone());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.getPhone().equals(ALICE.getPhone()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void setPhone() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        alice.setPhone(BENSON.getPhone());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(alice.getPhone().equals(ALICE.getPhone()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.getPhone().equals(BENSON.getPhone()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getEmail() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(alice.getEmail());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.getEmail().equals(ALICE.getEmail()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void setEmail() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        alice.setEmail(BENSON.getEmail());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(alice.getEmail().equals(ALICE.getEmail()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.getEmail().equals(BENSON.getEmail()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(alice.getAddress());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.getAddress().equals(ALICE.getAddress()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void setAddress() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        alice.setAddress(BENSON.getAddress());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(alice.getAddress().equals(ALICE.getAddress()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.getAddress().equals(BENSON.getAddress()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getRemark() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(alice.getRemark());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.getRemark().equals(ALICE.getRemark()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void setRemark() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        alice.setRemark(BENSON.getRemark());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(alice.getRemark().equals(ALICE.getRemark()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.getRemark().equals(BENSON.getRemark()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void setSchedule() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Schedule schedule \u003d TypicalSchedule.generateTypicalSchedule(alice.getPersonId());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        alice.setSchedule(schedule);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.getSchedule().getPersonId().equals(alice.getPersonId()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(alice.getSchedule());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getSchedule() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Schedule schedule \u003d TypicalSchedule.generateEmptySchedule(benson.getPersonId());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        benson.setSchedule(schedule);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(benson.getSchedule().getPersonId().equals(benson.getPersonId()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotNull(benson.getSchedule());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 154,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RemarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class RemarkTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Remark remark \u003d new Remark(\"Remark\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(\"Remark\", remark.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(\"Remark2\", remark.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(remark.equals(remark));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(remark.equals(ALICE.getRemark()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testEquals_null() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(remark.equals(ALICE.getRemark()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 4,
      "-": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/schedule/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalEvents.EVENTNAME1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalEvents.EVENTNAME2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.TIMESLOT1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.TIMESLOT2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.scheduleutil.TypicalEvents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void addTimeslot() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event \u003d TypicalEvents.generateEmptyEvent();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(event.addTimeslot(TIMESLOT1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testAddTimeslot() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event \u003d TypicalEvents.generateEmptyEvent();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cTimeslot\u003e arr \u003d new ArrayList\u003cTimeslot\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        arr.add(TIMESLOT1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        arr.add(TIMESLOT2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(event.addTimeslot(arr));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getTimeslots() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event \u003d TypicalEvents.generateTypicalEvent1();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cTimeslot\u003e arr \u003d event.getTimeslots();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(arr.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(arr.get(0).equals(TIMESLOT1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(arr.get(0).equals(TIMESLOT2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event \u003d TypicalEvents.generateTypicalEvent2();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event sameEvent \u003d TypicalEvents.generateTypicalEvent2();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event otherEvent \u003d TypicalEvents.generateTypicalEvent1();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(event.equals(sameEvent));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(event.equals(otherEvent));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getEventName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event1 \u003d TypicalEvents.generateTypicalEvent1();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(event1.getEventName().equals(EVENTNAME1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(event1.getEventName().equals(EVENTNAME2));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/schedule/ScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.personutil.TypicalPersonDescriptor.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.personutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.scheduleutil.TypicalEvents;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.scheduleutil.TypicalSchedule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class ScheduleTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Person alice;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Person benson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        alice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        benson \u003d new PersonBuilder(BENSON).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void addEvent() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Schedule schedule \u003d TypicalSchedule.generateEmptySchedule(alice.getPersonId());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        schedule.addEvent(TypicalEvents.generateTypicalEvent1());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(schedule.getEvents().get(0).equals(TypicalEvents.generateTypicalEvent1()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(schedule.getEvents().get(0).equals(TypicalEvents.generateTypicalEvent2()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getEvents() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Schedule schedule \u003d TypicalSchedule.generateEmptySchedule(alice.getPersonId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        schedule.addEvent(TypicalEvents.generateTypicalEvent2());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(schedule.getEvents().get(0).equals(TypicalEvents.generateTypicalEvent2()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(schedule.getEvents().get(0).equals(TypicalEvents.generateTypicalEvent1()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getPersonId() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Schedule schedule \u003d TypicalSchedule.generateEmptySchedule(alice.getPersonId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(alice.getPersonId().equals(schedule.getPersonId()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(benson.getPersonId().equals(schedule.getPersonId()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/schedule/TimeslotTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.ENDTIME1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.ENDTIME2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.STARTTIME1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.STARTTIME2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.TIMESLOT1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.TIMESLOT2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.VENUE1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.VENUE2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class TimeslotTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(TIMESLOT1.equals(TIMESLOT1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(TIMESLOT1.equals(TIMESLOT2));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getStartTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(TIMESLOT1.getStartTime().compareTo(STARTTIME1) \u003d\u003d 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(TIMESLOT1.getStartTime().compareTo(STARTTIME2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getEndTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(TIMESLOT1.getEndTime().compareTo(ENDTIME1) \u003d\u003d 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(TIMESLOT1.getEndTime().compareTo(ENDTIME2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getVenue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(VENUE1.equals(TIMESLOT1.getVenue()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(VENUE2.equals(TIMESLOT1.getVenue()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/schedule/VenueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.model.person.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.VENUE1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.VENUE2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "class VenueTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(VENUE1.equals(VENUE1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertFalse(VENUE1.equals(VENUE2));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void getVenue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(VENUE1.toString(), VENUE1.getVenue());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertNotEquals(VENUE2.toString(), VENUE1.getVenue());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, null, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, invalidTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 22,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 2,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 4,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        JsonTimeBookStorage timeBookStorage \u003d new JsonTimeBookStorage(getTempFilePath(\"tbs\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, timeBookStorage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        *//*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 1,
      "Alvinnyk": 6,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/stubs/ProcessVenuesStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.logic.internal.gmaps.ProcessVenues;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import seedu.address.model.gmaps.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": " * This is the stub for Process Venues Obj"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "public class ProcessVenuesStub extends ProcessVenues {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ProcessVenuesStub() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ArrayList\u003cLocation\u003e getLocations() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Location location1 \u003d new Location(\"Foo\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        location1.setValidLocation(\"NUS_FOO\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Location location2 \u003d new Location(\"Foo-1234\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        location2.setValidLocation(\"NUS_FOO\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        Location location3 \u003d new Location(\"Foo_1234\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        location3.setValidLocation(\"NUS_FOO\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return new ArrayList\u003cLocation\u003e(Arrays.asList(location1, location2, location3));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    public ArrayList\u003cString\u003e getValidLocationList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        return new ArrayList(Arrays.asList(\"NUS_FOO\", \"NUS_BAR\", \"NUS_FOOBAR\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /*public static String getEditPersonDescriptorDetails(PersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 4,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            + \"}%n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.personutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withPhone(\"94351253\").withRemark(\"Alice is a loser\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withRemark(\"Benson is a dumbass\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRemark(\"WTF CARL?!\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withTags(\"LALALA\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 7,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/grouputil/TypicalGroups.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.testutil.grouputil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescription;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupRemark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Typical Groups."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TypicalGroups {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupName GROUPNAME1 \u003d new GroupName(\"group1\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupName GROUPNAME2 \u003d new GroupName(\"group2\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupName GROUPNAME3 \u003d new GroupName(\"group3\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupRemark GROUPREMARK1 \u003d new GroupRemark(\"remark1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupRemark GROUPREMARK2 \u003d new GroupRemark(\"remark2\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupRemark GROUPREMARK3 \u003d new GroupRemark(\"remark3\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupDescription GROUPDESCRIPTION1 \u003d new GroupDescription(\"description1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupDescription GROUPDESCRIPTION2 \u003d new GroupDescription(\"description2\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupDescription GROUPDESCRIPTION3 \u003d new GroupDescription(\"description3\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupDescriptor GROUP1 \u003d new GroupDescriptor(GROUPNAME1, GROUPDESCRIPTION1, GROUPREMARK1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupDescriptor GROUP2 \u003d new GroupDescriptor(GROUPNAME2, GROUPDESCRIPTION2, GROUPREMARK2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupDescriptor GROUP3 \u003d new GroupDescriptor(GROUPNAME3, GROUPDESCRIPTION3, GROUPREMARK3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupName GROUPNAME0 \u003d new GroupName(\"group0\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupRemark GROUPREMARK0 \u003d new GroupRemark(\"remark0\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupDescription GROUPDESCRIPTION0 \u003d new GroupDescription(\"description0\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final GroupDescriptor GROUP0 \u003d new GroupDescriptor(GROUPNAME0, GROUPDESCRIPTION0, GROUPREMARK0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Generates a typical GroupList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return GroupList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static GroupList generateTypicalGroupList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupList groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupList.addGroup(GROUP1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupList.addGroup(GROUP2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        groupList.addGroup(GROUP3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return groupList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/mappingutil/TypicalMappings.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.testutil.mappingutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMapping;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMappingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Typical Mappings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TypicalMappings {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonToGroupMapping MAP00 \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            new PersonToGroupMapping(new PersonId(0), new GroupId(0));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonToGroupMapping MAP01 \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            new PersonToGroupMapping(new PersonId(0), new GroupId(1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonToGroupMapping MAP02 \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            new PersonToGroupMapping(new PersonId(0), new GroupId(2));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonToGroupMapping MAP10 \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            new PersonToGroupMapping(new PersonId(1), new GroupId(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonToGroupMapping MAP11 \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            new PersonToGroupMapping(new PersonId(1), new GroupId(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonToGroupMapping MAP22 \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            new PersonToGroupMapping(new PersonId(2), new GroupId(2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonToGroupMapping MAP20 \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            new PersonToGroupMapping(new PersonId(2), new GroupId(0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Generates a typical MappingList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return PersonToGroupMappingList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static PersonToGroupMappingList generateTypicalMappingList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonToGroupMappingList mappingList \u003d new PersonToGroupMappingList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList.addPersonToGroupMapping(MAP00);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList.addPersonToGroupMapping(MAP01);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList.addPersonToGroupMapping(MAP02);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList.addPersonToGroupMapping(MAP10);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList.addPersonToGroupMapping(MAP11);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mappingList.addPersonToGroupMapping(MAP22);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return mappingList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/modelutil/TypicalModel.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.testutil.modelutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.TimeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.group.GroupList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.mapping.PersonToGroupMappingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.grouputil.TypicalGroups;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.mappingutil.TypicalMappings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.testutil.personutil.TypicalPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Typical Model."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TypicalModel {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Generates a Typical Model."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static ModelManager generateTypicalModel() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Person.counterReset();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Group.counterReset();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonList personList \u003d TypicalPersonDescriptor.generateTypicalPersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        GroupList groupList \u003d TypicalGroups.generateTypicalGroupList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonToGroupMappingList personToGroupMappingList \u003d TypicalMappings.generateTypicalMappingList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        TimeBook timeBook \u003d new TimeBook(personList, groupList, personToGroupMappingList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(timeBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return modelManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/personutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.testutil.personutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        phone \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        email \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        address \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        remark \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonBuilder(PersonDescriptor personDescriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        name \u003d personDescriptor.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        phone \u003d personDescriptor.getPhone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        email \u003d personDescriptor.getEmail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        address \u003d personDescriptor.getAddress();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        remark \u003d personDescriptor.getRemark();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        tags \u003d personDescriptor.getTags();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, remark, tags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 13,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/personutil/PersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.testutil.personutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class PersonDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    //public static final String DEFAULT_NAME \u003d \"Ally\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private PersonDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        descriptor \u003d new PersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        //descriptor.setName(new Name(DEFAULT_NAME));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.descriptor \u003d new PersonDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.descriptor.setRemark(person.getRemark());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDescriptorBuilder(PersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.descriptor \u003d descriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDescriptorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        descriptor.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonDescriptor build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 34,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/personutil/PersonEditor.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.testutil.personutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Edits a person."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class PersonEditor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public PersonEditor(Person person) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * edits a person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personDescriptor to edit"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return person"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Person edit(PersonDescriptor personDescriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personDescriptor.getName() !\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Name otherName \u003d personDescriptor.getName();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            person.setName(personDescriptor.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personDescriptor.getPhone() !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            person.setPhone(personDescriptor.getPhone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personDescriptor.getEmail() !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            person.setEmail(personDescriptor.getEmail());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personDescriptor.getAddress() !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            person.setAddress(personDescriptor.getAddress());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personDescriptor.getRemark() !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            person.setRemark(personDescriptor.getRemark());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (personDescriptor.getTags() !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            person.addTags(personDescriptor.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/personutil/TypicalPersonDescriptor.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.testutil.personutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Typical person descriptors."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TypicalPersonDescriptor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonDescriptor ALICE \u003d new PersonDescriptorBuilder()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withName(\"Alice Pauline\").withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withPhone(\"94351253\").withRemark(\"Alice is a loser\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonDescriptor BENSON \u003d new PersonDescriptorBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withRemark(\"Benson is a dumbass\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonDescriptor CARL \u003d new PersonDescriptorBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRemark(\"WTF CARL?!\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withTags(\"LALALA\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonDescriptor DANIEL \u003d new PersonDescriptorBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonDescriptor ELLE \u003d new PersonDescriptorBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonDescriptor FIONA \u003d new PersonDescriptorBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonDescriptor GEORGE \u003d new PersonDescriptorBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final PersonDescriptor ZACK \u003d new PersonDescriptorBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withName(\"Zack\").withPhone(\"81231236\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withEmail(\"zack@example.com\").withAddress(\"loser street\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            .withRemark(\"Im not on the list\").withTags(\"blabla\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Generates a typical PersonList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return PersonList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static PersonList generateTypicalPersonList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        PersonList personList \u003d new PersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personList.addPerson(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personList.addPerson(BENSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personList.addPerson(CARL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personList.addPerson(DANIEL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personList.addPerson(ELLE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personList.addPerson(FIONA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        personList.addPerson(GEORGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return personList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/scheduleutil/TypicalEvents.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.testutil.scheduleutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.TIMESLOT1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.TIMESLOT2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.scheduleutil.TypicalTimeslots.TIMESLOT3;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Timeslot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Typical Events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String EMPTYEVENT \u003d \"emptyevent\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String EVENTNAME1 \u003d \"eventname1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String EVENTNAME2 \u003d \"eventname2\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Generate a Typical Event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Event 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static Event generateTypicalEvent1() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cTimeslot\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        arr.add(TIMESLOT1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event \u003d new Event(EVENTNAME1, arr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Generate a Typical Event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Event 2"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static Event generateTypicalEvent2() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ArrayList\u003cTimeslot\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        arr.add(TIMESLOT2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        arr.add(TIMESLOT3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event \u003d new Event(EVENTNAME2, arr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Generates and empty event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Event"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static Event generateEmptyEvent() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Event event \u003d new Event((EMPTYEVENT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/scheduleutil/TypicalSchedule.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.testutil.scheduleutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Schedule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Typical Schedule of a Person."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TypicalSchedule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Generates a typical Schedule of a person with PersonId."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personId of the Person"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Schedule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static Schedule generateTypicalSchedule(PersonId personId) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Schedule schedule \u003d new Schedule(personId);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        schedule.addEvent(TypicalEvents.generateTypicalEvent1());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        schedule.addEvent(TypicalEvents.generateTypicalEvent2());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Generates an empty Schedule of a person with PersonId."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param personId of the Person"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Schedule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static Schedule generateEmptySchedule(PersonId personId) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Schedule schedule \u003d new Schedule(personId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/scheduleutil/TypicalTimeslots.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package seedu.address.testutil.scheduleutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Timeslot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.person.schedule.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * Typical Timeslots."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TypicalTimeslots {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String STARTTIMETEXT1 \u003d \"03122007:1030-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final String ENDTIMETEXT1 \u003d \"03122007:1130-\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final LocalDateTime STARTTIME1 \u003d LocalDateTime.parse(\"2007-12-03T10:30:00\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final LocalDateTime ENDTIME1 \u003d LocalDateTime.parse(\"2007-12-03T11:30:00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Venue VENUE1 \u003d new Venue(\"venue1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Timeslot TIMESLOT1 \u003d new Timeslot("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            STARTTIME1, ENDTIME1, VENUE1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final LocalDateTime STARTTIME2 \u003d LocalDateTime.parse(\"2007-12-03T12:30:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final LocalDateTime ENDTIME2 \u003d LocalDateTime.parse(\"2007-12-03T13:30:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Venue VENUE2 \u003d new Venue(\"venue2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Timeslot TIMESLOT2 \u003d new Timeslot("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            STARTTIME2, ENDTIME2, VENUE2"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final LocalDateTime STARTTIME3 \u003d LocalDateTime.parse(\"2007-12-03T14:30:00\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final LocalDateTime ENDTIME3 \u003d LocalDateTime.parse(\"2007-12-03T15:30:00\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Venue VENUE3 \u003d new Venue(\"venue3\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Timeslot TIMESLOT3 \u003d new Timeslot("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            STARTTIME3, ENDTIME3, VENUE3"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Deque;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.concurrent.ExecutionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.geometry.Point2D;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class UiUtilTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static Point2D originPoint;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Set up a JavaFX Application thread for test functions to use {@link Platform#runLater(Runnable)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * May create a Java application icon on the macOS Dock."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // TODO: find a better way to test JavaFX-related things without invoking JavaFX"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Platform.startup(() -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final var primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        originPoint \u003d new Point2D(primaryScreenBounds.getMinX(), primaryScreenBounds.getMinY());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Returns a new {@link Stage} instance by creating it on the JavaFX application thread."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A new {@link Stage} instance."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static Stage createStage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cStage\u003e stageFuture \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            stageFuture.complete(new Stage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Stage stage \u003d stageFuture.get(2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            assertNotNull(stage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return stage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (InterruptedException | ExecutionException | TimeoutException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void onSceneReady_oneNodeOneHandler_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region testRegion \u003d new Region();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cScene\u003e sceneFuture \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.onSceneReady(testRegion, sceneFuture::complete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Scene expectedScene \u003d new Scene(testRegion);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Scene receivedScene \u003d sceneFuture.get(2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            assertEquals(expectedScene, receivedScene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (ExecutionException | TimeoutException | InterruptedException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void onSceneReady_oneNodeManyHandlers_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region testRegion \u003d new Region();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cScene\u003e sceneFuture1 \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cScene\u003e sceneFuture2 \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.onSceneReady(testRegion, sceneFuture1::complete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.onSceneReady(testRegion, sceneFuture2::complete);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Scene expectedScene \u003d new Scene(testRegion);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Scene receivedScene1 \u003d sceneFuture1.get(2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            assertEquals(expectedScene, receivedScene1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Scene receivedScene2 \u003d sceneFuture2.get(2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            assertEquals(expectedScene, receivedScene2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (ExecutionException | TimeoutException | InterruptedException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void onSceneReady_manyNodesOneHandlerEach_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region testRegion1 \u003d new Region();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cScene\u003e sceneFuture1 \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region testRegion2 \u003d new Region();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cScene\u003e sceneFuture2 \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Group regions \u003d new Group(testRegion1, testRegion2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.onSceneReady(testRegion1, sceneFuture1::complete);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.onSceneReady(testRegion2, sceneFuture2::complete);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Scene expectedScene \u003d new Scene(regions);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Scene receivedScene1 \u003d sceneFuture1.get(2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            assertEquals(expectedScene, receivedScene1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Scene receivedScene2 \u003d sceneFuture2.get(2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            assertEquals(expectedScene, receivedScene2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (ExecutionException | TimeoutException | InterruptedException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void onSceneReady_nodeNotAddedToScene_neverTriggered() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region testRegion \u003d new Region();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cScene\u003e sceneFuture \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.onSceneReady(testRegion, sceneFuture::complete);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(TimeoutException.class, () -\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            sceneFuture.get(1, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void onWindowReady_oneNodeOneHandler_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region testRegion \u003d new Region();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Scene scene \u003d new Scene(testRegion);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Stage expectedWindow \u003d createStage();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cWindow\u003e windowFuture \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.onWindowReady(testRegion, windowFuture::complete);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            expectedWindow.setScene(scene);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final Window receivedWindow \u003d windowFuture.get(1, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            assertEquals(expectedWindow, receivedWindow);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (InterruptedException | ExecutionException | TimeoutException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void onWindowReady_nodeNotAddedToWindow_neverTriggered() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region testRegion \u003d new Region();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Scene scene \u003d new Scene(testRegion);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cWindow\u003e windowFuture \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.onWindowReady(testRegion, windowFuture::complete);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(TimeoutException.class, () -\u003e {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            windowFuture.get(1, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static KeyEvent createKeyEvent(final KeyCode keyCode) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new KeyEvent(KeyEvent.KEY_PRESSED, keyCode.getChar(), \"\", keyCode, false, false, false, false);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void redirectKeyCodeEvents_fireExpectedSingleKeyCodeEventOnSource_matchingKeyCodeEventsFiredOnTarget() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region eventSource \u003d new Region();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region eventTarget \u003d new Region();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyCode expectedKeyCode \u003d KeyCode.TAB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.redirectKeyCodeEvents(eventSource, eventTarget, expectedKeyCode);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cKeyEvent\u003e keyEventFuture \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        eventTarget.addEventFilter(KeyEvent.KEY_PRESSED, keyEventFuture::complete);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyEvent event \u003d createKeyEvent(expectedKeyCode);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        eventSource.fireEvent(event);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyEvent receivedEvent \u003d keyEventFuture.getNow(null);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertNotNull(receivedEvent);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertEquals(expectedKeyCode, receivedEvent.getCode());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void redirectKeyCodeEvents_fireUnexpectedSingleKeyCodeEventOnSource_keyCodeEventFiredOnlyOnSource() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region eventSource \u003d new Region();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cKeyEvent\u003e sourceKeyEventFuture \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        eventSource.addEventFilter(KeyEvent.KEY_PRESSED, sourceKeyEventFuture::complete);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region eventTarget \u003d new Region();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cKeyEvent\u003e targetKeyEventFuture \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        eventTarget.addEventFilter(KeyEvent.KEY_PRESSED, targetKeyEventFuture::complete);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyCode listeningKeyCode \u003d KeyCode.TAB;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.redirectKeyCodeEvents(eventSource, eventTarget, listeningKeyCode);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyCode differentKeyCode \u003d KeyCode.END;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyEvent event \u003d createKeyEvent(differentKeyCode);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        eventSource.fireEvent(event);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyEvent targetReceivedEvent \u003d targetKeyEventFuture.getNow(null);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertNull(targetReceivedEvent);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyEvent sourceReceivedEvent \u003d sourceKeyEventFuture.getNow(null);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertNotNull(sourceReceivedEvent);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertEquals(differentKeyCode, sourceReceivedEvent.getCode());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void redirectKeyCodeEvents_fireMultipleExpectedKeyCodeEventsOnSource_matchingKeyCodeEventsFiredOnTarget() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region eventSource \u003d new Region();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region eventTarget \u003d new Region();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cKeyCode\u003e expectedKeyCodes \u003d List.of(KeyCode.TAB, KeyCode.E, KeyCode.F10);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.redirectKeyCodeEvents(eventSource, eventTarget, expectedKeyCodes.toArray(new KeyCode[0]));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Deque\u003cKeyEvent\u003e receivedKeyEvents \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        eventTarget.addEventFilter(KeyEvent.KEY_PRESSED, receivedKeyEvents::push);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        for (final KeyCode expectedKeyCode : expectedKeyCodes) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final KeyEvent event \u003d createKeyEvent(expectedKeyCode);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            eventSource.fireEvent(event);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            assertEquals(expectedKeyCode, receivedKeyEvents.pop().getCode());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void addKeyCodeListener_fireExpectedSingleKeyCodeEvent_matchingKeyCodeEventFired() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region eventSource \u003d new Region();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyCode expectedKeyCode \u003d KeyCode.TAB;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyEvent event \u003d createKeyEvent(expectedKeyCode);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cKeyEvent\u003e keyEventFuture \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.addKeyCodeListener(eventSource, keyEventFuture::complete, expectedKeyCode);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        eventSource.fireEvent(event);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyEvent receivedEvent \u003d keyEventFuture.getNow(null);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertNotNull(receivedEvent);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertEquals(expectedKeyCode, receivedEvent.getCode());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void addKeyCodeListener_fireUnexpectedSingleKeyCodeEvent_noEventFired() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region eventSource \u003d new Region();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyCode listeningKeyCode \u003d KeyCode.TAB;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyEvent expectedEvent \u003d createKeyEvent(listeningKeyCode);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final CompletableFuture\u003cKeyEvent\u003e keyEventFuture \u003d new CompletableFuture\u003c\u003e();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.addKeyCodeListener(eventSource, keyEventFuture::complete, listeningKeyCode);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyCode unexpectedKeyCode \u003d KeyCode.END;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyEvent unexpectedEvent \u003d createKeyEvent(unexpectedKeyCode);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        eventSource.fireEvent(unexpectedEvent);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final KeyEvent receivedEvent \u003d keyEventFuture.getNow(null);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertNull(receivedEvent);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void addKeyCodeListener_fireMultipleExpectedKeyCodeEvents_matchingKeyCodeEventsFired() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region eventSource \u003d new Region();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cKeyCode\u003e expectedKeyCodes \u003d List.of(KeyCode.TAB, KeyCode.E, KeyCode.F10);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Deque\u003cKeyEvent\u003e receivedKeyEvents \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.addKeyCodeListener(eventSource, expectedKeyCodes, receivedKeyEvents::push);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        for (final KeyCode expectedKeyCode : expectedKeyCodes) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final KeyEvent event \u003d createKeyEvent(expectedKeyCode);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            eventSource.fireEvent(event);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            assertEquals(expectedKeyCode, receivedKeyEvents.pop().getCode());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void addKeyCodeListener_fireMultipleUnexpectedKeyCodesFired_noEventFired() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Region eventSource \u003d new Region();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cKeyCode\u003e listeningKeyCodes \u003d List.of(KeyCode.TAB, KeyCode.E, KeyCode.F10);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Deque\u003cKeyEvent\u003e receivedKeyEvents \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        UiUtil.addKeyCodeListener(eventSource, listeningKeyCodes, receivedKeyEvents::push);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final List\u003cKeyCode\u003e unexpectedKeyCodes \u003d List.of(KeyCode.ENTER, KeyCode.P, KeyCode.UP);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        for (final KeyCode unexpectedKeyCode : unexpectedKeyCodes) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final KeyEvent event \u003d createKeyEvent(unexpectedKeyCode);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            eventSource.fireEvent(event);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(receivedKeyEvents.isEmpty());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    Point2D pointWithX(final Point2D point, final double x) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new Point2D(x, point.getY());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    Point2D pointWithY(final Point2D point, final double y) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new Point2D(point.getX(), y);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisible_origin_true() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(UiUtil.isPointUserVisible(originPoint));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisible_offscreenMinXy_false() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D offscreenMinXyPoint \u003d new Point2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(UiUtil.isPointUserVisible(offscreenMinXyPoint));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisible_offscreenMaxXy_false() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D offscreenMaxXyPoint \u003d new Point2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(UiUtil.isPointUserVisible(offscreenMaxXyPoint));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisible_offscreenOriginXMinY_false() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D originXMinYPoint \u003d pointWithY(originPoint, Double.NEGATIVE_INFINITY);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(UiUtil.isPointUserVisible(originXMinYPoint));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisible_offscreenOriginXMaxY_false() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D originXMaxYPoint \u003d pointWithY(originPoint, Double.POSITIVE_INFINITY);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(UiUtil.isPointUserVisible(originXMaxYPoint));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisible_offscreenMinXOriginY_false() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D minXOriginYPoint \u003d pointWithX(originPoint, Double.NEGATIVE_INFINITY);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(UiUtil.isPointUserVisible(minXOriginYPoint));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisible_offscreenMaxXOriginY_false() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D maxXOriginYPoint \u003d pointWithX(originPoint, Double.POSITIVE_INFINITY);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(UiUtil.isPointUserVisible(maxXOriginYPoint));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisibleTopBound_offscreenXoriginY_true() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D offscreenXoriginY \u003d pointWithX(originPoint, Double.NEGATIVE_INFINITY);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final UiUtil.Bounds bound \u003d UiUtil.Bounds.TOP;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(UiUtil.isPointUserVisible(offscreenXoriginY, bound));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisibleTopBound_offscreenXoffscreenY_false() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D offscreenXoffscreenYPoint \u003d new Point2D(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final UiUtil.Bounds bound \u003d UiUtil.Bounds.TOP;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(UiUtil.isPointUserVisible(offscreenXoffscreenYPoint, bound));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisibleRightBound_originXoffscreenY_true() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D originXoffscreenYPoint \u003d pointWithY(originPoint, Double.POSITIVE_INFINITY);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final UiUtil.Bounds bound \u003d UiUtil.Bounds.RIGHT;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(UiUtil.isPointUserVisible(originXoffscreenYPoint, bound));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisibleRightBound_offscreenXoffscreenY_false() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D offscreenXoffscreenYPoint \u003d new Point2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final UiUtil.Bounds bound \u003d UiUtil.Bounds.RIGHT;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(UiUtil.isPointUserVisible(offscreenXoffscreenYPoint, bound));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisibleBottomBound_offscreenXoriginY_true() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D offscreenXoriginY \u003d pointWithX(originPoint, Double.NEGATIVE_INFINITY);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final UiUtil.Bounds bound \u003d UiUtil.Bounds.BOTTOM;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(UiUtil.isPointUserVisible(offscreenXoriginY, bound));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisibleBottomBound_offscreenXoffscreenY_false() {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D offscreenXoffscreenYPoint \u003d new Point2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final UiUtil.Bounds bound \u003d UiUtil.Bounds.BOTTOM;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(UiUtil.isPointUserVisible(offscreenXoffscreenYPoint, bound));"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisibleLeftBound_originXoffscreenY_true() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D originXoffscreenYPoint \u003d pointWithY(originPoint, Double.NEGATIVE_INFINITY);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final UiUtil.Bounds bound \u003d UiUtil.Bounds.LEFT;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertTrue(UiUtil.isPointUserVisible(originXoffscreenYPoint, bound));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void isPointUserVisibleLeftBound_offscreenXoffscreenY_false() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Point2D offscreenXoffscreenYPoint \u003d new Point2D(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final UiUtil.Bounds bound \u003d UiUtil.Bounds.LEFT;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFalse(UiUtil.isPointUserVisible(offscreenXoffscreenYPoint, bound));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 425
    }
  },
  {
    "path": "src/test/java/seedu/address/websocket/CacheTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.websocket;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class CacheTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    private String placesJsonPath \u003d \"src/test/resources/ApiResponseCache/GoogleMapsApi/PlacesTest.json\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void saveToJson() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void loadFromJson() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Cache.loadFromJson(\"foo\", placesJsonPath));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String key \u003d \"https://maps.googleapis.com/maps/api/place/textsearch/json?location\u003d.sg\u0026query\u003dNUS_AKI5B\u0026\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String expectedValue \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        JSONParser parser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        try (Reader reader \u003d new FileReader(placesJsonPath)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            JSONObject jsonObject \u003d (JSONObject) parser.parse(reader);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            expectedValue \u003d jsonObject.get(key).toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(expectedValue, Cache.loadFromJson(key, placesJsonPath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "klementtan": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/websocket/util/UrlUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "klementtan"
        },
        "content": "package seedu.address.websocket.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "klementtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "klementtan"
        },
        "content": "class UrlUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void sanitizeApiKey() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String url \u003d \"https://maps.googleapis.com/maps/api/staticmap?center\u003dBrooklyn+Bridge,New+York,NY\u0026size\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"\u003d600x300\u0026maptype\u003droadmap\u0026markers\u003dcolor:blue%7Clabel:S%7C40.702147,-74.015794\u0026markers\u003dcolor:green%7C\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"label:G%7C40.711614,-74.012318\u0026markers\u003dcolor:red%7Clabel:C%7C40.718217,-73.998284\u0026key\u003dblahblahblah\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"blahblahblahblah\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String expectedUrl \u003d \"https://maps.googleapis.com/maps/api/staticmap?center\u003dBrooklyn+Bridge,New+York,NY\u0026size\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"\u003d600x300\u0026maptype\u003droadmap\u0026markers\u003dcolor:blue%7Clabel:S%7C40.702147,-74.015794\u0026markers\u003dcolor:green%7C\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"label:G%7C40.711614,-74.012318\u0026markers\u003dcolor:red%7Clabel:C%7C40.718217,-73.998284\u0026\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertTrue(UrlUtil.sanitizeApiKey(url).equals(expectedUrl));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void generateGmapsPlacesUrl() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String expectedUrl \u003d \"https://maps.googleapis.com/maps/api/place/findplacefromtext/json?location\u003d.sg\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"\u0026inputtype\u003dtextquery\u0026fields\u003dname,place_id\u0026input\u003dqwerty\u0026key\u003d\u0026\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(UrlUtil.generateGmapsPlacesUrl(\"qwerty\"), expectedUrl);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    void generateDistanceMatrixUrl() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e tooLongStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        for (int i \u003d 0; i \u003c 20; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "klementtan"
        },
        "content": "            tooLongStringList.add(\"qwert\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertThrows(InvalidParameterException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                UrlUtil.generateGmapsDistanceMatrixUrl(tooLongStringList, tooLongStringList));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        ArrayList\u003cString\u003e arg \u003d new ArrayList\u003c\u003e(Arrays.asList(\"LT17\", \"LT13\", \"LT14\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        String expectedUrl \u003d \"https://maps.googleapis.com/maps/api/distancematrix/json?units\u003dimperial\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "klementtan"
        },
        "content": "                + \"\u0026origins\u003dLT17|LT13|LT14|\u0026destinations\u003dLT17|LT13|LT14|\u0026key\u003d\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "klementtan"
        },
        "content": "        assertEquals(UrlUtil.generateGmapsDistanceMatrixUrl(arg, arg), expectedUrl);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "klementtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "klementtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "klementtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "klementtan": 49
    }
  },
  {
    "path": "telegram_notification.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# Reference: https://testdriven.io/blog/getting-telegram-notifications-from-travis-ci/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# More Travis environment variables which we can use in the notification:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "#       https://docs.travis-ci.com/user/environment-variables/#default-environment-variables"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# Get the token from Travis environment vars and build the bot URL:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "BOT_URL\u003d\"https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# Set formatting for the message. Can be either \"Markdown\" or \"HTML\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "PARSE_MODE\u003d\"Markdown\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# Use built-in Travis variables to check if all previous steps passed:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "if [ $TRAVIS_TEST_RESULT -ne 0 ]; then"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    build_status\u003d\"failed\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "else"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    build_status\u003d\"succeeded\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "fi"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# Define send message function. parse_mode can be changed to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# HTML, depending on how you want to format your message:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "send_msg () {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    curl -s -X POST ${BOT_URL} -d chat_id\u003d$TELEGRAM_CHAT_ID \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        -d text\u003d\"$1\" -d parse_mode\u003d${PARSE_MODE}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# Send message to the bot with some pertinent details about the job"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# Note that for Markdown, you need to escape any backtick (inline-code)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# characters, since they\u0027re reserved in bash"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "send_msg \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "-------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "Travis build #${TRAVIS_BUILD_NUMBER} *${build_status}!*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\\`Repository:  ${TRAVIS_REPO_SLUG}\\`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\\`Branch:      ${TRAVIS_BRANCH}\\`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\\`Author:      ${AUTHOR_NAME}\\`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "*Commit Msg:*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "${TRAVIS_COMMIT_MESSAGE}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "[View Job Log](${TRAVIS_JOB_WEB_URL})"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\""
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 40
    }
  }
]
